generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Job Posting model
model JobPosting {
  id               String           @id @default(cuid())
  title            String
  description      String
  requirements     String[]
  responsibilities String[]
  department       String
  location         String
  employmentType   EmploymentType
  workLocation     WorkLocation
  salaryMin        Float?
  salaryMax        Float?
  currency         String           @default("USD")
  status           JobStatus        @default(DRAFT)
  isActive         Boolean          @default(true)
  postedDate       DateTime?
  closingDate      DateTime?
  experienceLevel  ExperienceLevel?
  benefits         String[]
  skills           String[]
  
  // Approval workflow
  isApproved       Boolean          @default(false)
  approvedAt       DateTime?
  approvedById     String?
  
  // Metadata
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  createdById      String?
  updatedById      String?

  // Relations
  applications Application[]

  @@map("job_postings")
}

// Applicant model
model Applicant {
  id                String        @id @default(cuid())
  firstName         String
  lastName          String
  email             String        @unique
  phone             String
  dateOfBirth       DateTime?
  address           Json?         // Flexible address structure
  linkedinProfile   String?
  portfolioUrl      String?
  resumeUrl         String?
  coverLetterUrl    String?
  
  // Experience and skills
  yearsOfExperience Int?
  currentPosition   String?
  currentCompany    String?
  expectedSalary    Float?
  noticePeriod      String?
  skills            String[]
  
  // Status and tracking
  status            ApplicantStatus @default(ACTIVE)
  source            String?         // Where did they come from (website, referral, etc.)
  
  // Metadata
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  createdById       String?
  updatedById       String?

  // Relations
  applications Application[]

  @@map("applicants")
}

// Application model (links job postings and applicants)
model Application {
  id                String            @id @default(cuid())
  jobPostingId      String
  applicantId       String
  
  // Application specific details
  coverLetter       String?
  customResumeUrl   String?           // If they uploaded a job-specific resume
  status            ApplicationStatus @default(SUBMITTED)
  appliedAt         DateTime          @default(now())
  
  // Interview and evaluation
  interviewDate     DateTime?
  interviewNotes    String?
  evaluationScore   Float?
  evaluationNotes   String?
  
  // Decision tracking
  rejectionReason   String?
  rejectedAt        DateTime?
  rejectedById      String?
  
  // Offer details
  offerAmount       Float?
  offerCurrency     String?
  offerDate         DateTime?
  offerAcceptedAt   DateTime?
  offerRejectedAt   DateTime?
  
  // Metadata
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  updatedById       String?

  // Relations
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  applicant  Applicant  @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@unique([jobPostingId, applicantId]) // Prevent duplicate applications
  @@map("applications")
}

// Enums
enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERN
  FREELANCE
}

enum WorkLocation {
  OFFICE
  REMOTE
  HYBRID
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  CANCELLED
  ON_HOLD
}

enum ExperienceLevel {
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  EXECUTIVE
}

enum ApplicantStatus {
  ACTIVE
  INACTIVE
  BLACKLISTED
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  INTERVIEWED
  SECOND_INTERVIEW
  FINAL_INTERVIEW
  REFERENCE_CHECK
  OFFER_EXTENDED
  OFFER_ACCEPTED
  OFFER_REJECTED
  REJECTED
  WITHDRAWN
  HIRED
}
