import { z } from 'zod';
export declare const createJobPostingSchema: z.ZodEffects<z.ZodObject<{
    title: z.ZodString;
    description: z.ZodString;
    requirements: z.ZodArray<z.ZodString, "many">;
    responsibilities: z.ZodArray<z.ZodString, "many">;
    department: z.ZodString;
    location: z.ZodString;
    workLocation: z.ZodDefault<z.ZodNativeEnum<{
        OFFICE: "OFFICE";
        REMOTE: "REMOTE";
        HYBRID: "HYBRID";
    }>>;
    employmentType: z.ZodDefault<z.ZodNativeEnum<{
        FULL_TIME: "FULL_TIME";
        PART_TIME: "PART_TIME";
        CONTRACT: "CONTRACT";
        INTERN: "INTERN";
        FREELANCE: "FREELANCE";
    }>>;
    experienceLevel: z.ZodOptional<z.ZodNativeEnum<{
        ENTRY_LEVEL: "ENTRY_LEVEL";
        MID_LEVEL: "MID_LEVEL";
        SENIOR_LEVEL: "SENIOR_LEVEL";
        EXECUTIVE: "EXECUTIVE";
    }>>;
    salaryMin: z.ZodOptional<z.ZodNumber>;
    salaryMax: z.ZodOptional<z.ZodNumber>;
    currency: z.ZodDefault<z.ZodString>;
    benefits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    skills: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    closingDate: z.ZodOptional<z.ZodString>;
    isActive: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    title: string;
    description: string;
    requirements: string[];
    responsibilities: string[];
    department: string;
    location: string;
    workLocation: "OFFICE" | "REMOTE" | "HYBRID";
    employmentType: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE";
    currency: string;
    benefits: string[];
    skills: string[];
    isActive: boolean;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: number | undefined;
    salaryMax?: number | undefined;
    closingDate?: string | undefined;
}, {
    title: string;
    description: string;
    requirements: string[];
    responsibilities: string[];
    department: string;
    location: string;
    workLocation?: "OFFICE" | "REMOTE" | "HYBRID" | undefined;
    employmentType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE" | undefined;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: number | undefined;
    salaryMax?: number | undefined;
    currency?: string | undefined;
    benefits?: string[] | undefined;
    skills?: string[] | undefined;
    closingDate?: string | undefined;
    isActive?: boolean | undefined;
}>, {
    title: string;
    description: string;
    requirements: string[];
    responsibilities: string[];
    department: string;
    location: string;
    workLocation: "OFFICE" | "REMOTE" | "HYBRID";
    employmentType: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE";
    currency: string;
    benefits: string[];
    skills: string[];
    isActive: boolean;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: number | undefined;
    salaryMax?: number | undefined;
    closingDate?: string | undefined;
}, {
    title: string;
    description: string;
    requirements: string[];
    responsibilities: string[];
    department: string;
    location: string;
    workLocation?: "OFFICE" | "REMOTE" | "HYBRID" | undefined;
    employmentType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE" | undefined;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: number | undefined;
    salaryMax?: number | undefined;
    currency?: string | undefined;
    benefits?: string[] | undefined;
    skills?: string[] | undefined;
    closingDate?: string | undefined;
    isActive?: boolean | undefined;
}>;
export declare const updateJobPostingSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    requirements: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    responsibilities: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    department: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    workLocation: z.ZodOptional<z.ZodDefault<z.ZodNativeEnum<{
        OFFICE: "OFFICE";
        REMOTE: "REMOTE";
        HYBRID: "HYBRID";
    }>>>;
    employmentType: z.ZodOptional<z.ZodDefault<z.ZodNativeEnum<{
        FULL_TIME: "FULL_TIME";
        PART_TIME: "PART_TIME";
        CONTRACT: "CONTRACT";
        INTERN: "INTERN";
        FREELANCE: "FREELANCE";
    }>>>;
    experienceLevel: z.ZodOptional<z.ZodOptional<z.ZodNativeEnum<{
        ENTRY_LEVEL: "ENTRY_LEVEL";
        MID_LEVEL: "MID_LEVEL";
        SENIOR_LEVEL: "SENIOR_LEVEL";
        EXECUTIVE: "EXECUTIVE";
    }>>>;
    salaryMin: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    salaryMax: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    currency: z.ZodOptional<z.ZodDefault<z.ZodString>>;
    benefits: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    skills: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    closingDate: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    isActive: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    title?: string | undefined;
    description?: string | undefined;
    requirements?: string[] | undefined;
    responsibilities?: string[] | undefined;
    department?: string | undefined;
    location?: string | undefined;
    workLocation?: "OFFICE" | "REMOTE" | "HYBRID" | undefined;
    employmentType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE" | undefined;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: number | undefined;
    salaryMax?: number | undefined;
    currency?: string | undefined;
    benefits?: string[] | undefined;
    skills?: string[] | undefined;
    closingDate?: string | undefined;
    isActive?: boolean | undefined;
}, {
    title?: string | undefined;
    description?: string | undefined;
    requirements?: string[] | undefined;
    responsibilities?: string[] | undefined;
    department?: string | undefined;
    location?: string | undefined;
    workLocation?: "OFFICE" | "REMOTE" | "HYBRID" | undefined;
    employmentType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE" | undefined;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: number | undefined;
    salaryMax?: number | undefined;
    currency?: string | undefined;
    benefits?: string[] | undefined;
    skills?: string[] | undefined;
    closingDate?: string | undefined;
    isActive?: boolean | undefined;
}>;
export declare const jobPostingQuerySchema: z.ZodObject<{
    page: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    limit: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    search: z.ZodOptional<z.ZodString>;
    department: z.ZodOptional<z.ZodString>;
    location: z.ZodOptional<z.ZodString>;
    employmentType: z.ZodOptional<z.ZodNativeEnum<{
        FULL_TIME: "FULL_TIME";
        PART_TIME: "PART_TIME";
        CONTRACT: "CONTRACT";
        INTERN: "INTERN";
        FREELANCE: "FREELANCE";
    }>>;
    workLocation: z.ZodOptional<z.ZodNativeEnum<{
        OFFICE: "OFFICE";
        REMOTE: "REMOTE";
        HYBRID: "HYBRID";
    }>>;
    status: z.ZodOptional<z.ZodNativeEnum<{
        DRAFT: "DRAFT";
        PUBLISHED: "PUBLISHED";
        CLOSED: "CLOSED";
        CANCELLED: "CANCELLED";
        ON_HOLD: "ON_HOLD";
    }>>;
    experienceLevel: z.ZodOptional<z.ZodNativeEnum<{
        ENTRY_LEVEL: "ENTRY_LEVEL";
        MID_LEVEL: "MID_LEVEL";
        SENIOR_LEVEL: "SENIOR_LEVEL";
        EXECUTIVE: "EXECUTIVE";
    }>>;
    isActive: z.ZodOptional<z.ZodEffects<z.ZodString, boolean, string>>;
    isApproved: z.ZodOptional<z.ZodEffects<z.ZodString, boolean, string>>;
    salaryMin: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    salaryMax: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    skills: z.ZodOptional<z.ZodString>;
    sortBy: z.ZodDefault<z.ZodEnum<["createdAt", "updatedAt", "title", "postedDate", "closingDate", "salaryMin", "salaryMax"]>>;
    sortOrder: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    page: number;
    limit: number;
    sortBy: "title" | "salaryMin" | "salaryMax" | "closingDate" | "createdAt" | "updatedAt" | "postedDate";
    sortOrder: "asc" | "desc";
    status?: "DRAFT" | "PUBLISHED" | "CLOSED" | "CANCELLED" | "ON_HOLD" | undefined;
    department?: string | undefined;
    location?: string | undefined;
    workLocation?: "OFFICE" | "REMOTE" | "HYBRID" | undefined;
    employmentType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE" | undefined;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: number | undefined;
    salaryMax?: number | undefined;
    skills?: string | undefined;
    isActive?: boolean | undefined;
    search?: string | undefined;
    isApproved?: boolean | undefined;
}, {
    status?: "DRAFT" | "PUBLISHED" | "CLOSED" | "CANCELLED" | "ON_HOLD" | undefined;
    page?: string | undefined;
    limit?: string | undefined;
    sortBy?: "title" | "salaryMin" | "salaryMax" | "closingDate" | "createdAt" | "updatedAt" | "postedDate" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    department?: string | undefined;
    location?: string | undefined;
    workLocation?: "OFFICE" | "REMOTE" | "HYBRID" | undefined;
    employmentType?: "FULL_TIME" | "PART_TIME" | "CONTRACT" | "INTERN" | "FREELANCE" | undefined;
    experienceLevel?: "ENTRY_LEVEL" | "MID_LEVEL" | "SENIOR_LEVEL" | "EXECUTIVE" | undefined;
    salaryMin?: string | undefined;
    salaryMax?: string | undefined;
    skills?: string | undefined;
    isActive?: string | undefined;
    search?: string | undefined;
    isApproved?: string | undefined;
}>;
export declare const approveJobPostingSchema: z.ZodObject<{
    isApproved: z.ZodBoolean;
    notes: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    isApproved: boolean;
    notes?: string | undefined;
}, {
    isApproved: boolean;
    notes?: string | undefined;
}>;
export declare const bulkUpdateJobPostingStatusSchema: z.ZodObject<{
    jobPostingIds: z.ZodArray<z.ZodString, "many">;
    status: z.ZodNativeEnum<{
        DRAFT: "DRAFT";
        PUBLISHED: "PUBLISHED";
        CLOSED: "CLOSED";
        CANCELLED: "CANCELLED";
        ON_HOLD: "ON_HOLD";
    }>;
    notes: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: "DRAFT" | "PUBLISHED" | "CLOSED" | "CANCELLED" | "ON_HOLD";
    jobPostingIds: string[];
    notes?: string | undefined;
}, {
    status: "DRAFT" | "PUBLISHED" | "CLOSED" | "CANCELLED" | "ON_HOLD";
    jobPostingIds: string[];
    notes?: string | undefined;
}>;
export declare const createApplicantSchema: z.ZodObject<{
    firstName: z.ZodString;
    lastName: z.ZodString;
    email: z.ZodString;
    phone: z.ZodString;
    dateOfBirth: z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>;
    address: z.ZodOptional<z.ZodObject<{
        street: z.ZodOptional<z.ZodString>;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        zipCode: z.ZodOptional<z.ZodString>;
        country: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    }, {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    }>>;
    linkedinProfile: z.ZodOptional<z.ZodString>;
    portfolioUrl: z.ZodOptional<z.ZodString>;
    resumeUrl: z.ZodOptional<z.ZodString>;
    coverLetterUrl: z.ZodOptional<z.ZodString>;
    yearsOfExperience: z.ZodOptional<z.ZodNumber>;
    currentPosition: z.ZodOptional<z.ZodString>;
    currentCompany: z.ZodOptional<z.ZodString>;
    expectedSalary: z.ZodOptional<z.ZodNumber>;
    noticePeriod: z.ZodOptional<z.ZodString>;
    skills: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    status: z.ZodDefault<z.ZodNativeEnum<{
        ACTIVE: "ACTIVE";
        INACTIVE: "INACTIVE";
        BLACKLISTED: "BLACKLISTED";
    }>>;
    source: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: "ACTIVE" | "INACTIVE" | "BLACKLISTED";
    skills: string[];
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    dateOfBirth?: Date | undefined;
    address?: {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    } | undefined;
    linkedinProfile?: string | undefined;
    portfolioUrl?: string | undefined;
    resumeUrl?: string | undefined;
    coverLetterUrl?: string | undefined;
    yearsOfExperience?: number | undefined;
    currentPosition?: string | undefined;
    currentCompany?: string | undefined;
    expectedSalary?: number | undefined;
    noticePeriod?: string | undefined;
    source?: string | undefined;
}, {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    status?: "ACTIVE" | "INACTIVE" | "BLACKLISTED" | undefined;
    skills?: string[] | undefined;
    dateOfBirth?: string | undefined;
    address?: {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    } | undefined;
    linkedinProfile?: string | undefined;
    portfolioUrl?: string | undefined;
    resumeUrl?: string | undefined;
    coverLetterUrl?: string | undefined;
    yearsOfExperience?: number | undefined;
    currentPosition?: string | undefined;
    currentCompany?: string | undefined;
    expectedSalary?: number | undefined;
    noticePeriod?: string | undefined;
    source?: string | undefined;
}>;
export declare const updateApplicantSchema: z.ZodObject<{
    firstName: z.ZodOptional<z.ZodString>;
    lastName: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    phone: z.ZodOptional<z.ZodString>;
    dateOfBirth: z.ZodOptional<z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>>;
    address: z.ZodOptional<z.ZodOptional<z.ZodObject<{
        street: z.ZodOptional<z.ZodString>;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        zipCode: z.ZodOptional<z.ZodString>;
        country: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    }, {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    }>>>;
    linkedinProfile: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    portfolioUrl: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    resumeUrl: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    coverLetterUrl: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    yearsOfExperience: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    currentPosition: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    currentCompany: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    expectedSalary: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    noticePeriod: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    skills: z.ZodOptional<z.ZodDefault<z.ZodArray<z.ZodString, "many">>>;
    status: z.ZodOptional<z.ZodDefault<z.ZodNativeEnum<{
        ACTIVE: "ACTIVE";
        INACTIVE: "INACTIVE";
        BLACKLISTED: "BLACKLISTED";
    }>>>;
    source: z.ZodOptional<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "ACTIVE" | "INACTIVE" | "BLACKLISTED" | undefined;
    skills?: string[] | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    } | undefined;
    linkedinProfile?: string | undefined;
    portfolioUrl?: string | undefined;
    resumeUrl?: string | undefined;
    coverLetterUrl?: string | undefined;
    yearsOfExperience?: number | undefined;
    currentPosition?: string | undefined;
    currentCompany?: string | undefined;
    expectedSalary?: number | undefined;
    noticePeriod?: string | undefined;
    source?: string | undefined;
}, {
    status?: "ACTIVE" | "INACTIVE" | "BLACKLISTED" | undefined;
    skills?: string[] | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    dateOfBirth?: string | undefined;
    address?: {
        street?: string | undefined;
        city?: string | undefined;
        state?: string | undefined;
        zipCode?: string | undefined;
        country?: string | undefined;
    } | undefined;
    linkedinProfile?: string | undefined;
    portfolioUrl?: string | undefined;
    resumeUrl?: string | undefined;
    coverLetterUrl?: string | undefined;
    yearsOfExperience?: number | undefined;
    currentPosition?: string | undefined;
    currentCompany?: string | undefined;
    expectedSalary?: number | undefined;
    noticePeriod?: string | undefined;
    source?: string | undefined;
}>;
export declare const applicantQuerySchema: z.ZodObject<{
    page: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    limit: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    search: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodNativeEnum<{
        ACTIVE: "ACTIVE";
        INACTIVE: "INACTIVE";
        BLACKLISTED: "BLACKLISTED";
    }>>;
    yearsOfExperienceMin: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    yearsOfExperienceMax: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    expectedSalaryMin: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    expectedSalaryMax: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    skills: z.ZodOptional<z.ZodString>;
    currentCompany: z.ZodOptional<z.ZodString>;
    source: z.ZodOptional<z.ZodString>;
    sortBy: z.ZodDefault<z.ZodEnum<["createdAt", "updatedAt", "firstName", "lastName", "yearsOfExperience", "expectedSalary"]>>;
    sortOrder: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    page: number;
    limit: number;
    sortBy: "createdAt" | "updatedAt" | "firstName" | "lastName" | "yearsOfExperience" | "expectedSalary";
    sortOrder: "asc" | "desc";
    status?: "ACTIVE" | "INACTIVE" | "BLACKLISTED" | undefined;
    skills?: string | undefined;
    search?: string | undefined;
    currentCompany?: string | undefined;
    source?: string | undefined;
    yearsOfExperienceMin?: number | undefined;
    yearsOfExperienceMax?: number | undefined;
    expectedSalaryMin?: number | undefined;
    expectedSalaryMax?: number | undefined;
}, {
    status?: "ACTIVE" | "INACTIVE" | "BLACKLISTED" | undefined;
    page?: string | undefined;
    limit?: string | undefined;
    sortBy?: "createdAt" | "updatedAt" | "firstName" | "lastName" | "yearsOfExperience" | "expectedSalary" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    skills?: string | undefined;
    search?: string | undefined;
    currentCompany?: string | undefined;
    source?: string | undefined;
    yearsOfExperienceMin?: string | undefined;
    yearsOfExperienceMax?: string | undefined;
    expectedSalaryMin?: string | undefined;
    expectedSalaryMax?: string | undefined;
}>;
export declare const createApplicationSchema: z.ZodObject<{
    jobPostingId: z.ZodString;
    applicantId: z.ZodString;
    coverLetter: z.ZodOptional<z.ZodString>;
    customResumeUrl: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodNativeEnum<{
        SUBMITTED: "SUBMITTED";
        UNDER_REVIEW: "UNDER_REVIEW";
        INTERVIEW_SCHEDULED: "INTERVIEW_SCHEDULED";
        INTERVIEWED: "INTERVIEWED";
        SECOND_INTERVIEW: "SECOND_INTERVIEW";
        FINAL_INTERVIEW: "FINAL_INTERVIEW";
        REFERENCE_CHECK: "REFERENCE_CHECK";
        OFFER_EXTENDED: "OFFER_EXTENDED";
        OFFER_ACCEPTED: "OFFER_ACCEPTED";
        OFFER_REJECTED: "OFFER_REJECTED";
        REJECTED: "REJECTED";
        WITHDRAWN: "WITHDRAWN";
        HIRED: "HIRED";
    }>>;
}, "strip", z.ZodTypeAny, {
    status: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED";
    jobPostingId: string;
    applicantId: string;
    coverLetter?: string | undefined;
    customResumeUrl?: string | undefined;
}, {
    jobPostingId: string;
    applicantId: string;
    status?: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED" | undefined;
    coverLetter?: string | undefined;
    customResumeUrl?: string | undefined;
}>;
export declare const updateApplicationSchema: z.ZodObject<{
    status: z.ZodOptional<z.ZodNativeEnum<{
        SUBMITTED: "SUBMITTED";
        UNDER_REVIEW: "UNDER_REVIEW";
        INTERVIEW_SCHEDULED: "INTERVIEW_SCHEDULED";
        INTERVIEWED: "INTERVIEWED";
        SECOND_INTERVIEW: "SECOND_INTERVIEW";
        FINAL_INTERVIEW: "FINAL_INTERVIEW";
        REFERENCE_CHECK: "REFERENCE_CHECK";
        OFFER_EXTENDED: "OFFER_EXTENDED";
        OFFER_ACCEPTED: "OFFER_ACCEPTED";
        OFFER_REJECTED: "OFFER_REJECTED";
        REJECTED: "REJECTED";
        WITHDRAWN: "WITHDRAWN";
        HIRED: "HIRED";
    }>>;
    coverLetter: z.ZodOptional<z.ZodString>;
    customResumeUrl: z.ZodOptional<z.ZodString>;
    interviewDate: z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>;
    interviewNotes: z.ZodOptional<z.ZodString>;
    evaluationScore: z.ZodOptional<z.ZodNumber>;
    evaluationNotes: z.ZodOptional<z.ZodString>;
    rejectionReason: z.ZodOptional<z.ZodString>;
    offerAmount: z.ZodOptional<z.ZodNumber>;
    offerCurrency: z.ZodOptional<z.ZodString>;
    offerDate: z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>;
}, "strip", z.ZodTypeAny, {
    status?: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED" | undefined;
    coverLetter?: string | undefined;
    customResumeUrl?: string | undefined;
    interviewDate?: Date | undefined;
    interviewNotes?: string | undefined;
    evaluationScore?: number | undefined;
    evaluationNotes?: string | undefined;
    rejectionReason?: string | undefined;
    offerAmount?: number | undefined;
    offerCurrency?: string | undefined;
    offerDate?: Date | undefined;
}, {
    status?: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED" | undefined;
    coverLetter?: string | undefined;
    customResumeUrl?: string | undefined;
    interviewDate?: string | undefined;
    interviewNotes?: string | undefined;
    evaluationScore?: number | undefined;
    evaluationNotes?: string | undefined;
    rejectionReason?: string | undefined;
    offerAmount?: number | undefined;
    offerCurrency?: string | undefined;
    offerDate?: string | undefined;
}>;
export declare const applicationQuerySchema: z.ZodObject<{
    page: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    limit: z.ZodDefault<z.ZodEffects<z.ZodString, number, string>>;
    search: z.ZodOptional<z.ZodString>;
    jobPostingId: z.ZodOptional<z.ZodString>;
    applicantId: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodNativeEnum<{
        SUBMITTED: "SUBMITTED";
        UNDER_REVIEW: "UNDER_REVIEW";
        INTERVIEW_SCHEDULED: "INTERVIEW_SCHEDULED";
        INTERVIEWED: "INTERVIEWED";
        SECOND_INTERVIEW: "SECOND_INTERVIEW";
        FINAL_INTERVIEW: "FINAL_INTERVIEW";
        REFERENCE_CHECK: "REFERENCE_CHECK";
        OFFER_EXTENDED: "OFFER_EXTENDED";
        OFFER_ACCEPTED: "OFFER_ACCEPTED";
        OFFER_REJECTED: "OFFER_REJECTED";
        REJECTED: "REJECTED";
        WITHDRAWN: "WITHDRAWN";
        HIRED: "HIRED";
    }>>;
    appliedAfter: z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>;
    appliedBefore: z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>;
    evaluationScoreMin: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    evaluationScoreMax: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    offerAmountMin: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    offerAmountMax: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
    hasInterview: z.ZodOptional<z.ZodEffects<z.ZodString, boolean, string>>;
    hasOffer: z.ZodOptional<z.ZodEffects<z.ZodString, boolean, string>>;
    sortBy: z.ZodDefault<z.ZodEnum<["createdAt", "updatedAt", "appliedAt", "evaluationScore", "offerAmount"]>>;
    sortOrder: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    page: number;
    limit: number;
    sortBy: "createdAt" | "updatedAt" | "evaluationScore" | "offerAmount" | "appliedAt";
    sortOrder: "asc" | "desc";
    status?: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED" | undefined;
    search?: string | undefined;
    jobPostingId?: string | undefined;
    applicantId?: string | undefined;
    appliedAfter?: Date | undefined;
    appliedBefore?: Date | undefined;
    evaluationScoreMin?: number | undefined;
    evaluationScoreMax?: number | undefined;
    offerAmountMin?: number | undefined;
    offerAmountMax?: number | undefined;
    hasInterview?: boolean | undefined;
    hasOffer?: boolean | undefined;
}, {
    status?: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED" | undefined;
    page?: string | undefined;
    limit?: string | undefined;
    sortBy?: "createdAt" | "updatedAt" | "evaluationScore" | "offerAmount" | "appliedAt" | undefined;
    sortOrder?: "asc" | "desc" | undefined;
    search?: string | undefined;
    jobPostingId?: string | undefined;
    applicantId?: string | undefined;
    appliedAfter?: string | undefined;
    appliedBefore?: string | undefined;
    evaluationScoreMin?: string | undefined;
    evaluationScoreMax?: string | undefined;
    offerAmountMin?: string | undefined;
    offerAmountMax?: string | undefined;
    hasInterview?: string | undefined;
    hasOffer?: string | undefined;
}>;
export declare const bulkUpdateApplicationStatusSchema: z.ZodObject<{
    applicationIds: z.ZodArray<z.ZodString, "many">;
    status: z.ZodNativeEnum<{
        SUBMITTED: "SUBMITTED";
        UNDER_REVIEW: "UNDER_REVIEW";
        INTERVIEW_SCHEDULED: "INTERVIEW_SCHEDULED";
        INTERVIEWED: "INTERVIEWED";
        SECOND_INTERVIEW: "SECOND_INTERVIEW";
        FINAL_INTERVIEW: "FINAL_INTERVIEW";
        REFERENCE_CHECK: "REFERENCE_CHECK";
        OFFER_EXTENDED: "OFFER_EXTENDED";
        OFFER_ACCEPTED: "OFFER_ACCEPTED";
        OFFER_REJECTED: "OFFER_REJECTED";
        REJECTED: "REJECTED";
        WITHDRAWN: "WITHDRAWN";
        HIRED: "HIRED";
    }>;
    notes: z.ZodOptional<z.ZodString>;
    rejectionReason: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED";
    applicationIds: string[];
    notes?: string | undefined;
    rejectionReason?: string | undefined;
}, {
    status: "SUBMITTED" | "UNDER_REVIEW" | "INTERVIEW_SCHEDULED" | "INTERVIEWED" | "SECOND_INTERVIEW" | "FINAL_INTERVIEW" | "REFERENCE_CHECK" | "OFFER_EXTENDED" | "OFFER_ACCEPTED" | "OFFER_REJECTED" | "REJECTED" | "WITHDRAWN" | "HIRED";
    applicationIds: string[];
    notes?: string | undefined;
    rejectionReason?: string | undefined;
}>;
export declare const recruitmentStatsQuerySchema: z.ZodObject<{
    startDate: z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>;
    endDate: z.ZodOptional<z.ZodEffects<z.ZodString, Date, string>>;
    department: z.ZodOptional<z.ZodString>;
    jobPostingId: z.ZodOptional<z.ZodString>;
    groupBy: z.ZodDefault<z.ZodEnum<["day", "week", "month", "year"]>>;
}, "strip", z.ZodTypeAny, {
    groupBy: "day" | "week" | "month" | "year";
    department?: string | undefined;
    jobPostingId?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
}, {
    department?: string | undefined;
    jobPostingId?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    groupBy?: "day" | "week" | "month" | "year" | undefined;
}>;
export type CreateJobPostingInput = z.infer<typeof createJobPostingSchema>;
export type UpdateJobPostingInput = z.infer<typeof updateJobPostingSchema>;
export type JobPostingQueryInput = z.infer<typeof jobPostingQuerySchema>;
export type ApproveJobPostingInput = z.infer<typeof approveJobPostingSchema>;
export type BulkUpdateJobPostingStatusInput = z.infer<typeof bulkUpdateJobPostingStatusSchema>;
export type CreateApplicantInput = z.infer<typeof createApplicantSchema>;
export type UpdateApplicantInput = z.infer<typeof updateApplicantSchema>;
export type ApplicantQueryInput = z.infer<typeof applicantQuerySchema>;
export type CreateApplicationInput = z.infer<typeof createApplicationSchema>;
export type UpdateApplicationInput = z.infer<typeof updateApplicationSchema>;
export type ApplicationQueryInput = z.infer<typeof applicationQuerySchema>;
export type BulkUpdateApplicationStatusInput = z.infer<typeof bulkUpdateApplicationStatusSchema>;
export type RecruitmentStatsQueryInput = z.infer<typeof recruitmentStatsQuerySchema>;
//# sourceMappingURL=recruitment.schema.d.ts.map