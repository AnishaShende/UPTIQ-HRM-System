
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PayrollPeriodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  payDate: 'payDate',
  status: 'status',
  totalEmployees: 'totalEmployees',
  totalGrossPay: 'totalGrossPay',
  totalDeductions: 'totalDeductions',
  totalNetPay: 'totalNetPay',
  currency: 'currency',
  processingNotes: 'processingNotes',
  approvedBy: 'approvedBy',
  approvedDate: 'approvedDate',
  closedBy: 'closedBy',
  closedDate: 'closedDate',
  isRecurring: 'isRecurring',
  frequency: 'frequency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PaySlipScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  payrollPeriodId: 'payrollPeriodId',
  employeeIdNumber: 'employeeIdNumber',
  fullName: 'fullName',
  designation: 'designation',
  department: 'department',
  bankAccount: 'bankAccount',
  payPeriodStart: 'payPeriodStart',
  payPeriodEnd: 'payPeriodEnd',
  payDate: 'payDate',
  workingDays: 'workingDays',
  actualWorkingDays: 'actualWorkingDays',
  baseSalary: 'baseSalary',
  hourlyRate: 'hourlyRate',
  hoursWorked: 'hoursWorked',
  overtimeHours: 'overtimeHours',
  overtimeRate: 'overtimeRate',
  overtimePay: 'overtimePay',
  earnings: 'earnings',
  totalEarnings: 'totalEarnings',
  deductions: 'deductions',
  totalDeductions: 'totalDeductions',
  taxableIncome: 'taxableIncome',
  incomeTax: 'incomeTax',
  socialSecurityTax: 'socialSecurityTax',
  medicareTax: 'medicareTax',
  stateTax: 'stateTax',
  localTax: 'localTax',
  totalTaxes: 'totalTaxes',
  grossPay: 'grossPay',
  netPay: 'netPay',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  paymentReference: 'paymentReference',
  paymentDate: 'paymentDate',
  isVoid: 'isVoid',
  voidReason: 'voidReason',
  voidedBy: 'voidedBy',
  voidedDate: 'voidedDate',
  generatedBy: 'generatedBy',
  approvedBy: 'approvedBy',
  approvedDate: 'approvedDate',
  notes: 'notes',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.SalaryHistoryScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  effectiveDate: 'effectiveDate',
  endDate: 'endDate',
  baseSalary: 'baseSalary',
  currency: 'currency',
  salaryGrade: 'salaryGrade',
  payFrequency: 'payFrequency',
  allowances: 'allowances',
  benefits: 'benefits',
  changeReason: 'changeReason',
  changeType: 'changeType',
  previousSalary: 'previousSalary',
  salaryIncrease: 'salaryIncrease',
  percentageIncrease: 'percentageIncrease',
  approvedBy: 'approvedBy',
  approvedDate: 'approvedDate',
  status: 'status',
  comments: 'comments',
  supportingDocs: 'supportingDocs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PayrollStatsScalarFieldEnum = {
  id: 'id',
  period: 'period',
  periodType: 'periodType',
  year: 'year',
  month: 'month',
  quarter: 'quarter',
  totalEmployees: 'totalEmployees',
  activeEmployees: 'activeEmployees',
  newHires: 'newHires',
  terminations: 'terminations',
  totalGrossPay: 'totalGrossPay',
  totalNetPay: 'totalNetPay',
  totalDeductions: 'totalDeductions',
  totalTaxes: 'totalTaxes',
  totalBenefits: 'totalBenefits',
  averageSalary: 'averageSalary',
  medianSalary: 'medianSalary',
  currency: 'currency',
  departmentBreakdown: 'departmentBreakdown',
  payrollPeriods: 'payrollPeriods',
  processingTime: 'processingTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PayrollConfigScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  configType: 'configType',
  configValue: 'configValue',
  isActive: 'isActive',
  effectiveFrom: 'effectiveFrom',
  effectiveTo: 'effectiveTo',
  applicableCountries: 'applicableCountries',
  applicableStates: 'applicableStates',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.EmployeeTaxInfoScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  taxYear: 'taxYear',
  filingStatus: 'filingStatus',
  dependents: 'dependents',
  exemptions: 'exemptions',
  federalExemptions: 'federalExemptions',
  stateExemptions: 'stateExemptions',
  additionalWithholding: 'additionalWithholding',
  ssn: 'ssn',
  taxId: 'taxId',
  ytdGrossPay: 'ytdGrossPay',
  ytdFederalTax: 'ytdFederalTax',
  ytdStateTax: 'ytdStateTax',
  ytdSocialSecurity: 'ytdSocialSecurity',
  ytdMedicare: 'ytdMedicare',
  ytdNetPay: 'ytdNetPay',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PayrollProcessingLogScalarFieldEnum = {
  id: 'id',
  payrollPeriodId: 'payrollPeriodId',
  processType: 'processType',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  employeesProcessed: 'employeesProcessed',
  successCount: 'successCount',
  errorCount: 'errorCount',
  warningCount: 'warningCount',
  processedBy: 'processedBy',
  processingDetails: 'processingDetails',
  errors: 'errors',
  warnings: 'warnings',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PayrollStatus = exports.$Enums.PayrollStatus = {
  DRAFT: 'DRAFT',
  IN_PROGRESS: 'IN_PROGRESS',
  PROCESSED: 'PROCESSED',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED'
};

exports.PayrollFrequency = exports.$Enums.PayrollFrequency = {
  WEEKLY: 'WEEKLY',
  BI_WEEKLY: 'BI_WEEKLY',
  SEMI_MONTHLY: 'SEMI_MONTHLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY'
};

exports.PayslipStatus = exports.$Enums.PayslipStatus = {
  GENERATED: 'GENERATED',
  REVIEWED: 'REVIEWED',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  VOID: 'VOID',
  ERROR: 'ERROR'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  CASH: 'CASH',
  DIRECT_DEPOSIT: 'DIRECT_DEPOSIT',
  WIRE_TRANSFER: 'WIRE_TRANSFER'
};

exports.SalaryChangeType = exports.$Enums.SalaryChangeType = {
  INITIAL: 'INITIAL',
  PROMOTION: 'PROMOTION',
  ANNUAL_INCREASE: 'ANNUAL_INCREASE',
  MERIT_INCREASE: 'MERIT_INCREASE',
  COST_OF_LIVING: 'COST_OF_LIVING',
  DEMOTION: 'DEMOTION',
  TRANSFER: 'TRANSFER',
  ADJUSTMENT: 'ADJUSTMENT',
  BONUS: 'BONUS'
};

exports.SalaryStatus = exports.$Enums.SalaryStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  SUPERSEDED: 'SUPERSEDED'
};

exports.PeriodType = exports.$Enums.PeriodType = {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY'
};

exports.ProcessType = exports.$Enums.ProcessType = {
  FULL_PAYROLL: 'FULL_PAYROLL',
  PAYSLIP_GENERATION: 'PAYSLIP_GENERATION',
  TAX_CALCULATION: 'TAX_CALCULATION',
  DEDUCTION_PROCESSING: 'DEDUCTION_PROCESSING',
  STATS_CALCULATION: 'STATS_CALCULATION',
  BULK_UPDATE: 'BULK_UPDATE'
};

exports.ProcessingStatus = exports.$Enums.ProcessingStatus = {
  STARTED: 'STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  PayrollPeriod: 'PayrollPeriod',
  PaySlip: 'PaySlip',
  SalaryHistory: 'SalaryHistory',
  PayrollStats: 'PayrollStats',
  PayrollConfig: 'PayrollConfig',
  EmployeeTaxInfo: 'EmployeeTaxInfo',
  PayrollProcessingLog: 'PayrollProcessingLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
