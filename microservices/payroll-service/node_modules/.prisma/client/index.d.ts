
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model PayrollPeriod
 * 
 */
export type PayrollPeriod = $Result.DefaultSelection<Prisma.$PayrollPeriodPayload>
/**
 * Model PaySlip
 * 
 */
export type PaySlip = $Result.DefaultSelection<Prisma.$PaySlipPayload>
/**
 * Model SalaryHistory
 * 
 */
export type SalaryHistory = $Result.DefaultSelection<Prisma.$SalaryHistoryPayload>
/**
 * Model PayrollStats
 * 
 */
export type PayrollStats = $Result.DefaultSelection<Prisma.$PayrollStatsPayload>
/**
 * Model PayrollConfig
 * 
 */
export type PayrollConfig = $Result.DefaultSelection<Prisma.$PayrollConfigPayload>
/**
 * Model EmployeeTaxInfo
 * 
 */
export type EmployeeTaxInfo = $Result.DefaultSelection<Prisma.$EmployeeTaxInfoPayload>
/**
 * Model PayrollProcessingLog
 * 
 */
export type PayrollProcessingLog = $Result.DefaultSelection<Prisma.$PayrollProcessingLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PayrollStatus: {
  DRAFT: 'DRAFT',
  IN_PROGRESS: 'IN_PROGRESS',
  PROCESSED: 'PROCESSED',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  CLOSED: 'CLOSED',
  CANCELLED: 'CANCELLED'
};

export type PayrollStatus = (typeof PayrollStatus)[keyof typeof PayrollStatus]


export const PayrollFrequency: {
  WEEKLY: 'WEEKLY',
  BI_WEEKLY: 'BI_WEEKLY',
  SEMI_MONTHLY: 'SEMI_MONTHLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY'
};

export type PayrollFrequency = (typeof PayrollFrequency)[keyof typeof PayrollFrequency]


export const PayslipStatus: {
  GENERATED: 'GENERATED',
  REVIEWED: 'REVIEWED',
  APPROVED: 'APPROVED',
  PAID: 'PAID',
  VOID: 'VOID',
  ERROR: 'ERROR'
};

export type PayslipStatus = (typeof PayslipStatus)[keyof typeof PayslipStatus]


export const PaymentMethod: {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  CASH: 'CASH',
  DIRECT_DEPOSIT: 'DIRECT_DEPOSIT',
  WIRE_TRANSFER: 'WIRE_TRANSFER'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const SalaryChangeType: {
  INITIAL: 'INITIAL',
  PROMOTION: 'PROMOTION',
  ANNUAL_INCREASE: 'ANNUAL_INCREASE',
  MERIT_INCREASE: 'MERIT_INCREASE',
  COST_OF_LIVING: 'COST_OF_LIVING',
  DEMOTION: 'DEMOTION',
  TRANSFER: 'TRANSFER',
  ADJUSTMENT: 'ADJUSTMENT',
  BONUS: 'BONUS'
};

export type SalaryChangeType = (typeof SalaryChangeType)[keyof typeof SalaryChangeType]


export const SalaryStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  SUPERSEDED: 'SUPERSEDED'
};

export type SalaryStatus = (typeof SalaryStatus)[keyof typeof SalaryStatus]


export const PeriodType: {
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  YEARLY: 'YEARLY'
};

export type PeriodType = (typeof PeriodType)[keyof typeof PeriodType]


export const ProcessType: {
  FULL_PAYROLL: 'FULL_PAYROLL',
  PAYSLIP_GENERATION: 'PAYSLIP_GENERATION',
  TAX_CALCULATION: 'TAX_CALCULATION',
  DEDUCTION_PROCESSING: 'DEDUCTION_PROCESSING',
  STATS_CALCULATION: 'STATS_CALCULATION',
  BULK_UPDATE: 'BULK_UPDATE'
};

export type ProcessType = (typeof ProcessType)[keyof typeof ProcessType]


export const ProcessingStatus: {
  STARTED: 'STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type ProcessingStatus = (typeof ProcessingStatus)[keyof typeof ProcessingStatus]

}

export type PayrollStatus = $Enums.PayrollStatus

export const PayrollStatus: typeof $Enums.PayrollStatus

export type PayrollFrequency = $Enums.PayrollFrequency

export const PayrollFrequency: typeof $Enums.PayrollFrequency

export type PayslipStatus = $Enums.PayslipStatus

export const PayslipStatus: typeof $Enums.PayslipStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type SalaryChangeType = $Enums.SalaryChangeType

export const SalaryChangeType: typeof $Enums.SalaryChangeType

export type SalaryStatus = $Enums.SalaryStatus

export const SalaryStatus: typeof $Enums.SalaryStatus

export type PeriodType = $Enums.PeriodType

export const PeriodType: typeof $Enums.PeriodType

export type ProcessType = $Enums.ProcessType

export const ProcessType: typeof $Enums.ProcessType

export type ProcessingStatus = $Enums.ProcessingStatus

export const ProcessingStatus: typeof $Enums.ProcessingStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more PayrollPeriods
 * const payrollPeriods = await prisma.payrollPeriod.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more PayrollPeriods
   * const payrollPeriods = await prisma.payrollPeriod.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.payrollPeriod`: Exposes CRUD operations for the **PayrollPeriod** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollPeriods
    * const payrollPeriods = await prisma.payrollPeriod.findMany()
    * ```
    */
  get payrollPeriod(): Prisma.PayrollPeriodDelegate<ExtArgs>;

  /**
   * `prisma.paySlip`: Exposes CRUD operations for the **PaySlip** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaySlips
    * const paySlips = await prisma.paySlip.findMany()
    * ```
    */
  get paySlip(): Prisma.PaySlipDelegate<ExtArgs>;

  /**
   * `prisma.salaryHistory`: Exposes CRUD operations for the **SalaryHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalaryHistories
    * const salaryHistories = await prisma.salaryHistory.findMany()
    * ```
    */
  get salaryHistory(): Prisma.SalaryHistoryDelegate<ExtArgs>;

  /**
   * `prisma.payrollStats`: Exposes CRUD operations for the **PayrollStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollStats
    * const payrollStats = await prisma.payrollStats.findMany()
    * ```
    */
  get payrollStats(): Prisma.PayrollStatsDelegate<ExtArgs>;

  /**
   * `prisma.payrollConfig`: Exposes CRUD operations for the **PayrollConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollConfigs
    * const payrollConfigs = await prisma.payrollConfig.findMany()
    * ```
    */
  get payrollConfig(): Prisma.PayrollConfigDelegate<ExtArgs>;

  /**
   * `prisma.employeeTaxInfo`: Exposes CRUD operations for the **EmployeeTaxInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeTaxInfos
    * const employeeTaxInfos = await prisma.employeeTaxInfo.findMany()
    * ```
    */
  get employeeTaxInfo(): Prisma.EmployeeTaxInfoDelegate<ExtArgs>;

  /**
   * `prisma.payrollProcessingLog`: Exposes CRUD operations for the **PayrollProcessingLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayrollProcessingLogs
    * const payrollProcessingLogs = await prisma.payrollProcessingLog.findMany()
    * ```
    */
  get payrollProcessingLog(): Prisma.PayrollProcessingLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    PayrollPeriod: 'PayrollPeriod',
    PaySlip: 'PaySlip',
    SalaryHistory: 'SalaryHistory',
    PayrollStats: 'PayrollStats',
    PayrollConfig: 'PayrollConfig',
    EmployeeTaxInfo: 'EmployeeTaxInfo',
    PayrollProcessingLog: 'PayrollProcessingLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "payrollPeriod" | "paySlip" | "salaryHistory" | "payrollStats" | "payrollConfig" | "employeeTaxInfo" | "payrollProcessingLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      PayrollPeriod: {
        payload: Prisma.$PayrollPeriodPayload<ExtArgs>
        fields: Prisma.PayrollPeriodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollPeriodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollPeriodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          findFirst: {
            args: Prisma.PayrollPeriodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollPeriodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          findMany: {
            args: Prisma.PayrollPeriodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>[]
          }
          create: {
            args: Prisma.PayrollPeriodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          createMany: {
            args: Prisma.PayrollPeriodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollPeriodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>[]
          }
          delete: {
            args: Prisma.PayrollPeriodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          update: {
            args: Prisma.PayrollPeriodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          deleteMany: {
            args: Prisma.PayrollPeriodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollPeriodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PayrollPeriodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollPeriodPayload>
          }
          aggregate: {
            args: Prisma.PayrollPeriodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollPeriod>
          }
          groupBy: {
            args: Prisma.PayrollPeriodGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollPeriodGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollPeriodCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollPeriodCountAggregateOutputType> | number
          }
        }
      }
      PaySlip: {
        payload: Prisma.$PaySlipPayload<ExtArgs>
        fields: Prisma.PaySlipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaySlipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaySlipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          findFirst: {
            args: Prisma.PaySlipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaySlipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          findMany: {
            args: Prisma.PaySlipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>[]
          }
          create: {
            args: Prisma.PaySlipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          createMany: {
            args: Prisma.PaySlipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaySlipCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>[]
          }
          delete: {
            args: Prisma.PaySlipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          update: {
            args: Prisma.PaySlipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          deleteMany: {
            args: Prisma.PaySlipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaySlipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaySlipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaySlipPayload>
          }
          aggregate: {
            args: Prisma.PaySlipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaySlip>
          }
          groupBy: {
            args: Prisma.PaySlipGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaySlipGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaySlipCountArgs<ExtArgs>
            result: $Utils.Optional<PaySlipCountAggregateOutputType> | number
          }
        }
      }
      SalaryHistory: {
        payload: Prisma.$SalaryHistoryPayload<ExtArgs>
        fields: Prisma.SalaryHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalaryHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalaryHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          findFirst: {
            args: Prisma.SalaryHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalaryHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          findMany: {
            args: Prisma.SalaryHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>[]
          }
          create: {
            args: Prisma.SalaryHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          createMany: {
            args: Prisma.SalaryHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SalaryHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>[]
          }
          delete: {
            args: Prisma.SalaryHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          update: {
            args: Prisma.SalaryHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          deleteMany: {
            args: Prisma.SalaryHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalaryHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SalaryHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalaryHistoryPayload>
          }
          aggregate: {
            args: Prisma.SalaryHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSalaryHistory>
          }
          groupBy: {
            args: Prisma.SalaryHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalaryHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalaryHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<SalaryHistoryCountAggregateOutputType> | number
          }
        }
      }
      PayrollStats: {
        payload: Prisma.$PayrollStatsPayload<ExtArgs>
        fields: Prisma.PayrollStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>
          }
          findFirst: {
            args: Prisma.PayrollStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>
          }
          findMany: {
            args: Prisma.PayrollStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>[]
          }
          create: {
            args: Prisma.PayrollStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>
          }
          createMany: {
            args: Prisma.PayrollStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>[]
          }
          delete: {
            args: Prisma.PayrollStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>
          }
          update: {
            args: Prisma.PayrollStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>
          }
          deleteMany: {
            args: Prisma.PayrollStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PayrollStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollStatsPayload>
          }
          aggregate: {
            args: Prisma.PayrollStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollStats>
          }
          groupBy: {
            args: Prisma.PayrollStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollStatsCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollStatsCountAggregateOutputType> | number
          }
        }
      }
      PayrollConfig: {
        payload: Prisma.$PayrollConfigPayload<ExtArgs>
        fields: Prisma.PayrollConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>
          }
          findFirst: {
            args: Prisma.PayrollConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>
          }
          findMany: {
            args: Prisma.PayrollConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>[]
          }
          create: {
            args: Prisma.PayrollConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>
          }
          createMany: {
            args: Prisma.PayrollConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>[]
          }
          delete: {
            args: Prisma.PayrollConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>
          }
          update: {
            args: Prisma.PayrollConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>
          }
          deleteMany: {
            args: Prisma.PayrollConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PayrollConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollConfigPayload>
          }
          aggregate: {
            args: Prisma.PayrollConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollConfig>
          }
          groupBy: {
            args: Prisma.PayrollConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollConfigCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollConfigCountAggregateOutputType> | number
          }
        }
      }
      EmployeeTaxInfo: {
        payload: Prisma.$EmployeeTaxInfoPayload<ExtArgs>
        fields: Prisma.EmployeeTaxInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeTaxInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeTaxInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>
          }
          findFirst: {
            args: Prisma.EmployeeTaxInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeTaxInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>
          }
          findMany: {
            args: Prisma.EmployeeTaxInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>[]
          }
          create: {
            args: Prisma.EmployeeTaxInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>
          }
          createMany: {
            args: Prisma.EmployeeTaxInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeTaxInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>[]
          }
          delete: {
            args: Prisma.EmployeeTaxInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>
          }
          update: {
            args: Prisma.EmployeeTaxInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>
          }
          deleteMany: {
            args: Prisma.EmployeeTaxInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeTaxInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployeeTaxInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeeTaxInfoPayload>
          }
          aggregate: {
            args: Prisma.EmployeeTaxInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeTaxInfo>
          }
          groupBy: {
            args: Prisma.EmployeeTaxInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTaxInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeTaxInfoCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeTaxInfoCountAggregateOutputType> | number
          }
        }
      }
      PayrollProcessingLog: {
        payload: Prisma.$PayrollProcessingLogPayload<ExtArgs>
        fields: Prisma.PayrollProcessingLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayrollProcessingLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayrollProcessingLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>
          }
          findFirst: {
            args: Prisma.PayrollProcessingLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayrollProcessingLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>
          }
          findMany: {
            args: Prisma.PayrollProcessingLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>[]
          }
          create: {
            args: Prisma.PayrollProcessingLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>
          }
          createMany: {
            args: Prisma.PayrollProcessingLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayrollProcessingLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>[]
          }
          delete: {
            args: Prisma.PayrollProcessingLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>
          }
          update: {
            args: Prisma.PayrollProcessingLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>
          }
          deleteMany: {
            args: Prisma.PayrollProcessingLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayrollProcessingLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PayrollProcessingLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayrollProcessingLogPayload>
          }
          aggregate: {
            args: Prisma.PayrollProcessingLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayrollProcessingLog>
          }
          groupBy: {
            args: Prisma.PayrollProcessingLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollProcessingLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayrollProcessingLogCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollProcessingLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PayrollPeriodCountOutputType
   */

  export type PayrollPeriodCountOutputType = {
    payslips: number
  }

  export type PayrollPeriodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payslips?: boolean | PayrollPeriodCountOutputTypeCountPayslipsArgs
  }

  // Custom InputTypes
  /**
   * PayrollPeriodCountOutputType without action
   */
  export type PayrollPeriodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriodCountOutputType
     */
    select?: PayrollPeriodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PayrollPeriodCountOutputType without action
   */
  export type PayrollPeriodCountOutputTypeCountPayslipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaySlipWhereInput
  }


  /**
   * Models
   */

  /**
   * Model PayrollPeriod
   */

  export type AggregatePayrollPeriod = {
    _count: PayrollPeriodCountAggregateOutputType | null
    _avg: PayrollPeriodAvgAggregateOutputType | null
    _sum: PayrollPeriodSumAggregateOutputType | null
    _min: PayrollPeriodMinAggregateOutputType | null
    _max: PayrollPeriodMaxAggregateOutputType | null
  }

  export type PayrollPeriodAvgAggregateOutputType = {
    totalEmployees: number | null
    totalGrossPay: number | null
    totalDeductions: number | null
    totalNetPay: number | null
  }

  export type PayrollPeriodSumAggregateOutputType = {
    totalEmployees: number | null
    totalGrossPay: number | null
    totalDeductions: number | null
    totalNetPay: number | null
  }

  export type PayrollPeriodMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    payDate: Date | null
    status: $Enums.PayrollStatus | null
    totalEmployees: number | null
    totalGrossPay: number | null
    totalDeductions: number | null
    totalNetPay: number | null
    currency: string | null
    processingNotes: string | null
    approvedBy: string | null
    approvedDate: Date | null
    closedBy: string | null
    closedDate: Date | null
    isRecurring: boolean | null
    frequency: $Enums.PayrollFrequency | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PayrollPeriodMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    payDate: Date | null
    status: $Enums.PayrollStatus | null
    totalEmployees: number | null
    totalGrossPay: number | null
    totalDeductions: number | null
    totalNetPay: number | null
    currency: string | null
    processingNotes: string | null
    approvedBy: string | null
    approvedDate: Date | null
    closedBy: string | null
    closedDate: Date | null
    isRecurring: boolean | null
    frequency: $Enums.PayrollFrequency | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PayrollPeriodCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startDate: number
    endDate: number
    payDate: number
    status: number
    totalEmployees: number
    totalGrossPay: number
    totalDeductions: number
    totalNetPay: number
    currency: number
    processingNotes: number
    approvedBy: number
    approvedDate: number
    closedBy: number
    closedDate: number
    isRecurring: number
    frequency: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PayrollPeriodAvgAggregateInputType = {
    totalEmployees?: true
    totalGrossPay?: true
    totalDeductions?: true
    totalNetPay?: true
  }

  export type PayrollPeriodSumAggregateInputType = {
    totalEmployees?: true
    totalGrossPay?: true
    totalDeductions?: true
    totalNetPay?: true
  }

  export type PayrollPeriodMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    payDate?: true
    status?: true
    totalEmployees?: true
    totalGrossPay?: true
    totalDeductions?: true
    totalNetPay?: true
    currency?: true
    processingNotes?: true
    approvedBy?: true
    approvedDate?: true
    closedBy?: true
    closedDate?: true
    isRecurring?: true
    frequency?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PayrollPeriodMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    payDate?: true
    status?: true
    totalEmployees?: true
    totalGrossPay?: true
    totalDeductions?: true
    totalNetPay?: true
    currency?: true
    processingNotes?: true
    approvedBy?: true
    approvedDate?: true
    closedBy?: true
    closedDate?: true
    isRecurring?: true
    frequency?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PayrollPeriodCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    payDate?: true
    status?: true
    totalEmployees?: true
    totalGrossPay?: true
    totalDeductions?: true
    totalNetPay?: true
    currency?: true
    processingNotes?: true
    approvedBy?: true
    approvedDate?: true
    closedBy?: true
    closedDate?: true
    isRecurring?: true
    frequency?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PayrollPeriodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollPeriod to aggregate.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollPeriods
    **/
    _count?: true | PayrollPeriodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollPeriodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollPeriodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollPeriodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollPeriodMaxAggregateInputType
  }

  export type GetPayrollPeriodAggregateType<T extends PayrollPeriodAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollPeriod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollPeriod[P]>
      : GetScalarType<T[P], AggregatePayrollPeriod[P]>
  }




  export type PayrollPeriodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollPeriodWhereInput
    orderBy?: PayrollPeriodOrderByWithAggregationInput | PayrollPeriodOrderByWithAggregationInput[]
    by: PayrollPeriodScalarFieldEnum[] | PayrollPeriodScalarFieldEnum
    having?: PayrollPeriodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollPeriodCountAggregateInputType | true
    _avg?: PayrollPeriodAvgAggregateInputType
    _sum?: PayrollPeriodSumAggregateInputType
    _min?: PayrollPeriodMinAggregateInputType
    _max?: PayrollPeriodMaxAggregateInputType
  }

  export type PayrollPeriodGroupByOutputType = {
    id: string
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    payDate: Date
    status: $Enums.PayrollStatus
    totalEmployees: number
    totalGrossPay: number
    totalDeductions: number
    totalNetPay: number
    currency: string
    processingNotes: string | null
    approvedBy: string | null
    approvedDate: Date | null
    closedBy: string | null
    closedDate: Date | null
    isRecurring: boolean
    frequency: $Enums.PayrollFrequency
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: PayrollPeriodCountAggregateOutputType | null
    _avg: PayrollPeriodAvgAggregateOutputType | null
    _sum: PayrollPeriodSumAggregateOutputType | null
    _min: PayrollPeriodMinAggregateOutputType | null
    _max: PayrollPeriodMaxAggregateOutputType | null
  }

  type GetPayrollPeriodGroupByPayload<T extends PayrollPeriodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollPeriodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollPeriodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollPeriodGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollPeriodGroupByOutputType[P]>
        }
      >
    >


  export type PayrollPeriodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    payDate?: boolean
    status?: boolean
    totalEmployees?: boolean
    totalGrossPay?: boolean
    totalDeductions?: boolean
    totalNetPay?: boolean
    currency?: boolean
    processingNotes?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    closedBy?: boolean
    closedDate?: boolean
    isRecurring?: boolean
    frequency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    payslips?: boolean | PayrollPeriod$payslipsArgs<ExtArgs>
    _count?: boolean | PayrollPeriodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payrollPeriod"]>

  export type PayrollPeriodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    payDate?: boolean
    status?: boolean
    totalEmployees?: boolean
    totalGrossPay?: boolean
    totalDeductions?: boolean
    totalNetPay?: boolean
    currency?: boolean
    processingNotes?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    closedBy?: boolean
    closedDate?: boolean
    isRecurring?: boolean
    frequency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["payrollPeriod"]>

  export type PayrollPeriodSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    payDate?: boolean
    status?: boolean
    totalEmployees?: boolean
    totalGrossPay?: boolean
    totalDeductions?: boolean
    totalNetPay?: boolean
    currency?: boolean
    processingNotes?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    closedBy?: boolean
    closedDate?: boolean
    isRecurring?: boolean
    frequency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PayrollPeriodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payslips?: boolean | PayrollPeriod$payslipsArgs<ExtArgs>
    _count?: boolean | PayrollPeriodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PayrollPeriodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PayrollPeriodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollPeriod"
    objects: {
      payslips: Prisma.$PaySlipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      startDate: Date
      endDate: Date
      payDate: Date
      status: $Enums.PayrollStatus
      totalEmployees: number
      totalGrossPay: number
      totalDeductions: number
      totalNetPay: number
      currency: string
      processingNotes: string | null
      approvedBy: string | null
      approvedDate: Date | null
      closedBy: string | null
      closedDate: Date | null
      isRecurring: boolean
      frequency: $Enums.PayrollFrequency
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["payrollPeriod"]>
    composites: {}
  }

  type PayrollPeriodGetPayload<S extends boolean | null | undefined | PayrollPeriodDefaultArgs> = $Result.GetResult<Prisma.$PayrollPeriodPayload, S>

  type PayrollPeriodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollPeriodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollPeriodCountAggregateInputType | true
    }

  export interface PayrollPeriodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollPeriod'], meta: { name: 'PayrollPeriod' } }
    /**
     * Find zero or one PayrollPeriod that matches the filter.
     * @param {PayrollPeriodFindUniqueArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollPeriodFindUniqueArgs>(args: SelectSubset<T, PayrollPeriodFindUniqueArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PayrollPeriod that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PayrollPeriodFindUniqueOrThrowArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollPeriodFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollPeriodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PayrollPeriod that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodFindFirstArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollPeriodFindFirstArgs>(args?: SelectSubset<T, PayrollPeriodFindFirstArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PayrollPeriod that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodFindFirstOrThrowArgs} args - Arguments to find a PayrollPeriod
     * @example
     * // Get one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollPeriodFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollPeriodFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PayrollPeriods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollPeriods
     * const payrollPeriods = await prisma.payrollPeriod.findMany()
     * 
     * // Get first 10 PayrollPeriods
     * const payrollPeriods = await prisma.payrollPeriod.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollPeriodWithIdOnly = await prisma.payrollPeriod.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollPeriodFindManyArgs>(args?: SelectSubset<T, PayrollPeriodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PayrollPeriod.
     * @param {PayrollPeriodCreateArgs} args - Arguments to create a PayrollPeriod.
     * @example
     * // Create one PayrollPeriod
     * const PayrollPeriod = await prisma.payrollPeriod.create({
     *   data: {
     *     // ... data to create a PayrollPeriod
     *   }
     * })
     * 
     */
    create<T extends PayrollPeriodCreateArgs>(args: SelectSubset<T, PayrollPeriodCreateArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PayrollPeriods.
     * @param {PayrollPeriodCreateManyArgs} args - Arguments to create many PayrollPeriods.
     * @example
     * // Create many PayrollPeriods
     * const payrollPeriod = await prisma.payrollPeriod.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollPeriodCreateManyArgs>(args?: SelectSubset<T, PayrollPeriodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollPeriods and returns the data saved in the database.
     * @param {PayrollPeriodCreateManyAndReturnArgs} args - Arguments to create many PayrollPeriods.
     * @example
     * // Create many PayrollPeriods
     * const payrollPeriod = await prisma.payrollPeriod.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollPeriods and only return the `id`
     * const payrollPeriodWithIdOnly = await prisma.payrollPeriod.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollPeriodCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollPeriodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PayrollPeriod.
     * @param {PayrollPeriodDeleteArgs} args - Arguments to delete one PayrollPeriod.
     * @example
     * // Delete one PayrollPeriod
     * const PayrollPeriod = await prisma.payrollPeriod.delete({
     *   where: {
     *     // ... filter to delete one PayrollPeriod
     *   }
     * })
     * 
     */
    delete<T extends PayrollPeriodDeleteArgs>(args: SelectSubset<T, PayrollPeriodDeleteArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PayrollPeriod.
     * @param {PayrollPeriodUpdateArgs} args - Arguments to update one PayrollPeriod.
     * @example
     * // Update one PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollPeriodUpdateArgs>(args: SelectSubset<T, PayrollPeriodUpdateArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PayrollPeriods.
     * @param {PayrollPeriodDeleteManyArgs} args - Arguments to filter PayrollPeriods to delete.
     * @example
     * // Delete a few PayrollPeriods
     * const { count } = await prisma.payrollPeriod.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollPeriodDeleteManyArgs>(args?: SelectSubset<T, PayrollPeriodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollPeriods
     * const payrollPeriod = await prisma.payrollPeriod.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollPeriodUpdateManyArgs>(args: SelectSubset<T, PayrollPeriodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayrollPeriod.
     * @param {PayrollPeriodUpsertArgs} args - Arguments to update or create a PayrollPeriod.
     * @example
     * // Update or create a PayrollPeriod
     * const payrollPeriod = await prisma.payrollPeriod.upsert({
     *   create: {
     *     // ... data to create a PayrollPeriod
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollPeriod we want to update
     *   }
     * })
     */
    upsert<T extends PayrollPeriodUpsertArgs>(args: SelectSubset<T, PayrollPeriodUpsertArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PayrollPeriods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodCountArgs} args - Arguments to filter PayrollPeriods to count.
     * @example
     * // Count the number of PayrollPeriods
     * const count = await prisma.payrollPeriod.count({
     *   where: {
     *     // ... the filter for the PayrollPeriods we want to count
     *   }
     * })
    **/
    count<T extends PayrollPeriodCountArgs>(
      args?: Subset<T, PayrollPeriodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollPeriodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollPeriodAggregateArgs>(args: Subset<T, PayrollPeriodAggregateArgs>): Prisma.PrismaPromise<GetPayrollPeriodAggregateType<T>>

    /**
     * Group by PayrollPeriod.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollPeriodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollPeriodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollPeriodGroupByArgs['orderBy'] }
        : { orderBy?: PayrollPeriodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollPeriodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollPeriodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollPeriod model
   */
  readonly fields: PayrollPeriodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollPeriod.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollPeriodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payslips<T extends PayrollPeriod$payslipsArgs<ExtArgs> = {}>(args?: Subset<T, PayrollPeriod$payslipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollPeriod model
   */ 
  interface PayrollPeriodFieldRefs {
    readonly id: FieldRef<"PayrollPeriod", 'String'>
    readonly name: FieldRef<"PayrollPeriod", 'String'>
    readonly description: FieldRef<"PayrollPeriod", 'String'>
    readonly startDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly endDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly payDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly status: FieldRef<"PayrollPeriod", 'PayrollStatus'>
    readonly totalEmployees: FieldRef<"PayrollPeriod", 'Int'>
    readonly totalGrossPay: FieldRef<"PayrollPeriod", 'Float'>
    readonly totalDeductions: FieldRef<"PayrollPeriod", 'Float'>
    readonly totalNetPay: FieldRef<"PayrollPeriod", 'Float'>
    readonly currency: FieldRef<"PayrollPeriod", 'String'>
    readonly processingNotes: FieldRef<"PayrollPeriod", 'String'>
    readonly approvedBy: FieldRef<"PayrollPeriod", 'String'>
    readonly approvedDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly closedBy: FieldRef<"PayrollPeriod", 'String'>
    readonly closedDate: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly isRecurring: FieldRef<"PayrollPeriod", 'Boolean'>
    readonly frequency: FieldRef<"PayrollPeriod", 'PayrollFrequency'>
    readonly createdAt: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly updatedAt: FieldRef<"PayrollPeriod", 'DateTime'>
    readonly createdById: FieldRef<"PayrollPeriod", 'String'>
    readonly updatedById: FieldRef<"PayrollPeriod", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PayrollPeriod findUnique
   */
  export type PayrollPeriodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod findUniqueOrThrow
   */
  export type PayrollPeriodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod findFirst
   */
  export type PayrollPeriodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollPeriods.
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollPeriods.
     */
    distinct?: PayrollPeriodScalarFieldEnum | PayrollPeriodScalarFieldEnum[]
  }

  /**
   * PayrollPeriod findFirstOrThrow
   */
  export type PayrollPeriodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriod to fetch.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollPeriods.
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollPeriods.
     */
    distinct?: PayrollPeriodScalarFieldEnum | PayrollPeriodScalarFieldEnum[]
  }

  /**
   * PayrollPeriod findMany
   */
  export type PayrollPeriodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter, which PayrollPeriods to fetch.
     */
    where?: PayrollPeriodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollPeriods to fetch.
     */
    orderBy?: PayrollPeriodOrderByWithRelationInput | PayrollPeriodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollPeriods.
     */
    cursor?: PayrollPeriodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollPeriods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollPeriods.
     */
    skip?: number
    distinct?: PayrollPeriodScalarFieldEnum | PayrollPeriodScalarFieldEnum[]
  }

  /**
   * PayrollPeriod create
   */
  export type PayrollPeriodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * The data needed to create a PayrollPeriod.
     */
    data: XOR<PayrollPeriodCreateInput, PayrollPeriodUncheckedCreateInput>
  }

  /**
   * PayrollPeriod createMany
   */
  export type PayrollPeriodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollPeriods.
     */
    data: PayrollPeriodCreateManyInput | PayrollPeriodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollPeriod createManyAndReturn
   */
  export type PayrollPeriodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PayrollPeriods.
     */
    data: PayrollPeriodCreateManyInput | PayrollPeriodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollPeriod update
   */
  export type PayrollPeriodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * The data needed to update a PayrollPeriod.
     */
    data: XOR<PayrollPeriodUpdateInput, PayrollPeriodUncheckedUpdateInput>
    /**
     * Choose, which PayrollPeriod to update.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod updateMany
   */
  export type PayrollPeriodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollPeriods.
     */
    data: XOR<PayrollPeriodUpdateManyMutationInput, PayrollPeriodUncheckedUpdateManyInput>
    /**
     * Filter which PayrollPeriods to update
     */
    where?: PayrollPeriodWhereInput
  }

  /**
   * PayrollPeriod upsert
   */
  export type PayrollPeriodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * The filter to search for the PayrollPeriod to update in case it exists.
     */
    where: PayrollPeriodWhereUniqueInput
    /**
     * In case the PayrollPeriod found by the `where` argument doesn't exist, create a new PayrollPeriod with this data.
     */
    create: XOR<PayrollPeriodCreateInput, PayrollPeriodUncheckedCreateInput>
    /**
     * In case the PayrollPeriod was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollPeriodUpdateInput, PayrollPeriodUncheckedUpdateInput>
  }

  /**
   * PayrollPeriod delete
   */
  export type PayrollPeriodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
    /**
     * Filter which PayrollPeriod to delete.
     */
    where: PayrollPeriodWhereUniqueInput
  }

  /**
   * PayrollPeriod deleteMany
   */
  export type PayrollPeriodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollPeriods to delete
     */
    where?: PayrollPeriodWhereInput
  }

  /**
   * PayrollPeriod.payslips
   */
  export type PayrollPeriod$payslipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    where?: PaySlipWhereInput
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    cursor?: PaySlipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * PayrollPeriod without action
   */
  export type PayrollPeriodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollPeriod
     */
    select?: PayrollPeriodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayrollPeriodInclude<ExtArgs> | null
  }


  /**
   * Model PaySlip
   */

  export type AggregatePaySlip = {
    _count: PaySlipCountAggregateOutputType | null
    _avg: PaySlipAvgAggregateOutputType | null
    _sum: PaySlipSumAggregateOutputType | null
    _min: PaySlipMinAggregateOutputType | null
    _max: PaySlipMaxAggregateOutputType | null
  }

  export type PaySlipAvgAggregateOutputType = {
    workingDays: number | null
    actualWorkingDays: number | null
    baseSalary: number | null
    hourlyRate: number | null
    hoursWorked: number | null
    overtimeHours: number | null
    overtimeRate: number | null
    overtimePay: number | null
    totalEarnings: number | null
    totalDeductions: number | null
    taxableIncome: number | null
    incomeTax: number | null
    socialSecurityTax: number | null
    medicareTax: number | null
    stateTax: number | null
    localTax: number | null
    totalTaxes: number | null
    grossPay: number | null
    netPay: number | null
  }

  export type PaySlipSumAggregateOutputType = {
    workingDays: number | null
    actualWorkingDays: number | null
    baseSalary: number | null
    hourlyRate: number | null
    hoursWorked: number | null
    overtimeHours: number | null
    overtimeRate: number | null
    overtimePay: number | null
    totalEarnings: number | null
    totalDeductions: number | null
    taxableIncome: number | null
    incomeTax: number | null
    socialSecurityTax: number | null
    medicareTax: number | null
    stateTax: number | null
    localTax: number | null
    totalTaxes: number | null
    grossPay: number | null
    netPay: number | null
  }

  export type PaySlipMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    payrollPeriodId: string | null
    employeeIdNumber: string | null
    fullName: string | null
    designation: string | null
    department: string | null
    bankAccount: string | null
    payPeriodStart: Date | null
    payPeriodEnd: Date | null
    payDate: Date | null
    workingDays: number | null
    actualWorkingDays: number | null
    baseSalary: number | null
    hourlyRate: number | null
    hoursWorked: number | null
    overtimeHours: number | null
    overtimeRate: number | null
    overtimePay: number | null
    totalEarnings: number | null
    totalDeductions: number | null
    taxableIncome: number | null
    incomeTax: number | null
    socialSecurityTax: number | null
    medicareTax: number | null
    stateTax: number | null
    localTax: number | null
    totalTaxes: number | null
    grossPay: number | null
    netPay: number | null
    currency: string | null
    status: $Enums.PayslipStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentReference: string | null
    paymentDate: Date | null
    isVoid: boolean | null
    voidReason: string | null
    voidedBy: string | null
    voidedDate: Date | null
    generatedBy: string | null
    approvedBy: string | null
    approvedDate: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PaySlipMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    payrollPeriodId: string | null
    employeeIdNumber: string | null
    fullName: string | null
    designation: string | null
    department: string | null
    bankAccount: string | null
    payPeriodStart: Date | null
    payPeriodEnd: Date | null
    payDate: Date | null
    workingDays: number | null
    actualWorkingDays: number | null
    baseSalary: number | null
    hourlyRate: number | null
    hoursWorked: number | null
    overtimeHours: number | null
    overtimeRate: number | null
    overtimePay: number | null
    totalEarnings: number | null
    totalDeductions: number | null
    taxableIncome: number | null
    incomeTax: number | null
    socialSecurityTax: number | null
    medicareTax: number | null
    stateTax: number | null
    localTax: number | null
    totalTaxes: number | null
    grossPay: number | null
    netPay: number | null
    currency: string | null
    status: $Enums.PayslipStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentReference: string | null
    paymentDate: Date | null
    isVoid: boolean | null
    voidReason: string | null
    voidedBy: string | null
    voidedDate: Date | null
    generatedBy: string | null
    approvedBy: string | null
    approvedDate: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PaySlipCountAggregateOutputType = {
    id: number
    employeeId: number
    payrollPeriodId: number
    employeeIdNumber: number
    fullName: number
    designation: number
    department: number
    bankAccount: number
    payPeriodStart: number
    payPeriodEnd: number
    payDate: number
    workingDays: number
    actualWorkingDays: number
    baseSalary: number
    hourlyRate: number
    hoursWorked: number
    overtimeHours: number
    overtimeRate: number
    overtimePay: number
    earnings: number
    totalEarnings: number
    deductions: number
    totalDeductions: number
    taxableIncome: number
    incomeTax: number
    socialSecurityTax: number
    medicareTax: number
    stateTax: number
    localTax: number
    totalTaxes: number
    grossPay: number
    netPay: number
    currency: number
    status: number
    paymentMethod: number
    paymentReference: number
    paymentDate: number
    isVoid: number
    voidReason: number
    voidedBy: number
    voidedDate: number
    generatedBy: number
    approvedBy: number
    approvedDate: number
    notes: number
    attachments: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PaySlipAvgAggregateInputType = {
    workingDays?: true
    actualWorkingDays?: true
    baseSalary?: true
    hourlyRate?: true
    hoursWorked?: true
    overtimeHours?: true
    overtimeRate?: true
    overtimePay?: true
    totalEarnings?: true
    totalDeductions?: true
    taxableIncome?: true
    incomeTax?: true
    socialSecurityTax?: true
    medicareTax?: true
    stateTax?: true
    localTax?: true
    totalTaxes?: true
    grossPay?: true
    netPay?: true
  }

  export type PaySlipSumAggregateInputType = {
    workingDays?: true
    actualWorkingDays?: true
    baseSalary?: true
    hourlyRate?: true
    hoursWorked?: true
    overtimeHours?: true
    overtimeRate?: true
    overtimePay?: true
    totalEarnings?: true
    totalDeductions?: true
    taxableIncome?: true
    incomeTax?: true
    socialSecurityTax?: true
    medicareTax?: true
    stateTax?: true
    localTax?: true
    totalTaxes?: true
    grossPay?: true
    netPay?: true
  }

  export type PaySlipMinAggregateInputType = {
    id?: true
    employeeId?: true
    payrollPeriodId?: true
    employeeIdNumber?: true
    fullName?: true
    designation?: true
    department?: true
    bankAccount?: true
    payPeriodStart?: true
    payPeriodEnd?: true
    payDate?: true
    workingDays?: true
    actualWorkingDays?: true
    baseSalary?: true
    hourlyRate?: true
    hoursWorked?: true
    overtimeHours?: true
    overtimeRate?: true
    overtimePay?: true
    totalEarnings?: true
    totalDeductions?: true
    taxableIncome?: true
    incomeTax?: true
    socialSecurityTax?: true
    medicareTax?: true
    stateTax?: true
    localTax?: true
    totalTaxes?: true
    grossPay?: true
    netPay?: true
    currency?: true
    status?: true
    paymentMethod?: true
    paymentReference?: true
    paymentDate?: true
    isVoid?: true
    voidReason?: true
    voidedBy?: true
    voidedDate?: true
    generatedBy?: true
    approvedBy?: true
    approvedDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PaySlipMaxAggregateInputType = {
    id?: true
    employeeId?: true
    payrollPeriodId?: true
    employeeIdNumber?: true
    fullName?: true
    designation?: true
    department?: true
    bankAccount?: true
    payPeriodStart?: true
    payPeriodEnd?: true
    payDate?: true
    workingDays?: true
    actualWorkingDays?: true
    baseSalary?: true
    hourlyRate?: true
    hoursWorked?: true
    overtimeHours?: true
    overtimeRate?: true
    overtimePay?: true
    totalEarnings?: true
    totalDeductions?: true
    taxableIncome?: true
    incomeTax?: true
    socialSecurityTax?: true
    medicareTax?: true
    stateTax?: true
    localTax?: true
    totalTaxes?: true
    grossPay?: true
    netPay?: true
    currency?: true
    status?: true
    paymentMethod?: true
    paymentReference?: true
    paymentDate?: true
    isVoid?: true
    voidReason?: true
    voidedBy?: true
    voidedDate?: true
    generatedBy?: true
    approvedBy?: true
    approvedDate?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PaySlipCountAggregateInputType = {
    id?: true
    employeeId?: true
    payrollPeriodId?: true
    employeeIdNumber?: true
    fullName?: true
    designation?: true
    department?: true
    bankAccount?: true
    payPeriodStart?: true
    payPeriodEnd?: true
    payDate?: true
    workingDays?: true
    actualWorkingDays?: true
    baseSalary?: true
    hourlyRate?: true
    hoursWorked?: true
    overtimeHours?: true
    overtimeRate?: true
    overtimePay?: true
    earnings?: true
    totalEarnings?: true
    deductions?: true
    totalDeductions?: true
    taxableIncome?: true
    incomeTax?: true
    socialSecurityTax?: true
    medicareTax?: true
    stateTax?: true
    localTax?: true
    totalTaxes?: true
    grossPay?: true
    netPay?: true
    currency?: true
    status?: true
    paymentMethod?: true
    paymentReference?: true
    paymentDate?: true
    isVoid?: true
    voidReason?: true
    voidedBy?: true
    voidedDate?: true
    generatedBy?: true
    approvedBy?: true
    approvedDate?: true
    notes?: true
    attachments?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PaySlipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaySlip to aggregate.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaySlips
    **/
    _count?: true | PaySlipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaySlipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaySlipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaySlipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaySlipMaxAggregateInputType
  }

  export type GetPaySlipAggregateType<T extends PaySlipAggregateArgs> = {
        [P in keyof T & keyof AggregatePaySlip]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaySlip[P]>
      : GetScalarType<T[P], AggregatePaySlip[P]>
  }




  export type PaySlipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaySlipWhereInput
    orderBy?: PaySlipOrderByWithAggregationInput | PaySlipOrderByWithAggregationInput[]
    by: PaySlipScalarFieldEnum[] | PaySlipScalarFieldEnum
    having?: PaySlipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaySlipCountAggregateInputType | true
    _avg?: PaySlipAvgAggregateInputType
    _sum?: PaySlipSumAggregateInputType
    _min?: PaySlipMinAggregateInputType
    _max?: PaySlipMaxAggregateInputType
  }

  export type PaySlipGroupByOutputType = {
    id: string
    employeeId: string
    payrollPeriodId: string
    employeeIdNumber: string
    fullName: string
    designation: string
    department: string
    bankAccount: string | null
    payPeriodStart: Date
    payPeriodEnd: Date
    payDate: Date
    workingDays: number
    actualWorkingDays: number
    baseSalary: number
    hourlyRate: number | null
    hoursWorked: number | null
    overtimeHours: number
    overtimeRate: number | null
    overtimePay: number
    earnings: JsonValue
    totalEarnings: number
    deductions: JsonValue
    totalDeductions: number
    taxableIncome: number
    incomeTax: number
    socialSecurityTax: number
    medicareTax: number
    stateTax: number
    localTax: number
    totalTaxes: number
    grossPay: number
    netPay: number
    currency: string
    status: $Enums.PayslipStatus
    paymentMethod: $Enums.PaymentMethod
    paymentReference: string | null
    paymentDate: Date | null
    isVoid: boolean
    voidReason: string | null
    voidedBy: string | null
    voidedDate: Date | null
    generatedBy: string | null
    approvedBy: string | null
    approvedDate: Date | null
    notes: string | null
    attachments: string[]
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: PaySlipCountAggregateOutputType | null
    _avg: PaySlipAvgAggregateOutputType | null
    _sum: PaySlipSumAggregateOutputType | null
    _min: PaySlipMinAggregateOutputType | null
    _max: PaySlipMaxAggregateOutputType | null
  }

  type GetPaySlipGroupByPayload<T extends PaySlipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaySlipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaySlipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaySlipGroupByOutputType[P]>
            : GetScalarType<T[P], PaySlipGroupByOutputType[P]>
        }
      >
    >


  export type PaySlipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollPeriodId?: boolean
    employeeIdNumber?: boolean
    fullName?: boolean
    designation?: boolean
    department?: boolean
    bankAccount?: boolean
    payPeriodStart?: boolean
    payPeriodEnd?: boolean
    payDate?: boolean
    workingDays?: boolean
    actualWorkingDays?: boolean
    baseSalary?: boolean
    hourlyRate?: boolean
    hoursWorked?: boolean
    overtimeHours?: boolean
    overtimeRate?: boolean
    overtimePay?: boolean
    earnings?: boolean
    totalEarnings?: boolean
    deductions?: boolean
    totalDeductions?: boolean
    taxableIncome?: boolean
    incomeTax?: boolean
    socialSecurityTax?: boolean
    medicareTax?: boolean
    stateTax?: boolean
    localTax?: boolean
    totalTaxes?: boolean
    grossPay?: boolean
    netPay?: boolean
    currency?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentReference?: boolean
    paymentDate?: boolean
    isVoid?: boolean
    voidReason?: boolean
    voidedBy?: boolean
    voidedDate?: boolean
    generatedBy?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    notes?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paySlip"]>

  export type PaySlipSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    payrollPeriodId?: boolean
    employeeIdNumber?: boolean
    fullName?: boolean
    designation?: boolean
    department?: boolean
    bankAccount?: boolean
    payPeriodStart?: boolean
    payPeriodEnd?: boolean
    payDate?: boolean
    workingDays?: boolean
    actualWorkingDays?: boolean
    baseSalary?: boolean
    hourlyRate?: boolean
    hoursWorked?: boolean
    overtimeHours?: boolean
    overtimeRate?: boolean
    overtimePay?: boolean
    earnings?: boolean
    totalEarnings?: boolean
    deductions?: boolean
    totalDeductions?: boolean
    taxableIncome?: boolean
    incomeTax?: boolean
    socialSecurityTax?: boolean
    medicareTax?: boolean
    stateTax?: boolean
    localTax?: boolean
    totalTaxes?: boolean
    grossPay?: boolean
    netPay?: boolean
    currency?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentReference?: boolean
    paymentDate?: boolean
    isVoid?: boolean
    voidReason?: boolean
    voidedBy?: boolean
    voidedDate?: boolean
    generatedBy?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    notes?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paySlip"]>

  export type PaySlipSelectScalar = {
    id?: boolean
    employeeId?: boolean
    payrollPeriodId?: boolean
    employeeIdNumber?: boolean
    fullName?: boolean
    designation?: boolean
    department?: boolean
    bankAccount?: boolean
    payPeriodStart?: boolean
    payPeriodEnd?: boolean
    payDate?: boolean
    workingDays?: boolean
    actualWorkingDays?: boolean
    baseSalary?: boolean
    hourlyRate?: boolean
    hoursWorked?: boolean
    overtimeHours?: boolean
    overtimeRate?: boolean
    overtimePay?: boolean
    earnings?: boolean
    totalEarnings?: boolean
    deductions?: boolean
    totalDeductions?: boolean
    taxableIncome?: boolean
    incomeTax?: boolean
    socialSecurityTax?: boolean
    medicareTax?: boolean
    stateTax?: boolean
    localTax?: boolean
    totalTaxes?: boolean
    grossPay?: boolean
    netPay?: boolean
    currency?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentReference?: boolean
    paymentDate?: boolean
    isVoid?: boolean
    voidReason?: boolean
    voidedBy?: boolean
    voidedDate?: boolean
    generatedBy?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    notes?: boolean
    attachments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PaySlipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
  }
  export type PaySlipIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payrollPeriod?: boolean | PayrollPeriodDefaultArgs<ExtArgs>
  }

  export type $PaySlipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaySlip"
    objects: {
      payrollPeriod: Prisma.$PayrollPeriodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      payrollPeriodId: string
      employeeIdNumber: string
      fullName: string
      designation: string
      department: string
      bankAccount: string | null
      payPeriodStart: Date
      payPeriodEnd: Date
      payDate: Date
      workingDays: number
      actualWorkingDays: number
      baseSalary: number
      hourlyRate: number | null
      hoursWorked: number | null
      overtimeHours: number
      overtimeRate: number | null
      overtimePay: number
      earnings: Prisma.JsonValue
      totalEarnings: number
      deductions: Prisma.JsonValue
      totalDeductions: number
      taxableIncome: number
      incomeTax: number
      socialSecurityTax: number
      medicareTax: number
      stateTax: number
      localTax: number
      totalTaxes: number
      grossPay: number
      netPay: number
      currency: string
      status: $Enums.PayslipStatus
      paymentMethod: $Enums.PaymentMethod
      paymentReference: string | null
      paymentDate: Date | null
      isVoid: boolean
      voidReason: string | null
      voidedBy: string | null
      voidedDate: Date | null
      generatedBy: string | null
      approvedBy: string | null
      approvedDate: Date | null
      notes: string | null
      attachments: string[]
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["paySlip"]>
    composites: {}
  }

  type PaySlipGetPayload<S extends boolean | null | undefined | PaySlipDefaultArgs> = $Result.GetResult<Prisma.$PaySlipPayload, S>

  type PaySlipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaySlipFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaySlipCountAggregateInputType | true
    }

  export interface PaySlipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaySlip'], meta: { name: 'PaySlip' } }
    /**
     * Find zero or one PaySlip that matches the filter.
     * @param {PaySlipFindUniqueArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaySlipFindUniqueArgs>(args: SelectSubset<T, PaySlipFindUniqueArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaySlip that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaySlipFindUniqueOrThrowArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaySlipFindUniqueOrThrowArgs>(args: SelectSubset<T, PaySlipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaySlip that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipFindFirstArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaySlipFindFirstArgs>(args?: SelectSubset<T, PaySlipFindFirstArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaySlip that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipFindFirstOrThrowArgs} args - Arguments to find a PaySlip
     * @example
     * // Get one PaySlip
     * const paySlip = await prisma.paySlip.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaySlipFindFirstOrThrowArgs>(args?: SelectSubset<T, PaySlipFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaySlips that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaySlips
     * const paySlips = await prisma.paySlip.findMany()
     * 
     * // Get first 10 PaySlips
     * const paySlips = await prisma.paySlip.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paySlipWithIdOnly = await prisma.paySlip.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaySlipFindManyArgs>(args?: SelectSubset<T, PaySlipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaySlip.
     * @param {PaySlipCreateArgs} args - Arguments to create a PaySlip.
     * @example
     * // Create one PaySlip
     * const PaySlip = await prisma.paySlip.create({
     *   data: {
     *     // ... data to create a PaySlip
     *   }
     * })
     * 
     */
    create<T extends PaySlipCreateArgs>(args: SelectSubset<T, PaySlipCreateArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaySlips.
     * @param {PaySlipCreateManyArgs} args - Arguments to create many PaySlips.
     * @example
     * // Create many PaySlips
     * const paySlip = await prisma.paySlip.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaySlipCreateManyArgs>(args?: SelectSubset<T, PaySlipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaySlips and returns the data saved in the database.
     * @param {PaySlipCreateManyAndReturnArgs} args - Arguments to create many PaySlips.
     * @example
     * // Create many PaySlips
     * const paySlip = await prisma.paySlip.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaySlips and only return the `id`
     * const paySlipWithIdOnly = await prisma.paySlip.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaySlipCreateManyAndReturnArgs>(args?: SelectSubset<T, PaySlipCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaySlip.
     * @param {PaySlipDeleteArgs} args - Arguments to delete one PaySlip.
     * @example
     * // Delete one PaySlip
     * const PaySlip = await prisma.paySlip.delete({
     *   where: {
     *     // ... filter to delete one PaySlip
     *   }
     * })
     * 
     */
    delete<T extends PaySlipDeleteArgs>(args: SelectSubset<T, PaySlipDeleteArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaySlip.
     * @param {PaySlipUpdateArgs} args - Arguments to update one PaySlip.
     * @example
     * // Update one PaySlip
     * const paySlip = await prisma.paySlip.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaySlipUpdateArgs>(args: SelectSubset<T, PaySlipUpdateArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaySlips.
     * @param {PaySlipDeleteManyArgs} args - Arguments to filter PaySlips to delete.
     * @example
     * // Delete a few PaySlips
     * const { count } = await prisma.paySlip.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaySlipDeleteManyArgs>(args?: SelectSubset<T, PaySlipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaySlips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaySlips
     * const paySlip = await prisma.paySlip.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaySlipUpdateManyArgs>(args: SelectSubset<T, PaySlipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaySlip.
     * @param {PaySlipUpsertArgs} args - Arguments to update or create a PaySlip.
     * @example
     * // Update or create a PaySlip
     * const paySlip = await prisma.paySlip.upsert({
     *   create: {
     *     // ... data to create a PaySlip
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaySlip we want to update
     *   }
     * })
     */
    upsert<T extends PaySlipUpsertArgs>(args: SelectSubset<T, PaySlipUpsertArgs<ExtArgs>>): Prisma__PaySlipClient<$Result.GetResult<Prisma.$PaySlipPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaySlips.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipCountArgs} args - Arguments to filter PaySlips to count.
     * @example
     * // Count the number of PaySlips
     * const count = await prisma.paySlip.count({
     *   where: {
     *     // ... the filter for the PaySlips we want to count
     *   }
     * })
    **/
    count<T extends PaySlipCountArgs>(
      args?: Subset<T, PaySlipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaySlipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaySlip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaySlipAggregateArgs>(args: Subset<T, PaySlipAggregateArgs>): Prisma.PrismaPromise<GetPaySlipAggregateType<T>>

    /**
     * Group by PaySlip.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaySlipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaySlipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaySlipGroupByArgs['orderBy'] }
        : { orderBy?: PaySlipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaySlipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaySlipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaySlip model
   */
  readonly fields: PaySlipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaySlip.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaySlipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payrollPeriod<T extends PayrollPeriodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayrollPeriodDefaultArgs<ExtArgs>>): Prisma__PayrollPeriodClient<$Result.GetResult<Prisma.$PayrollPeriodPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaySlip model
   */ 
  interface PaySlipFieldRefs {
    readonly id: FieldRef<"PaySlip", 'String'>
    readonly employeeId: FieldRef<"PaySlip", 'String'>
    readonly payrollPeriodId: FieldRef<"PaySlip", 'String'>
    readonly employeeIdNumber: FieldRef<"PaySlip", 'String'>
    readonly fullName: FieldRef<"PaySlip", 'String'>
    readonly designation: FieldRef<"PaySlip", 'String'>
    readonly department: FieldRef<"PaySlip", 'String'>
    readonly bankAccount: FieldRef<"PaySlip", 'String'>
    readonly payPeriodStart: FieldRef<"PaySlip", 'DateTime'>
    readonly payPeriodEnd: FieldRef<"PaySlip", 'DateTime'>
    readonly payDate: FieldRef<"PaySlip", 'DateTime'>
    readonly workingDays: FieldRef<"PaySlip", 'Int'>
    readonly actualWorkingDays: FieldRef<"PaySlip", 'Float'>
    readonly baseSalary: FieldRef<"PaySlip", 'Float'>
    readonly hourlyRate: FieldRef<"PaySlip", 'Float'>
    readonly hoursWorked: FieldRef<"PaySlip", 'Float'>
    readonly overtimeHours: FieldRef<"PaySlip", 'Float'>
    readonly overtimeRate: FieldRef<"PaySlip", 'Float'>
    readonly overtimePay: FieldRef<"PaySlip", 'Float'>
    readonly earnings: FieldRef<"PaySlip", 'Json'>
    readonly totalEarnings: FieldRef<"PaySlip", 'Float'>
    readonly deductions: FieldRef<"PaySlip", 'Json'>
    readonly totalDeductions: FieldRef<"PaySlip", 'Float'>
    readonly taxableIncome: FieldRef<"PaySlip", 'Float'>
    readonly incomeTax: FieldRef<"PaySlip", 'Float'>
    readonly socialSecurityTax: FieldRef<"PaySlip", 'Float'>
    readonly medicareTax: FieldRef<"PaySlip", 'Float'>
    readonly stateTax: FieldRef<"PaySlip", 'Float'>
    readonly localTax: FieldRef<"PaySlip", 'Float'>
    readonly totalTaxes: FieldRef<"PaySlip", 'Float'>
    readonly grossPay: FieldRef<"PaySlip", 'Float'>
    readonly netPay: FieldRef<"PaySlip", 'Float'>
    readonly currency: FieldRef<"PaySlip", 'String'>
    readonly status: FieldRef<"PaySlip", 'PayslipStatus'>
    readonly paymentMethod: FieldRef<"PaySlip", 'PaymentMethod'>
    readonly paymentReference: FieldRef<"PaySlip", 'String'>
    readonly paymentDate: FieldRef<"PaySlip", 'DateTime'>
    readonly isVoid: FieldRef<"PaySlip", 'Boolean'>
    readonly voidReason: FieldRef<"PaySlip", 'String'>
    readonly voidedBy: FieldRef<"PaySlip", 'String'>
    readonly voidedDate: FieldRef<"PaySlip", 'DateTime'>
    readonly generatedBy: FieldRef<"PaySlip", 'String'>
    readonly approvedBy: FieldRef<"PaySlip", 'String'>
    readonly approvedDate: FieldRef<"PaySlip", 'DateTime'>
    readonly notes: FieldRef<"PaySlip", 'String'>
    readonly attachments: FieldRef<"PaySlip", 'String[]'>
    readonly createdAt: FieldRef<"PaySlip", 'DateTime'>
    readonly updatedAt: FieldRef<"PaySlip", 'DateTime'>
    readonly createdById: FieldRef<"PaySlip", 'String'>
    readonly updatedById: FieldRef<"PaySlip", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PaySlip findUnique
   */
  export type PaySlipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip findUniqueOrThrow
   */
  export type PaySlipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip findFirst
   */
  export type PaySlipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaySlips.
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaySlips.
     */
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * PaySlip findFirstOrThrow
   */
  export type PaySlipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlip to fetch.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaySlips.
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaySlips.
     */
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * PaySlip findMany
   */
  export type PaySlipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter, which PaySlips to fetch.
     */
    where?: PaySlipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaySlips to fetch.
     */
    orderBy?: PaySlipOrderByWithRelationInput | PaySlipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaySlips.
     */
    cursor?: PaySlipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaySlips from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaySlips.
     */
    skip?: number
    distinct?: PaySlipScalarFieldEnum | PaySlipScalarFieldEnum[]
  }

  /**
   * PaySlip create
   */
  export type PaySlipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * The data needed to create a PaySlip.
     */
    data: XOR<PaySlipCreateInput, PaySlipUncheckedCreateInput>
  }

  /**
   * PaySlip createMany
   */
  export type PaySlipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaySlips.
     */
    data: PaySlipCreateManyInput | PaySlipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaySlip createManyAndReturn
   */
  export type PaySlipCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaySlips.
     */
    data: PaySlipCreateManyInput | PaySlipCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaySlip update
   */
  export type PaySlipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * The data needed to update a PaySlip.
     */
    data: XOR<PaySlipUpdateInput, PaySlipUncheckedUpdateInput>
    /**
     * Choose, which PaySlip to update.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip updateMany
   */
  export type PaySlipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaySlips.
     */
    data: XOR<PaySlipUpdateManyMutationInput, PaySlipUncheckedUpdateManyInput>
    /**
     * Filter which PaySlips to update
     */
    where?: PaySlipWhereInput
  }

  /**
   * PaySlip upsert
   */
  export type PaySlipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * The filter to search for the PaySlip to update in case it exists.
     */
    where: PaySlipWhereUniqueInput
    /**
     * In case the PaySlip found by the `where` argument doesn't exist, create a new PaySlip with this data.
     */
    create: XOR<PaySlipCreateInput, PaySlipUncheckedCreateInput>
    /**
     * In case the PaySlip was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaySlipUpdateInput, PaySlipUncheckedUpdateInput>
  }

  /**
   * PaySlip delete
   */
  export type PaySlipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
    /**
     * Filter which PaySlip to delete.
     */
    where: PaySlipWhereUniqueInput
  }

  /**
   * PaySlip deleteMany
   */
  export type PaySlipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaySlips to delete
     */
    where?: PaySlipWhereInput
  }

  /**
   * PaySlip without action
   */
  export type PaySlipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaySlip
     */
    select?: PaySlipSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaySlipInclude<ExtArgs> | null
  }


  /**
   * Model SalaryHistory
   */

  export type AggregateSalaryHistory = {
    _count: SalaryHistoryCountAggregateOutputType | null
    _avg: SalaryHistoryAvgAggregateOutputType | null
    _sum: SalaryHistorySumAggregateOutputType | null
    _min: SalaryHistoryMinAggregateOutputType | null
    _max: SalaryHistoryMaxAggregateOutputType | null
  }

  export type SalaryHistoryAvgAggregateOutputType = {
    baseSalary: number | null
    previousSalary: number | null
    salaryIncrease: number | null
    percentageIncrease: number | null
  }

  export type SalaryHistorySumAggregateOutputType = {
    baseSalary: number | null
    previousSalary: number | null
    salaryIncrease: number | null
    percentageIncrease: number | null
  }

  export type SalaryHistoryMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    effectiveDate: Date | null
    endDate: Date | null
    baseSalary: number | null
    currency: string | null
    salaryGrade: string | null
    payFrequency: $Enums.PayrollFrequency | null
    changeReason: string | null
    changeType: $Enums.SalaryChangeType | null
    previousSalary: number | null
    salaryIncrease: number | null
    percentageIncrease: number | null
    approvedBy: string | null
    approvedDate: Date | null
    status: $Enums.SalaryStatus | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type SalaryHistoryMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    effectiveDate: Date | null
    endDate: Date | null
    baseSalary: number | null
    currency: string | null
    salaryGrade: string | null
    payFrequency: $Enums.PayrollFrequency | null
    changeReason: string | null
    changeType: $Enums.SalaryChangeType | null
    previousSalary: number | null
    salaryIncrease: number | null
    percentageIncrease: number | null
    approvedBy: string | null
    approvedDate: Date | null
    status: $Enums.SalaryStatus | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type SalaryHistoryCountAggregateOutputType = {
    id: number
    employeeId: number
    effectiveDate: number
    endDate: number
    baseSalary: number
    currency: number
    salaryGrade: number
    payFrequency: number
    allowances: number
    benefits: number
    changeReason: number
    changeType: number
    previousSalary: number
    salaryIncrease: number
    percentageIncrease: number
    approvedBy: number
    approvedDate: number
    status: number
    comments: number
    supportingDocs: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type SalaryHistoryAvgAggregateInputType = {
    baseSalary?: true
    previousSalary?: true
    salaryIncrease?: true
    percentageIncrease?: true
  }

  export type SalaryHistorySumAggregateInputType = {
    baseSalary?: true
    previousSalary?: true
    salaryIncrease?: true
    percentageIncrease?: true
  }

  export type SalaryHistoryMinAggregateInputType = {
    id?: true
    employeeId?: true
    effectiveDate?: true
    endDate?: true
    baseSalary?: true
    currency?: true
    salaryGrade?: true
    payFrequency?: true
    changeReason?: true
    changeType?: true
    previousSalary?: true
    salaryIncrease?: true
    percentageIncrease?: true
    approvedBy?: true
    approvedDate?: true
    status?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type SalaryHistoryMaxAggregateInputType = {
    id?: true
    employeeId?: true
    effectiveDate?: true
    endDate?: true
    baseSalary?: true
    currency?: true
    salaryGrade?: true
    payFrequency?: true
    changeReason?: true
    changeType?: true
    previousSalary?: true
    salaryIncrease?: true
    percentageIncrease?: true
    approvedBy?: true
    approvedDate?: true
    status?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type SalaryHistoryCountAggregateInputType = {
    id?: true
    employeeId?: true
    effectiveDate?: true
    endDate?: true
    baseSalary?: true
    currency?: true
    salaryGrade?: true
    payFrequency?: true
    allowances?: true
    benefits?: true
    changeReason?: true
    changeType?: true
    previousSalary?: true
    salaryIncrease?: true
    percentageIncrease?: true
    approvedBy?: true
    approvedDate?: true
    status?: true
    comments?: true
    supportingDocs?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type SalaryHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryHistory to aggregate.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalaryHistories
    **/
    _count?: true | SalaryHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaryHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaryHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaryHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaryHistoryMaxAggregateInputType
  }

  export type GetSalaryHistoryAggregateType<T extends SalaryHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSalaryHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalaryHistory[P]>
      : GetScalarType<T[P], AggregateSalaryHistory[P]>
  }




  export type SalaryHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalaryHistoryWhereInput
    orderBy?: SalaryHistoryOrderByWithAggregationInput | SalaryHistoryOrderByWithAggregationInput[]
    by: SalaryHistoryScalarFieldEnum[] | SalaryHistoryScalarFieldEnum
    having?: SalaryHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaryHistoryCountAggregateInputType | true
    _avg?: SalaryHistoryAvgAggregateInputType
    _sum?: SalaryHistorySumAggregateInputType
    _min?: SalaryHistoryMinAggregateInputType
    _max?: SalaryHistoryMaxAggregateInputType
  }

  export type SalaryHistoryGroupByOutputType = {
    id: string
    employeeId: string
    effectiveDate: Date
    endDate: Date | null
    baseSalary: number
    currency: string
    salaryGrade: string | null
    payFrequency: $Enums.PayrollFrequency
    allowances: JsonValue | null
    benefits: JsonValue | null
    changeReason: string
    changeType: $Enums.SalaryChangeType
    previousSalary: number | null
    salaryIncrease: number | null
    percentageIncrease: number | null
    approvedBy: string | null
    approvedDate: Date | null
    status: $Enums.SalaryStatus
    comments: string | null
    supportingDocs: string[]
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: SalaryHistoryCountAggregateOutputType | null
    _avg: SalaryHistoryAvgAggregateOutputType | null
    _sum: SalaryHistorySumAggregateOutputType | null
    _min: SalaryHistoryMinAggregateOutputType | null
    _max: SalaryHistoryMaxAggregateOutputType | null
  }

  type GetSalaryHistoryGroupByPayload<T extends SalaryHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalaryHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaryHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaryHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], SalaryHistoryGroupByOutputType[P]>
        }
      >
    >


  export type SalaryHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    effectiveDate?: boolean
    endDate?: boolean
    baseSalary?: boolean
    currency?: boolean
    salaryGrade?: boolean
    payFrequency?: boolean
    allowances?: boolean
    benefits?: boolean
    changeReason?: boolean
    changeType?: boolean
    previousSalary?: boolean
    salaryIncrease?: boolean
    percentageIncrease?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    status?: boolean
    comments?: boolean
    supportingDocs?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["salaryHistory"]>

  export type SalaryHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    effectiveDate?: boolean
    endDate?: boolean
    baseSalary?: boolean
    currency?: boolean
    salaryGrade?: boolean
    payFrequency?: boolean
    allowances?: boolean
    benefits?: boolean
    changeReason?: boolean
    changeType?: boolean
    previousSalary?: boolean
    salaryIncrease?: boolean
    percentageIncrease?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    status?: boolean
    comments?: boolean
    supportingDocs?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["salaryHistory"]>

  export type SalaryHistorySelectScalar = {
    id?: boolean
    employeeId?: boolean
    effectiveDate?: boolean
    endDate?: boolean
    baseSalary?: boolean
    currency?: boolean
    salaryGrade?: boolean
    payFrequency?: boolean
    allowances?: boolean
    benefits?: boolean
    changeReason?: boolean
    changeType?: boolean
    previousSalary?: boolean
    salaryIncrease?: boolean
    percentageIncrease?: boolean
    approvedBy?: boolean
    approvedDate?: boolean
    status?: boolean
    comments?: boolean
    supportingDocs?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }


  export type $SalaryHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SalaryHistory"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      effectiveDate: Date
      endDate: Date | null
      baseSalary: number
      currency: string
      salaryGrade: string | null
      payFrequency: $Enums.PayrollFrequency
      allowances: Prisma.JsonValue | null
      benefits: Prisma.JsonValue | null
      changeReason: string
      changeType: $Enums.SalaryChangeType
      previousSalary: number | null
      salaryIncrease: number | null
      percentageIncrease: number | null
      approvedBy: string | null
      approvedDate: Date | null
      status: $Enums.SalaryStatus
      comments: string | null
      supportingDocs: string[]
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["salaryHistory"]>
    composites: {}
  }

  type SalaryHistoryGetPayload<S extends boolean | null | undefined | SalaryHistoryDefaultArgs> = $Result.GetResult<Prisma.$SalaryHistoryPayload, S>

  type SalaryHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SalaryHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SalaryHistoryCountAggregateInputType | true
    }

  export interface SalaryHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalaryHistory'], meta: { name: 'SalaryHistory' } }
    /**
     * Find zero or one SalaryHistory that matches the filter.
     * @param {SalaryHistoryFindUniqueArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalaryHistoryFindUniqueArgs>(args: SelectSubset<T, SalaryHistoryFindUniqueArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SalaryHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SalaryHistoryFindUniqueOrThrowArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalaryHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SalaryHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SalaryHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryFindFirstArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalaryHistoryFindFirstArgs>(args?: SelectSubset<T, SalaryHistoryFindFirstArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SalaryHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryFindFirstOrThrowArgs} args - Arguments to find a SalaryHistory
     * @example
     * // Get one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalaryHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SalaryHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SalaryHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalaryHistories
     * const salaryHistories = await prisma.salaryHistory.findMany()
     * 
     * // Get first 10 SalaryHistories
     * const salaryHistories = await prisma.salaryHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salaryHistoryWithIdOnly = await prisma.salaryHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalaryHistoryFindManyArgs>(args?: SelectSubset<T, SalaryHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SalaryHistory.
     * @param {SalaryHistoryCreateArgs} args - Arguments to create a SalaryHistory.
     * @example
     * // Create one SalaryHistory
     * const SalaryHistory = await prisma.salaryHistory.create({
     *   data: {
     *     // ... data to create a SalaryHistory
     *   }
     * })
     * 
     */
    create<T extends SalaryHistoryCreateArgs>(args: SelectSubset<T, SalaryHistoryCreateArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SalaryHistories.
     * @param {SalaryHistoryCreateManyArgs} args - Arguments to create many SalaryHistories.
     * @example
     * // Create many SalaryHistories
     * const salaryHistory = await prisma.salaryHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalaryHistoryCreateManyArgs>(args?: SelectSubset<T, SalaryHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SalaryHistories and returns the data saved in the database.
     * @param {SalaryHistoryCreateManyAndReturnArgs} args - Arguments to create many SalaryHistories.
     * @example
     * // Create many SalaryHistories
     * const salaryHistory = await prisma.salaryHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SalaryHistories and only return the `id`
     * const salaryHistoryWithIdOnly = await prisma.salaryHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SalaryHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, SalaryHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SalaryHistory.
     * @param {SalaryHistoryDeleteArgs} args - Arguments to delete one SalaryHistory.
     * @example
     * // Delete one SalaryHistory
     * const SalaryHistory = await prisma.salaryHistory.delete({
     *   where: {
     *     // ... filter to delete one SalaryHistory
     *   }
     * })
     * 
     */
    delete<T extends SalaryHistoryDeleteArgs>(args: SelectSubset<T, SalaryHistoryDeleteArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SalaryHistory.
     * @param {SalaryHistoryUpdateArgs} args - Arguments to update one SalaryHistory.
     * @example
     * // Update one SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalaryHistoryUpdateArgs>(args: SelectSubset<T, SalaryHistoryUpdateArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SalaryHistories.
     * @param {SalaryHistoryDeleteManyArgs} args - Arguments to filter SalaryHistories to delete.
     * @example
     * // Delete a few SalaryHistories
     * const { count } = await prisma.salaryHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalaryHistoryDeleteManyArgs>(args?: SelectSubset<T, SalaryHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalaryHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalaryHistories
     * const salaryHistory = await prisma.salaryHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalaryHistoryUpdateManyArgs>(args: SelectSubset<T, SalaryHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SalaryHistory.
     * @param {SalaryHistoryUpsertArgs} args - Arguments to update or create a SalaryHistory.
     * @example
     * // Update or create a SalaryHistory
     * const salaryHistory = await prisma.salaryHistory.upsert({
     *   create: {
     *     // ... data to create a SalaryHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalaryHistory we want to update
     *   }
     * })
     */
    upsert<T extends SalaryHistoryUpsertArgs>(args: SelectSubset<T, SalaryHistoryUpsertArgs<ExtArgs>>): Prisma__SalaryHistoryClient<$Result.GetResult<Prisma.$SalaryHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SalaryHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryCountArgs} args - Arguments to filter SalaryHistories to count.
     * @example
     * // Count the number of SalaryHistories
     * const count = await prisma.salaryHistory.count({
     *   where: {
     *     // ... the filter for the SalaryHistories we want to count
     *   }
     * })
    **/
    count<T extends SalaryHistoryCountArgs>(
      args?: Subset<T, SalaryHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaryHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalaryHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaryHistoryAggregateArgs>(args: Subset<T, SalaryHistoryAggregateArgs>): Prisma.PrismaPromise<GetSalaryHistoryAggregateType<T>>

    /**
     * Group by SalaryHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaryHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaryHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaryHistoryGroupByArgs['orderBy'] }
        : { orderBy?: SalaryHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaryHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaryHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SalaryHistory model
   */
  readonly fields: SalaryHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SalaryHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalaryHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SalaryHistory model
   */ 
  interface SalaryHistoryFieldRefs {
    readonly id: FieldRef<"SalaryHistory", 'String'>
    readonly employeeId: FieldRef<"SalaryHistory", 'String'>
    readonly effectiveDate: FieldRef<"SalaryHistory", 'DateTime'>
    readonly endDate: FieldRef<"SalaryHistory", 'DateTime'>
    readonly baseSalary: FieldRef<"SalaryHistory", 'Float'>
    readonly currency: FieldRef<"SalaryHistory", 'String'>
    readonly salaryGrade: FieldRef<"SalaryHistory", 'String'>
    readonly payFrequency: FieldRef<"SalaryHistory", 'PayrollFrequency'>
    readonly allowances: FieldRef<"SalaryHistory", 'Json'>
    readonly benefits: FieldRef<"SalaryHistory", 'Json'>
    readonly changeReason: FieldRef<"SalaryHistory", 'String'>
    readonly changeType: FieldRef<"SalaryHistory", 'SalaryChangeType'>
    readonly previousSalary: FieldRef<"SalaryHistory", 'Float'>
    readonly salaryIncrease: FieldRef<"SalaryHistory", 'Float'>
    readonly percentageIncrease: FieldRef<"SalaryHistory", 'Float'>
    readonly approvedBy: FieldRef<"SalaryHistory", 'String'>
    readonly approvedDate: FieldRef<"SalaryHistory", 'DateTime'>
    readonly status: FieldRef<"SalaryHistory", 'SalaryStatus'>
    readonly comments: FieldRef<"SalaryHistory", 'String'>
    readonly supportingDocs: FieldRef<"SalaryHistory", 'String[]'>
    readonly createdAt: FieldRef<"SalaryHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"SalaryHistory", 'DateTime'>
    readonly createdById: FieldRef<"SalaryHistory", 'String'>
    readonly updatedById: FieldRef<"SalaryHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SalaryHistory findUnique
   */
  export type SalaryHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory findUniqueOrThrow
   */
  export type SalaryHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory findFirst
   */
  export type SalaryHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryHistories.
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryHistories.
     */
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * SalaryHistory findFirstOrThrow
   */
  export type SalaryHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Filter, which SalaryHistory to fetch.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalaryHistories.
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalaryHistories.
     */
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * SalaryHistory findMany
   */
  export type SalaryHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Filter, which SalaryHistories to fetch.
     */
    where?: SalaryHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalaryHistories to fetch.
     */
    orderBy?: SalaryHistoryOrderByWithRelationInput | SalaryHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalaryHistories.
     */
    cursor?: SalaryHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalaryHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalaryHistories.
     */
    skip?: number
    distinct?: SalaryHistoryScalarFieldEnum | SalaryHistoryScalarFieldEnum[]
  }

  /**
   * SalaryHistory create
   */
  export type SalaryHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * The data needed to create a SalaryHistory.
     */
    data: XOR<SalaryHistoryCreateInput, SalaryHistoryUncheckedCreateInput>
  }

  /**
   * SalaryHistory createMany
   */
  export type SalaryHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalaryHistories.
     */
    data: SalaryHistoryCreateManyInput | SalaryHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SalaryHistory createManyAndReturn
   */
  export type SalaryHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SalaryHistories.
     */
    data: SalaryHistoryCreateManyInput | SalaryHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SalaryHistory update
   */
  export type SalaryHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * The data needed to update a SalaryHistory.
     */
    data: XOR<SalaryHistoryUpdateInput, SalaryHistoryUncheckedUpdateInput>
    /**
     * Choose, which SalaryHistory to update.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory updateMany
   */
  export type SalaryHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalaryHistories.
     */
    data: XOR<SalaryHistoryUpdateManyMutationInput, SalaryHistoryUncheckedUpdateManyInput>
    /**
     * Filter which SalaryHistories to update
     */
    where?: SalaryHistoryWhereInput
  }

  /**
   * SalaryHistory upsert
   */
  export type SalaryHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * The filter to search for the SalaryHistory to update in case it exists.
     */
    where: SalaryHistoryWhereUniqueInput
    /**
     * In case the SalaryHistory found by the `where` argument doesn't exist, create a new SalaryHistory with this data.
     */
    create: XOR<SalaryHistoryCreateInput, SalaryHistoryUncheckedCreateInput>
    /**
     * In case the SalaryHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalaryHistoryUpdateInput, SalaryHistoryUncheckedUpdateInput>
  }

  /**
   * SalaryHistory delete
   */
  export type SalaryHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
    /**
     * Filter which SalaryHistory to delete.
     */
    where: SalaryHistoryWhereUniqueInput
  }

  /**
   * SalaryHistory deleteMany
   */
  export type SalaryHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalaryHistories to delete
     */
    where?: SalaryHistoryWhereInput
  }

  /**
   * SalaryHistory without action
   */
  export type SalaryHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalaryHistory
     */
    select?: SalaryHistorySelect<ExtArgs> | null
  }


  /**
   * Model PayrollStats
   */

  export type AggregatePayrollStats = {
    _count: PayrollStatsCountAggregateOutputType | null
    _avg: PayrollStatsAvgAggregateOutputType | null
    _sum: PayrollStatsSumAggregateOutputType | null
    _min: PayrollStatsMinAggregateOutputType | null
    _max: PayrollStatsMaxAggregateOutputType | null
  }

  export type PayrollStatsAvgAggregateOutputType = {
    year: number | null
    month: number | null
    quarter: number | null
    totalEmployees: number | null
    activeEmployees: number | null
    newHires: number | null
    terminations: number | null
    totalGrossPay: number | null
    totalNetPay: number | null
    totalDeductions: number | null
    totalTaxes: number | null
    totalBenefits: number | null
    averageSalary: number | null
    medianSalary: number | null
    payrollPeriods: number | null
    processingTime: number | null
  }

  export type PayrollStatsSumAggregateOutputType = {
    year: number | null
    month: number | null
    quarter: number | null
    totalEmployees: number | null
    activeEmployees: number | null
    newHires: number | null
    terminations: number | null
    totalGrossPay: number | null
    totalNetPay: number | null
    totalDeductions: number | null
    totalTaxes: number | null
    totalBenefits: number | null
    averageSalary: number | null
    medianSalary: number | null
    payrollPeriods: number | null
    processingTime: number | null
  }

  export type PayrollStatsMinAggregateOutputType = {
    id: string | null
    period: string | null
    periodType: $Enums.PeriodType | null
    year: number | null
    month: number | null
    quarter: number | null
    totalEmployees: number | null
    activeEmployees: number | null
    newHires: number | null
    terminations: number | null
    totalGrossPay: number | null
    totalNetPay: number | null
    totalDeductions: number | null
    totalTaxes: number | null
    totalBenefits: number | null
    averageSalary: number | null
    medianSalary: number | null
    currency: string | null
    payrollPeriods: number | null
    processingTime: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PayrollStatsMaxAggregateOutputType = {
    id: string | null
    period: string | null
    periodType: $Enums.PeriodType | null
    year: number | null
    month: number | null
    quarter: number | null
    totalEmployees: number | null
    activeEmployees: number | null
    newHires: number | null
    terminations: number | null
    totalGrossPay: number | null
    totalNetPay: number | null
    totalDeductions: number | null
    totalTaxes: number | null
    totalBenefits: number | null
    averageSalary: number | null
    medianSalary: number | null
    currency: string | null
    payrollPeriods: number | null
    processingTime: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PayrollStatsCountAggregateOutputType = {
    id: number
    period: number
    periodType: number
    year: number
    month: number
    quarter: number
    totalEmployees: number
    activeEmployees: number
    newHires: number
    terminations: number
    totalGrossPay: number
    totalNetPay: number
    totalDeductions: number
    totalTaxes: number
    totalBenefits: number
    averageSalary: number
    medianSalary: number
    currency: number
    departmentBreakdown: number
    payrollPeriods: number
    processingTime: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PayrollStatsAvgAggregateInputType = {
    year?: true
    month?: true
    quarter?: true
    totalEmployees?: true
    activeEmployees?: true
    newHires?: true
    terminations?: true
    totalGrossPay?: true
    totalNetPay?: true
    totalDeductions?: true
    totalTaxes?: true
    totalBenefits?: true
    averageSalary?: true
    medianSalary?: true
    payrollPeriods?: true
    processingTime?: true
  }

  export type PayrollStatsSumAggregateInputType = {
    year?: true
    month?: true
    quarter?: true
    totalEmployees?: true
    activeEmployees?: true
    newHires?: true
    terminations?: true
    totalGrossPay?: true
    totalNetPay?: true
    totalDeductions?: true
    totalTaxes?: true
    totalBenefits?: true
    averageSalary?: true
    medianSalary?: true
    payrollPeriods?: true
    processingTime?: true
  }

  export type PayrollStatsMinAggregateInputType = {
    id?: true
    period?: true
    periodType?: true
    year?: true
    month?: true
    quarter?: true
    totalEmployees?: true
    activeEmployees?: true
    newHires?: true
    terminations?: true
    totalGrossPay?: true
    totalNetPay?: true
    totalDeductions?: true
    totalTaxes?: true
    totalBenefits?: true
    averageSalary?: true
    medianSalary?: true
    currency?: true
    payrollPeriods?: true
    processingTime?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PayrollStatsMaxAggregateInputType = {
    id?: true
    period?: true
    periodType?: true
    year?: true
    month?: true
    quarter?: true
    totalEmployees?: true
    activeEmployees?: true
    newHires?: true
    terminations?: true
    totalGrossPay?: true
    totalNetPay?: true
    totalDeductions?: true
    totalTaxes?: true
    totalBenefits?: true
    averageSalary?: true
    medianSalary?: true
    currency?: true
    payrollPeriods?: true
    processingTime?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PayrollStatsCountAggregateInputType = {
    id?: true
    period?: true
    periodType?: true
    year?: true
    month?: true
    quarter?: true
    totalEmployees?: true
    activeEmployees?: true
    newHires?: true
    terminations?: true
    totalGrossPay?: true
    totalNetPay?: true
    totalDeductions?: true
    totalTaxes?: true
    totalBenefits?: true
    averageSalary?: true
    medianSalary?: true
    currency?: true
    departmentBreakdown?: true
    payrollPeriods?: true
    processingTime?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PayrollStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollStats to aggregate.
     */
    where?: PayrollStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollStats to fetch.
     */
    orderBy?: PayrollStatsOrderByWithRelationInput | PayrollStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollStats
    **/
    _count?: true | PayrollStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollStatsMaxAggregateInputType
  }

  export type GetPayrollStatsAggregateType<T extends PayrollStatsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollStats[P]>
      : GetScalarType<T[P], AggregatePayrollStats[P]>
  }




  export type PayrollStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollStatsWhereInput
    orderBy?: PayrollStatsOrderByWithAggregationInput | PayrollStatsOrderByWithAggregationInput[]
    by: PayrollStatsScalarFieldEnum[] | PayrollStatsScalarFieldEnum
    having?: PayrollStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollStatsCountAggregateInputType | true
    _avg?: PayrollStatsAvgAggregateInputType
    _sum?: PayrollStatsSumAggregateInputType
    _min?: PayrollStatsMinAggregateInputType
    _max?: PayrollStatsMaxAggregateInputType
  }

  export type PayrollStatsGroupByOutputType = {
    id: string
    period: string
    periodType: $Enums.PeriodType
    year: number
    month: number | null
    quarter: number | null
    totalEmployees: number
    activeEmployees: number
    newHires: number
    terminations: number
    totalGrossPay: number
    totalNetPay: number
    totalDeductions: number
    totalTaxes: number
    totalBenefits: number
    averageSalary: number
    medianSalary: number
    currency: string
    departmentBreakdown: JsonValue | null
    payrollPeriods: number
    processingTime: number | null
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: PayrollStatsCountAggregateOutputType | null
    _avg: PayrollStatsAvgAggregateOutputType | null
    _sum: PayrollStatsSumAggregateOutputType | null
    _min: PayrollStatsMinAggregateOutputType | null
    _max: PayrollStatsMaxAggregateOutputType | null
  }

  type GetPayrollStatsGroupByPayload<T extends PayrollStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollStatsGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollStatsGroupByOutputType[P]>
        }
      >
    >


  export type PayrollStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    period?: boolean
    periodType?: boolean
    year?: boolean
    month?: boolean
    quarter?: boolean
    totalEmployees?: boolean
    activeEmployees?: boolean
    newHires?: boolean
    terminations?: boolean
    totalGrossPay?: boolean
    totalNetPay?: boolean
    totalDeductions?: boolean
    totalTaxes?: boolean
    totalBenefits?: boolean
    averageSalary?: boolean
    medianSalary?: boolean
    currency?: boolean
    departmentBreakdown?: boolean
    payrollPeriods?: boolean
    processingTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["payrollStats"]>

  export type PayrollStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    period?: boolean
    periodType?: boolean
    year?: boolean
    month?: boolean
    quarter?: boolean
    totalEmployees?: boolean
    activeEmployees?: boolean
    newHires?: boolean
    terminations?: boolean
    totalGrossPay?: boolean
    totalNetPay?: boolean
    totalDeductions?: boolean
    totalTaxes?: boolean
    totalBenefits?: boolean
    averageSalary?: boolean
    medianSalary?: boolean
    currency?: boolean
    departmentBreakdown?: boolean
    payrollPeriods?: boolean
    processingTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["payrollStats"]>

  export type PayrollStatsSelectScalar = {
    id?: boolean
    period?: boolean
    periodType?: boolean
    year?: boolean
    month?: boolean
    quarter?: boolean
    totalEmployees?: boolean
    activeEmployees?: boolean
    newHires?: boolean
    terminations?: boolean
    totalGrossPay?: boolean
    totalNetPay?: boolean
    totalDeductions?: boolean
    totalTaxes?: boolean
    totalBenefits?: boolean
    averageSalary?: boolean
    medianSalary?: boolean
    currency?: boolean
    departmentBreakdown?: boolean
    payrollPeriods?: boolean
    processingTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }


  export type $PayrollStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollStats"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      period: string
      periodType: $Enums.PeriodType
      year: number
      month: number | null
      quarter: number | null
      totalEmployees: number
      activeEmployees: number
      newHires: number
      terminations: number
      totalGrossPay: number
      totalNetPay: number
      totalDeductions: number
      totalTaxes: number
      totalBenefits: number
      averageSalary: number
      medianSalary: number
      currency: string
      departmentBreakdown: Prisma.JsonValue | null
      payrollPeriods: number
      processingTime: number | null
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["payrollStats"]>
    composites: {}
  }

  type PayrollStatsGetPayload<S extends boolean | null | undefined | PayrollStatsDefaultArgs> = $Result.GetResult<Prisma.$PayrollStatsPayload, S>

  type PayrollStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollStatsCountAggregateInputType | true
    }

  export interface PayrollStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollStats'], meta: { name: 'PayrollStats' } }
    /**
     * Find zero or one PayrollStats that matches the filter.
     * @param {PayrollStatsFindUniqueArgs} args - Arguments to find a PayrollStats
     * @example
     * // Get one PayrollStats
     * const payrollStats = await prisma.payrollStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollStatsFindUniqueArgs>(args: SelectSubset<T, PayrollStatsFindUniqueArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PayrollStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PayrollStatsFindUniqueOrThrowArgs} args - Arguments to find a PayrollStats
     * @example
     * // Get one PayrollStats
     * const payrollStats = await prisma.payrollStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PayrollStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollStatsFindFirstArgs} args - Arguments to find a PayrollStats
     * @example
     * // Get one PayrollStats
     * const payrollStats = await prisma.payrollStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollStatsFindFirstArgs>(args?: SelectSubset<T, PayrollStatsFindFirstArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PayrollStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollStatsFindFirstOrThrowArgs} args - Arguments to find a PayrollStats
     * @example
     * // Get one PayrollStats
     * const payrollStats = await prisma.payrollStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PayrollStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollStats
     * const payrollStats = await prisma.payrollStats.findMany()
     * 
     * // Get first 10 PayrollStats
     * const payrollStats = await prisma.payrollStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollStatsWithIdOnly = await prisma.payrollStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollStatsFindManyArgs>(args?: SelectSubset<T, PayrollStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PayrollStats.
     * @param {PayrollStatsCreateArgs} args - Arguments to create a PayrollStats.
     * @example
     * // Create one PayrollStats
     * const PayrollStats = await prisma.payrollStats.create({
     *   data: {
     *     // ... data to create a PayrollStats
     *   }
     * })
     * 
     */
    create<T extends PayrollStatsCreateArgs>(args: SelectSubset<T, PayrollStatsCreateArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PayrollStats.
     * @param {PayrollStatsCreateManyArgs} args - Arguments to create many PayrollStats.
     * @example
     * // Create many PayrollStats
     * const payrollStats = await prisma.payrollStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollStatsCreateManyArgs>(args?: SelectSubset<T, PayrollStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollStats and returns the data saved in the database.
     * @param {PayrollStatsCreateManyAndReturnArgs} args - Arguments to create many PayrollStats.
     * @example
     * // Create many PayrollStats
     * const payrollStats = await prisma.payrollStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollStats and only return the `id`
     * const payrollStatsWithIdOnly = await prisma.payrollStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PayrollStats.
     * @param {PayrollStatsDeleteArgs} args - Arguments to delete one PayrollStats.
     * @example
     * // Delete one PayrollStats
     * const PayrollStats = await prisma.payrollStats.delete({
     *   where: {
     *     // ... filter to delete one PayrollStats
     *   }
     * })
     * 
     */
    delete<T extends PayrollStatsDeleteArgs>(args: SelectSubset<T, PayrollStatsDeleteArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PayrollStats.
     * @param {PayrollStatsUpdateArgs} args - Arguments to update one PayrollStats.
     * @example
     * // Update one PayrollStats
     * const payrollStats = await prisma.payrollStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollStatsUpdateArgs>(args: SelectSubset<T, PayrollStatsUpdateArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PayrollStats.
     * @param {PayrollStatsDeleteManyArgs} args - Arguments to filter PayrollStats to delete.
     * @example
     * // Delete a few PayrollStats
     * const { count } = await prisma.payrollStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollStatsDeleteManyArgs>(args?: SelectSubset<T, PayrollStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollStats
     * const payrollStats = await prisma.payrollStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollStatsUpdateManyArgs>(args: SelectSubset<T, PayrollStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayrollStats.
     * @param {PayrollStatsUpsertArgs} args - Arguments to update or create a PayrollStats.
     * @example
     * // Update or create a PayrollStats
     * const payrollStats = await prisma.payrollStats.upsert({
     *   create: {
     *     // ... data to create a PayrollStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollStats we want to update
     *   }
     * })
     */
    upsert<T extends PayrollStatsUpsertArgs>(args: SelectSubset<T, PayrollStatsUpsertArgs<ExtArgs>>): Prisma__PayrollStatsClient<$Result.GetResult<Prisma.$PayrollStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PayrollStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollStatsCountArgs} args - Arguments to filter PayrollStats to count.
     * @example
     * // Count the number of PayrollStats
     * const count = await prisma.payrollStats.count({
     *   where: {
     *     // ... the filter for the PayrollStats we want to count
     *   }
     * })
    **/
    count<T extends PayrollStatsCountArgs>(
      args?: Subset<T, PayrollStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollStatsAggregateArgs>(args: Subset<T, PayrollStatsAggregateArgs>): Prisma.PrismaPromise<GetPayrollStatsAggregateType<T>>

    /**
     * Group by PayrollStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollStatsGroupByArgs['orderBy'] }
        : { orderBy?: PayrollStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollStats model
   */
  readonly fields: PayrollStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollStats model
   */ 
  interface PayrollStatsFieldRefs {
    readonly id: FieldRef<"PayrollStats", 'String'>
    readonly period: FieldRef<"PayrollStats", 'String'>
    readonly periodType: FieldRef<"PayrollStats", 'PeriodType'>
    readonly year: FieldRef<"PayrollStats", 'Int'>
    readonly month: FieldRef<"PayrollStats", 'Int'>
    readonly quarter: FieldRef<"PayrollStats", 'Int'>
    readonly totalEmployees: FieldRef<"PayrollStats", 'Int'>
    readonly activeEmployees: FieldRef<"PayrollStats", 'Int'>
    readonly newHires: FieldRef<"PayrollStats", 'Int'>
    readonly terminations: FieldRef<"PayrollStats", 'Int'>
    readonly totalGrossPay: FieldRef<"PayrollStats", 'Float'>
    readonly totalNetPay: FieldRef<"PayrollStats", 'Float'>
    readonly totalDeductions: FieldRef<"PayrollStats", 'Float'>
    readonly totalTaxes: FieldRef<"PayrollStats", 'Float'>
    readonly totalBenefits: FieldRef<"PayrollStats", 'Float'>
    readonly averageSalary: FieldRef<"PayrollStats", 'Float'>
    readonly medianSalary: FieldRef<"PayrollStats", 'Float'>
    readonly currency: FieldRef<"PayrollStats", 'String'>
    readonly departmentBreakdown: FieldRef<"PayrollStats", 'Json'>
    readonly payrollPeriods: FieldRef<"PayrollStats", 'Int'>
    readonly processingTime: FieldRef<"PayrollStats", 'Int'>
    readonly createdAt: FieldRef<"PayrollStats", 'DateTime'>
    readonly updatedAt: FieldRef<"PayrollStats", 'DateTime'>
    readonly createdById: FieldRef<"PayrollStats", 'String'>
    readonly updatedById: FieldRef<"PayrollStats", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PayrollStats findUnique
   */
  export type PayrollStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * Filter, which PayrollStats to fetch.
     */
    where: PayrollStatsWhereUniqueInput
  }

  /**
   * PayrollStats findUniqueOrThrow
   */
  export type PayrollStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * Filter, which PayrollStats to fetch.
     */
    where: PayrollStatsWhereUniqueInput
  }

  /**
   * PayrollStats findFirst
   */
  export type PayrollStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * Filter, which PayrollStats to fetch.
     */
    where?: PayrollStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollStats to fetch.
     */
    orderBy?: PayrollStatsOrderByWithRelationInput | PayrollStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollStats.
     */
    cursor?: PayrollStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollStats.
     */
    distinct?: PayrollStatsScalarFieldEnum | PayrollStatsScalarFieldEnum[]
  }

  /**
   * PayrollStats findFirstOrThrow
   */
  export type PayrollStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * Filter, which PayrollStats to fetch.
     */
    where?: PayrollStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollStats to fetch.
     */
    orderBy?: PayrollStatsOrderByWithRelationInput | PayrollStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollStats.
     */
    cursor?: PayrollStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollStats.
     */
    distinct?: PayrollStatsScalarFieldEnum | PayrollStatsScalarFieldEnum[]
  }

  /**
   * PayrollStats findMany
   */
  export type PayrollStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * Filter, which PayrollStats to fetch.
     */
    where?: PayrollStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollStats to fetch.
     */
    orderBy?: PayrollStatsOrderByWithRelationInput | PayrollStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollStats.
     */
    cursor?: PayrollStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollStats.
     */
    skip?: number
    distinct?: PayrollStatsScalarFieldEnum | PayrollStatsScalarFieldEnum[]
  }

  /**
   * PayrollStats create
   */
  export type PayrollStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * The data needed to create a PayrollStats.
     */
    data: XOR<PayrollStatsCreateInput, PayrollStatsUncheckedCreateInput>
  }

  /**
   * PayrollStats createMany
   */
  export type PayrollStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollStats.
     */
    data: PayrollStatsCreateManyInput | PayrollStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollStats createManyAndReturn
   */
  export type PayrollStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PayrollStats.
     */
    data: PayrollStatsCreateManyInput | PayrollStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollStats update
   */
  export type PayrollStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * The data needed to update a PayrollStats.
     */
    data: XOR<PayrollStatsUpdateInput, PayrollStatsUncheckedUpdateInput>
    /**
     * Choose, which PayrollStats to update.
     */
    where: PayrollStatsWhereUniqueInput
  }

  /**
   * PayrollStats updateMany
   */
  export type PayrollStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollStats.
     */
    data: XOR<PayrollStatsUpdateManyMutationInput, PayrollStatsUncheckedUpdateManyInput>
    /**
     * Filter which PayrollStats to update
     */
    where?: PayrollStatsWhereInput
  }

  /**
   * PayrollStats upsert
   */
  export type PayrollStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * The filter to search for the PayrollStats to update in case it exists.
     */
    where: PayrollStatsWhereUniqueInput
    /**
     * In case the PayrollStats found by the `where` argument doesn't exist, create a new PayrollStats with this data.
     */
    create: XOR<PayrollStatsCreateInput, PayrollStatsUncheckedCreateInput>
    /**
     * In case the PayrollStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollStatsUpdateInput, PayrollStatsUncheckedUpdateInput>
  }

  /**
   * PayrollStats delete
   */
  export type PayrollStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
    /**
     * Filter which PayrollStats to delete.
     */
    where: PayrollStatsWhereUniqueInput
  }

  /**
   * PayrollStats deleteMany
   */
  export type PayrollStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollStats to delete
     */
    where?: PayrollStatsWhereInput
  }

  /**
   * PayrollStats without action
   */
  export type PayrollStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollStats
     */
    select?: PayrollStatsSelect<ExtArgs> | null
  }


  /**
   * Model PayrollConfig
   */

  export type AggregatePayrollConfig = {
    _count: PayrollConfigCountAggregateOutputType | null
    _min: PayrollConfigMinAggregateOutputType | null
    _max: PayrollConfigMaxAggregateOutputType | null
  }

  export type PayrollConfigMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    configType: string | null
    isActive: boolean | null
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PayrollConfigMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    configType: string | null
    isActive: boolean | null
    effectiveFrom: Date | null
    effectiveTo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PayrollConfigCountAggregateOutputType = {
    id: number
    name: number
    description: number
    configType: number
    configValue: number
    isActive: number
    effectiveFrom: number
    effectiveTo: number
    applicableCountries: number
    applicableStates: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PayrollConfigMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    configType?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PayrollConfigMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    configType?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PayrollConfigCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    configType?: true
    configValue?: true
    isActive?: true
    effectiveFrom?: true
    effectiveTo?: true
    applicableCountries?: true
    applicableStates?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PayrollConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollConfig to aggregate.
     */
    where?: PayrollConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollConfigs to fetch.
     */
    orderBy?: PayrollConfigOrderByWithRelationInput | PayrollConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollConfigs
    **/
    _count?: true | PayrollConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollConfigMaxAggregateInputType
  }

  export type GetPayrollConfigAggregateType<T extends PayrollConfigAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollConfig[P]>
      : GetScalarType<T[P], AggregatePayrollConfig[P]>
  }




  export type PayrollConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollConfigWhereInput
    orderBy?: PayrollConfigOrderByWithAggregationInput | PayrollConfigOrderByWithAggregationInput[]
    by: PayrollConfigScalarFieldEnum[] | PayrollConfigScalarFieldEnum
    having?: PayrollConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollConfigCountAggregateInputType | true
    _min?: PayrollConfigMinAggregateInputType
    _max?: PayrollConfigMaxAggregateInputType
  }

  export type PayrollConfigGroupByOutputType = {
    id: string
    name: string
    description: string | null
    configType: string
    configValue: JsonValue
    isActive: boolean
    effectiveFrom: Date
    effectiveTo: Date | null
    applicableCountries: string[]
    applicableStates: string[]
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: PayrollConfigCountAggregateOutputType | null
    _min: PayrollConfigMinAggregateOutputType | null
    _max: PayrollConfigMaxAggregateOutputType | null
  }

  type GetPayrollConfigGroupByPayload<T extends PayrollConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollConfigGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollConfigGroupByOutputType[P]>
        }
      >
    >


  export type PayrollConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    configType?: boolean
    configValue?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    applicableCountries?: boolean
    applicableStates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["payrollConfig"]>

  export type PayrollConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    configType?: boolean
    configValue?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    applicableCountries?: boolean
    applicableStates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["payrollConfig"]>

  export type PayrollConfigSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    configType?: boolean
    configValue?: boolean
    isActive?: boolean
    effectiveFrom?: boolean
    effectiveTo?: boolean
    applicableCountries?: boolean
    applicableStates?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }


  export type $PayrollConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      configType: string
      configValue: Prisma.JsonValue
      isActive: boolean
      effectiveFrom: Date
      effectiveTo: Date | null
      applicableCountries: string[]
      applicableStates: string[]
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["payrollConfig"]>
    composites: {}
  }

  type PayrollConfigGetPayload<S extends boolean | null | undefined | PayrollConfigDefaultArgs> = $Result.GetResult<Prisma.$PayrollConfigPayload, S>

  type PayrollConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollConfigCountAggregateInputType | true
    }

  export interface PayrollConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollConfig'], meta: { name: 'PayrollConfig' } }
    /**
     * Find zero or one PayrollConfig that matches the filter.
     * @param {PayrollConfigFindUniqueArgs} args - Arguments to find a PayrollConfig
     * @example
     * // Get one PayrollConfig
     * const payrollConfig = await prisma.payrollConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollConfigFindUniqueArgs>(args: SelectSubset<T, PayrollConfigFindUniqueArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PayrollConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PayrollConfigFindUniqueOrThrowArgs} args - Arguments to find a PayrollConfig
     * @example
     * // Get one PayrollConfig
     * const payrollConfig = await prisma.payrollConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PayrollConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollConfigFindFirstArgs} args - Arguments to find a PayrollConfig
     * @example
     * // Get one PayrollConfig
     * const payrollConfig = await prisma.payrollConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollConfigFindFirstArgs>(args?: SelectSubset<T, PayrollConfigFindFirstArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PayrollConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollConfigFindFirstOrThrowArgs} args - Arguments to find a PayrollConfig
     * @example
     * // Get one PayrollConfig
     * const payrollConfig = await prisma.payrollConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PayrollConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollConfigs
     * const payrollConfigs = await prisma.payrollConfig.findMany()
     * 
     * // Get first 10 PayrollConfigs
     * const payrollConfigs = await prisma.payrollConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollConfigWithIdOnly = await prisma.payrollConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollConfigFindManyArgs>(args?: SelectSubset<T, PayrollConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PayrollConfig.
     * @param {PayrollConfigCreateArgs} args - Arguments to create a PayrollConfig.
     * @example
     * // Create one PayrollConfig
     * const PayrollConfig = await prisma.payrollConfig.create({
     *   data: {
     *     // ... data to create a PayrollConfig
     *   }
     * })
     * 
     */
    create<T extends PayrollConfigCreateArgs>(args: SelectSubset<T, PayrollConfigCreateArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PayrollConfigs.
     * @param {PayrollConfigCreateManyArgs} args - Arguments to create many PayrollConfigs.
     * @example
     * // Create many PayrollConfigs
     * const payrollConfig = await prisma.payrollConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollConfigCreateManyArgs>(args?: SelectSubset<T, PayrollConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollConfigs and returns the data saved in the database.
     * @param {PayrollConfigCreateManyAndReturnArgs} args - Arguments to create many PayrollConfigs.
     * @example
     * // Create many PayrollConfigs
     * const payrollConfig = await prisma.payrollConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollConfigs and only return the `id`
     * const payrollConfigWithIdOnly = await prisma.payrollConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PayrollConfig.
     * @param {PayrollConfigDeleteArgs} args - Arguments to delete one PayrollConfig.
     * @example
     * // Delete one PayrollConfig
     * const PayrollConfig = await prisma.payrollConfig.delete({
     *   where: {
     *     // ... filter to delete one PayrollConfig
     *   }
     * })
     * 
     */
    delete<T extends PayrollConfigDeleteArgs>(args: SelectSubset<T, PayrollConfigDeleteArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PayrollConfig.
     * @param {PayrollConfigUpdateArgs} args - Arguments to update one PayrollConfig.
     * @example
     * // Update one PayrollConfig
     * const payrollConfig = await prisma.payrollConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollConfigUpdateArgs>(args: SelectSubset<T, PayrollConfigUpdateArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PayrollConfigs.
     * @param {PayrollConfigDeleteManyArgs} args - Arguments to filter PayrollConfigs to delete.
     * @example
     * // Delete a few PayrollConfigs
     * const { count } = await prisma.payrollConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollConfigDeleteManyArgs>(args?: SelectSubset<T, PayrollConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollConfigs
     * const payrollConfig = await prisma.payrollConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollConfigUpdateManyArgs>(args: SelectSubset<T, PayrollConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayrollConfig.
     * @param {PayrollConfigUpsertArgs} args - Arguments to update or create a PayrollConfig.
     * @example
     * // Update or create a PayrollConfig
     * const payrollConfig = await prisma.payrollConfig.upsert({
     *   create: {
     *     // ... data to create a PayrollConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollConfig we want to update
     *   }
     * })
     */
    upsert<T extends PayrollConfigUpsertArgs>(args: SelectSubset<T, PayrollConfigUpsertArgs<ExtArgs>>): Prisma__PayrollConfigClient<$Result.GetResult<Prisma.$PayrollConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PayrollConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollConfigCountArgs} args - Arguments to filter PayrollConfigs to count.
     * @example
     * // Count the number of PayrollConfigs
     * const count = await prisma.payrollConfig.count({
     *   where: {
     *     // ... the filter for the PayrollConfigs we want to count
     *   }
     * })
    **/
    count<T extends PayrollConfigCountArgs>(
      args?: Subset<T, PayrollConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollConfigAggregateArgs>(args: Subset<T, PayrollConfigAggregateArgs>): Prisma.PrismaPromise<GetPayrollConfigAggregateType<T>>

    /**
     * Group by PayrollConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollConfigGroupByArgs['orderBy'] }
        : { orderBy?: PayrollConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollConfig model
   */
  readonly fields: PayrollConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollConfig model
   */ 
  interface PayrollConfigFieldRefs {
    readonly id: FieldRef<"PayrollConfig", 'String'>
    readonly name: FieldRef<"PayrollConfig", 'String'>
    readonly description: FieldRef<"PayrollConfig", 'String'>
    readonly configType: FieldRef<"PayrollConfig", 'String'>
    readonly configValue: FieldRef<"PayrollConfig", 'Json'>
    readonly isActive: FieldRef<"PayrollConfig", 'Boolean'>
    readonly effectiveFrom: FieldRef<"PayrollConfig", 'DateTime'>
    readonly effectiveTo: FieldRef<"PayrollConfig", 'DateTime'>
    readonly applicableCountries: FieldRef<"PayrollConfig", 'String[]'>
    readonly applicableStates: FieldRef<"PayrollConfig", 'String[]'>
    readonly createdAt: FieldRef<"PayrollConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"PayrollConfig", 'DateTime'>
    readonly createdById: FieldRef<"PayrollConfig", 'String'>
    readonly updatedById: FieldRef<"PayrollConfig", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PayrollConfig findUnique
   */
  export type PayrollConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * Filter, which PayrollConfig to fetch.
     */
    where: PayrollConfigWhereUniqueInput
  }

  /**
   * PayrollConfig findUniqueOrThrow
   */
  export type PayrollConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * Filter, which PayrollConfig to fetch.
     */
    where: PayrollConfigWhereUniqueInput
  }

  /**
   * PayrollConfig findFirst
   */
  export type PayrollConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * Filter, which PayrollConfig to fetch.
     */
    where?: PayrollConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollConfigs to fetch.
     */
    orderBy?: PayrollConfigOrderByWithRelationInput | PayrollConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollConfigs.
     */
    cursor?: PayrollConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollConfigs.
     */
    distinct?: PayrollConfigScalarFieldEnum | PayrollConfigScalarFieldEnum[]
  }

  /**
   * PayrollConfig findFirstOrThrow
   */
  export type PayrollConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * Filter, which PayrollConfig to fetch.
     */
    where?: PayrollConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollConfigs to fetch.
     */
    orderBy?: PayrollConfigOrderByWithRelationInput | PayrollConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollConfigs.
     */
    cursor?: PayrollConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollConfigs.
     */
    distinct?: PayrollConfigScalarFieldEnum | PayrollConfigScalarFieldEnum[]
  }

  /**
   * PayrollConfig findMany
   */
  export type PayrollConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * Filter, which PayrollConfigs to fetch.
     */
    where?: PayrollConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollConfigs to fetch.
     */
    orderBy?: PayrollConfigOrderByWithRelationInput | PayrollConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollConfigs.
     */
    cursor?: PayrollConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollConfigs.
     */
    skip?: number
    distinct?: PayrollConfigScalarFieldEnum | PayrollConfigScalarFieldEnum[]
  }

  /**
   * PayrollConfig create
   */
  export type PayrollConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a PayrollConfig.
     */
    data: XOR<PayrollConfigCreateInput, PayrollConfigUncheckedCreateInput>
  }

  /**
   * PayrollConfig createMany
   */
  export type PayrollConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollConfigs.
     */
    data: PayrollConfigCreateManyInput | PayrollConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollConfig createManyAndReturn
   */
  export type PayrollConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PayrollConfigs.
     */
    data: PayrollConfigCreateManyInput | PayrollConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollConfig update
   */
  export type PayrollConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a PayrollConfig.
     */
    data: XOR<PayrollConfigUpdateInput, PayrollConfigUncheckedUpdateInput>
    /**
     * Choose, which PayrollConfig to update.
     */
    where: PayrollConfigWhereUniqueInput
  }

  /**
   * PayrollConfig updateMany
   */
  export type PayrollConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollConfigs.
     */
    data: XOR<PayrollConfigUpdateManyMutationInput, PayrollConfigUncheckedUpdateManyInput>
    /**
     * Filter which PayrollConfigs to update
     */
    where?: PayrollConfigWhereInput
  }

  /**
   * PayrollConfig upsert
   */
  export type PayrollConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the PayrollConfig to update in case it exists.
     */
    where: PayrollConfigWhereUniqueInput
    /**
     * In case the PayrollConfig found by the `where` argument doesn't exist, create a new PayrollConfig with this data.
     */
    create: XOR<PayrollConfigCreateInput, PayrollConfigUncheckedCreateInput>
    /**
     * In case the PayrollConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollConfigUpdateInput, PayrollConfigUncheckedUpdateInput>
  }

  /**
   * PayrollConfig delete
   */
  export type PayrollConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
    /**
     * Filter which PayrollConfig to delete.
     */
    where: PayrollConfigWhereUniqueInput
  }

  /**
   * PayrollConfig deleteMany
   */
  export type PayrollConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollConfigs to delete
     */
    where?: PayrollConfigWhereInput
  }

  /**
   * PayrollConfig without action
   */
  export type PayrollConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollConfig
     */
    select?: PayrollConfigSelect<ExtArgs> | null
  }


  /**
   * Model EmployeeTaxInfo
   */

  export type AggregateEmployeeTaxInfo = {
    _count: EmployeeTaxInfoCountAggregateOutputType | null
    _avg: EmployeeTaxInfoAvgAggregateOutputType | null
    _sum: EmployeeTaxInfoSumAggregateOutputType | null
    _min: EmployeeTaxInfoMinAggregateOutputType | null
    _max: EmployeeTaxInfoMaxAggregateOutputType | null
  }

  export type EmployeeTaxInfoAvgAggregateOutputType = {
    taxYear: number | null
    dependents: number | null
    exemptions: number | null
    federalExemptions: number | null
    stateExemptions: number | null
    additionalWithholding: number | null
    ytdGrossPay: number | null
    ytdFederalTax: number | null
    ytdStateTax: number | null
    ytdSocialSecurity: number | null
    ytdMedicare: number | null
    ytdNetPay: number | null
  }

  export type EmployeeTaxInfoSumAggregateOutputType = {
    taxYear: number | null
    dependents: number | null
    exemptions: number | null
    federalExemptions: number | null
    stateExemptions: number | null
    additionalWithholding: number | null
    ytdGrossPay: number | null
    ytdFederalTax: number | null
    ytdStateTax: number | null
    ytdSocialSecurity: number | null
    ytdMedicare: number | null
    ytdNetPay: number | null
  }

  export type EmployeeTaxInfoMinAggregateOutputType = {
    id: string | null
    employeeId: string | null
    taxYear: number | null
    filingStatus: string | null
    dependents: number | null
    exemptions: number | null
    federalExemptions: number | null
    stateExemptions: number | null
    additionalWithholding: number | null
    ssn: string | null
    taxId: string | null
    ytdGrossPay: number | null
    ytdFederalTax: number | null
    ytdStateTax: number | null
    ytdSocialSecurity: number | null
    ytdMedicare: number | null
    ytdNetPay: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type EmployeeTaxInfoMaxAggregateOutputType = {
    id: string | null
    employeeId: string | null
    taxYear: number | null
    filingStatus: string | null
    dependents: number | null
    exemptions: number | null
    federalExemptions: number | null
    stateExemptions: number | null
    additionalWithholding: number | null
    ssn: string | null
    taxId: string | null
    ytdGrossPay: number | null
    ytdFederalTax: number | null
    ytdStateTax: number | null
    ytdSocialSecurity: number | null
    ytdMedicare: number | null
    ytdNetPay: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type EmployeeTaxInfoCountAggregateOutputType = {
    id: number
    employeeId: number
    taxYear: number
    filingStatus: number
    dependents: number
    exemptions: number
    federalExemptions: number
    stateExemptions: number
    additionalWithholding: number
    ssn: number
    taxId: number
    ytdGrossPay: number
    ytdFederalTax: number
    ytdStateTax: number
    ytdSocialSecurity: number
    ytdMedicare: number
    ytdNetPay: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type EmployeeTaxInfoAvgAggregateInputType = {
    taxYear?: true
    dependents?: true
    exemptions?: true
    federalExemptions?: true
    stateExemptions?: true
    additionalWithholding?: true
    ytdGrossPay?: true
    ytdFederalTax?: true
    ytdStateTax?: true
    ytdSocialSecurity?: true
    ytdMedicare?: true
    ytdNetPay?: true
  }

  export type EmployeeTaxInfoSumAggregateInputType = {
    taxYear?: true
    dependents?: true
    exemptions?: true
    federalExemptions?: true
    stateExemptions?: true
    additionalWithholding?: true
    ytdGrossPay?: true
    ytdFederalTax?: true
    ytdStateTax?: true
    ytdSocialSecurity?: true
    ytdMedicare?: true
    ytdNetPay?: true
  }

  export type EmployeeTaxInfoMinAggregateInputType = {
    id?: true
    employeeId?: true
    taxYear?: true
    filingStatus?: true
    dependents?: true
    exemptions?: true
    federalExemptions?: true
    stateExemptions?: true
    additionalWithholding?: true
    ssn?: true
    taxId?: true
    ytdGrossPay?: true
    ytdFederalTax?: true
    ytdStateTax?: true
    ytdSocialSecurity?: true
    ytdMedicare?: true
    ytdNetPay?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type EmployeeTaxInfoMaxAggregateInputType = {
    id?: true
    employeeId?: true
    taxYear?: true
    filingStatus?: true
    dependents?: true
    exemptions?: true
    federalExemptions?: true
    stateExemptions?: true
    additionalWithholding?: true
    ssn?: true
    taxId?: true
    ytdGrossPay?: true
    ytdFederalTax?: true
    ytdStateTax?: true
    ytdSocialSecurity?: true
    ytdMedicare?: true
    ytdNetPay?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type EmployeeTaxInfoCountAggregateInputType = {
    id?: true
    employeeId?: true
    taxYear?: true
    filingStatus?: true
    dependents?: true
    exemptions?: true
    federalExemptions?: true
    stateExemptions?: true
    additionalWithholding?: true
    ssn?: true
    taxId?: true
    ytdGrossPay?: true
    ytdFederalTax?: true
    ytdStateTax?: true
    ytdSocialSecurity?: true
    ytdMedicare?: true
    ytdNetPay?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type EmployeeTaxInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTaxInfo to aggregate.
     */
    where?: EmployeeTaxInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTaxInfos to fetch.
     */
    orderBy?: EmployeeTaxInfoOrderByWithRelationInput | EmployeeTaxInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeTaxInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTaxInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTaxInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployeeTaxInfos
    **/
    _count?: true | EmployeeTaxInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeTaxInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeTaxInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeTaxInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeTaxInfoMaxAggregateInputType
  }

  export type GetEmployeeTaxInfoAggregateType<T extends EmployeeTaxInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeTaxInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeTaxInfo[P]>
      : GetScalarType<T[P], AggregateEmployeeTaxInfo[P]>
  }




  export type EmployeeTaxInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeTaxInfoWhereInput
    orderBy?: EmployeeTaxInfoOrderByWithAggregationInput | EmployeeTaxInfoOrderByWithAggregationInput[]
    by: EmployeeTaxInfoScalarFieldEnum[] | EmployeeTaxInfoScalarFieldEnum
    having?: EmployeeTaxInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeTaxInfoCountAggregateInputType | true
    _avg?: EmployeeTaxInfoAvgAggregateInputType
    _sum?: EmployeeTaxInfoSumAggregateInputType
    _min?: EmployeeTaxInfoMinAggregateInputType
    _max?: EmployeeTaxInfoMaxAggregateInputType
  }

  export type EmployeeTaxInfoGroupByOutputType = {
    id: string
    employeeId: string
    taxYear: number
    filingStatus: string
    dependents: number
    exemptions: number
    federalExemptions: number
    stateExemptions: number
    additionalWithholding: number
    ssn: string | null
    taxId: string | null
    ytdGrossPay: number
    ytdFederalTax: number
    ytdStateTax: number
    ytdSocialSecurity: number
    ytdMedicare: number
    ytdNetPay: number
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: EmployeeTaxInfoCountAggregateOutputType | null
    _avg: EmployeeTaxInfoAvgAggregateOutputType | null
    _sum: EmployeeTaxInfoSumAggregateOutputType | null
    _min: EmployeeTaxInfoMinAggregateOutputType | null
    _max: EmployeeTaxInfoMaxAggregateOutputType | null
  }

  type GetEmployeeTaxInfoGroupByPayload<T extends EmployeeTaxInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeTaxInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeTaxInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeTaxInfoGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeTaxInfoGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeTaxInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    taxYear?: boolean
    filingStatus?: boolean
    dependents?: boolean
    exemptions?: boolean
    federalExemptions?: boolean
    stateExemptions?: boolean
    additionalWithholding?: boolean
    ssn?: boolean
    taxId?: boolean
    ytdGrossPay?: boolean
    ytdFederalTax?: boolean
    ytdStateTax?: boolean
    ytdSocialSecurity?: boolean
    ytdMedicare?: boolean
    ytdNetPay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["employeeTaxInfo"]>

  export type EmployeeTaxInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employeeId?: boolean
    taxYear?: boolean
    filingStatus?: boolean
    dependents?: boolean
    exemptions?: boolean
    federalExemptions?: boolean
    stateExemptions?: boolean
    additionalWithholding?: boolean
    ssn?: boolean
    taxId?: boolean
    ytdGrossPay?: boolean
    ytdFederalTax?: boolean
    ytdStateTax?: boolean
    ytdSocialSecurity?: boolean
    ytdMedicare?: boolean
    ytdNetPay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }, ExtArgs["result"]["employeeTaxInfo"]>

  export type EmployeeTaxInfoSelectScalar = {
    id?: boolean
    employeeId?: boolean
    taxYear?: boolean
    filingStatus?: boolean
    dependents?: boolean
    exemptions?: boolean
    federalExemptions?: boolean
    stateExemptions?: boolean
    additionalWithholding?: boolean
    ssn?: boolean
    taxId?: boolean
    ytdGrossPay?: boolean
    ytdFederalTax?: boolean
    ytdStateTax?: boolean
    ytdSocialSecurity?: boolean
    ytdMedicare?: boolean
    ytdNetPay?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }


  export type $EmployeeTaxInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployeeTaxInfo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      employeeId: string
      taxYear: number
      filingStatus: string
      dependents: number
      exemptions: number
      federalExemptions: number
      stateExemptions: number
      additionalWithholding: number
      ssn: string | null
      taxId: string | null
      ytdGrossPay: number
      ytdFederalTax: number
      ytdStateTax: number
      ytdSocialSecurity: number
      ytdMedicare: number
      ytdNetPay: number
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["employeeTaxInfo"]>
    composites: {}
  }

  type EmployeeTaxInfoGetPayload<S extends boolean | null | undefined | EmployeeTaxInfoDefaultArgs> = $Result.GetResult<Prisma.$EmployeeTaxInfoPayload, S>

  type EmployeeTaxInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployeeTaxInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeTaxInfoCountAggregateInputType | true
    }

  export interface EmployeeTaxInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployeeTaxInfo'], meta: { name: 'EmployeeTaxInfo' } }
    /**
     * Find zero or one EmployeeTaxInfo that matches the filter.
     * @param {EmployeeTaxInfoFindUniqueArgs} args - Arguments to find a EmployeeTaxInfo
     * @example
     * // Get one EmployeeTaxInfo
     * const employeeTaxInfo = await prisma.employeeTaxInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeTaxInfoFindUniqueArgs>(args: SelectSubset<T, EmployeeTaxInfoFindUniqueArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmployeeTaxInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployeeTaxInfoFindUniqueOrThrowArgs} args - Arguments to find a EmployeeTaxInfo
     * @example
     * // Get one EmployeeTaxInfo
     * const employeeTaxInfo = await prisma.employeeTaxInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeTaxInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeTaxInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmployeeTaxInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTaxInfoFindFirstArgs} args - Arguments to find a EmployeeTaxInfo
     * @example
     * // Get one EmployeeTaxInfo
     * const employeeTaxInfo = await prisma.employeeTaxInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeTaxInfoFindFirstArgs>(args?: SelectSubset<T, EmployeeTaxInfoFindFirstArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmployeeTaxInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTaxInfoFindFirstOrThrowArgs} args - Arguments to find a EmployeeTaxInfo
     * @example
     * // Get one EmployeeTaxInfo
     * const employeeTaxInfo = await prisma.employeeTaxInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeTaxInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeTaxInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmployeeTaxInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTaxInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeTaxInfos
     * const employeeTaxInfos = await prisma.employeeTaxInfo.findMany()
     * 
     * // Get first 10 EmployeeTaxInfos
     * const employeeTaxInfos = await prisma.employeeTaxInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeTaxInfoWithIdOnly = await prisma.employeeTaxInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeTaxInfoFindManyArgs>(args?: SelectSubset<T, EmployeeTaxInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmployeeTaxInfo.
     * @param {EmployeeTaxInfoCreateArgs} args - Arguments to create a EmployeeTaxInfo.
     * @example
     * // Create one EmployeeTaxInfo
     * const EmployeeTaxInfo = await prisma.employeeTaxInfo.create({
     *   data: {
     *     // ... data to create a EmployeeTaxInfo
     *   }
     * })
     * 
     */
    create<T extends EmployeeTaxInfoCreateArgs>(args: SelectSubset<T, EmployeeTaxInfoCreateArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmployeeTaxInfos.
     * @param {EmployeeTaxInfoCreateManyArgs} args - Arguments to create many EmployeeTaxInfos.
     * @example
     * // Create many EmployeeTaxInfos
     * const employeeTaxInfo = await prisma.employeeTaxInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeTaxInfoCreateManyArgs>(args?: SelectSubset<T, EmployeeTaxInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmployeeTaxInfos and returns the data saved in the database.
     * @param {EmployeeTaxInfoCreateManyAndReturnArgs} args - Arguments to create many EmployeeTaxInfos.
     * @example
     * // Create many EmployeeTaxInfos
     * const employeeTaxInfo = await prisma.employeeTaxInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmployeeTaxInfos and only return the `id`
     * const employeeTaxInfoWithIdOnly = await prisma.employeeTaxInfo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeTaxInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeTaxInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EmployeeTaxInfo.
     * @param {EmployeeTaxInfoDeleteArgs} args - Arguments to delete one EmployeeTaxInfo.
     * @example
     * // Delete one EmployeeTaxInfo
     * const EmployeeTaxInfo = await prisma.employeeTaxInfo.delete({
     *   where: {
     *     // ... filter to delete one EmployeeTaxInfo
     *   }
     * })
     * 
     */
    delete<T extends EmployeeTaxInfoDeleteArgs>(args: SelectSubset<T, EmployeeTaxInfoDeleteArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmployeeTaxInfo.
     * @param {EmployeeTaxInfoUpdateArgs} args - Arguments to update one EmployeeTaxInfo.
     * @example
     * // Update one EmployeeTaxInfo
     * const employeeTaxInfo = await prisma.employeeTaxInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeTaxInfoUpdateArgs>(args: SelectSubset<T, EmployeeTaxInfoUpdateArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmployeeTaxInfos.
     * @param {EmployeeTaxInfoDeleteManyArgs} args - Arguments to filter EmployeeTaxInfos to delete.
     * @example
     * // Delete a few EmployeeTaxInfos
     * const { count } = await prisma.employeeTaxInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeTaxInfoDeleteManyArgs>(args?: SelectSubset<T, EmployeeTaxInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeTaxInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTaxInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeTaxInfos
     * const employeeTaxInfo = await prisma.employeeTaxInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeTaxInfoUpdateManyArgs>(args: SelectSubset<T, EmployeeTaxInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeTaxInfo.
     * @param {EmployeeTaxInfoUpsertArgs} args - Arguments to update or create a EmployeeTaxInfo.
     * @example
     * // Update or create a EmployeeTaxInfo
     * const employeeTaxInfo = await prisma.employeeTaxInfo.upsert({
     *   create: {
     *     // ... data to create a EmployeeTaxInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeTaxInfo we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeTaxInfoUpsertArgs>(args: SelectSubset<T, EmployeeTaxInfoUpsertArgs<ExtArgs>>): Prisma__EmployeeTaxInfoClient<$Result.GetResult<Prisma.$EmployeeTaxInfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmployeeTaxInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTaxInfoCountArgs} args - Arguments to filter EmployeeTaxInfos to count.
     * @example
     * // Count the number of EmployeeTaxInfos
     * const count = await prisma.employeeTaxInfo.count({
     *   where: {
     *     // ... the filter for the EmployeeTaxInfos we want to count
     *   }
     * })
    **/
    count<T extends EmployeeTaxInfoCountArgs>(
      args?: Subset<T, EmployeeTaxInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeTaxInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeTaxInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTaxInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeTaxInfoAggregateArgs>(args: Subset<T, EmployeeTaxInfoAggregateArgs>): Prisma.PrismaPromise<GetEmployeeTaxInfoAggregateType<T>>

    /**
     * Group by EmployeeTaxInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeTaxInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeTaxInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeTaxInfoGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeTaxInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeTaxInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeTaxInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployeeTaxInfo model
   */
  readonly fields: EmployeeTaxInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployeeTaxInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeTaxInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployeeTaxInfo model
   */ 
  interface EmployeeTaxInfoFieldRefs {
    readonly id: FieldRef<"EmployeeTaxInfo", 'String'>
    readonly employeeId: FieldRef<"EmployeeTaxInfo", 'String'>
    readonly taxYear: FieldRef<"EmployeeTaxInfo", 'Int'>
    readonly filingStatus: FieldRef<"EmployeeTaxInfo", 'String'>
    readonly dependents: FieldRef<"EmployeeTaxInfo", 'Int'>
    readonly exemptions: FieldRef<"EmployeeTaxInfo", 'Int'>
    readonly federalExemptions: FieldRef<"EmployeeTaxInfo", 'Int'>
    readonly stateExemptions: FieldRef<"EmployeeTaxInfo", 'Int'>
    readonly additionalWithholding: FieldRef<"EmployeeTaxInfo", 'Float'>
    readonly ssn: FieldRef<"EmployeeTaxInfo", 'String'>
    readonly taxId: FieldRef<"EmployeeTaxInfo", 'String'>
    readonly ytdGrossPay: FieldRef<"EmployeeTaxInfo", 'Float'>
    readonly ytdFederalTax: FieldRef<"EmployeeTaxInfo", 'Float'>
    readonly ytdStateTax: FieldRef<"EmployeeTaxInfo", 'Float'>
    readonly ytdSocialSecurity: FieldRef<"EmployeeTaxInfo", 'Float'>
    readonly ytdMedicare: FieldRef<"EmployeeTaxInfo", 'Float'>
    readonly ytdNetPay: FieldRef<"EmployeeTaxInfo", 'Float'>
    readonly createdAt: FieldRef<"EmployeeTaxInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"EmployeeTaxInfo", 'DateTime'>
    readonly createdById: FieldRef<"EmployeeTaxInfo", 'String'>
    readonly updatedById: FieldRef<"EmployeeTaxInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmployeeTaxInfo findUnique
   */
  export type EmployeeTaxInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * Filter, which EmployeeTaxInfo to fetch.
     */
    where: EmployeeTaxInfoWhereUniqueInput
  }

  /**
   * EmployeeTaxInfo findUniqueOrThrow
   */
  export type EmployeeTaxInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * Filter, which EmployeeTaxInfo to fetch.
     */
    where: EmployeeTaxInfoWhereUniqueInput
  }

  /**
   * EmployeeTaxInfo findFirst
   */
  export type EmployeeTaxInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * Filter, which EmployeeTaxInfo to fetch.
     */
    where?: EmployeeTaxInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTaxInfos to fetch.
     */
    orderBy?: EmployeeTaxInfoOrderByWithRelationInput | EmployeeTaxInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTaxInfos.
     */
    cursor?: EmployeeTaxInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTaxInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTaxInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTaxInfos.
     */
    distinct?: EmployeeTaxInfoScalarFieldEnum | EmployeeTaxInfoScalarFieldEnum[]
  }

  /**
   * EmployeeTaxInfo findFirstOrThrow
   */
  export type EmployeeTaxInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * Filter, which EmployeeTaxInfo to fetch.
     */
    where?: EmployeeTaxInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTaxInfos to fetch.
     */
    orderBy?: EmployeeTaxInfoOrderByWithRelationInput | EmployeeTaxInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployeeTaxInfos.
     */
    cursor?: EmployeeTaxInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTaxInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTaxInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployeeTaxInfos.
     */
    distinct?: EmployeeTaxInfoScalarFieldEnum | EmployeeTaxInfoScalarFieldEnum[]
  }

  /**
   * EmployeeTaxInfo findMany
   */
  export type EmployeeTaxInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * Filter, which EmployeeTaxInfos to fetch.
     */
    where?: EmployeeTaxInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployeeTaxInfos to fetch.
     */
    orderBy?: EmployeeTaxInfoOrderByWithRelationInput | EmployeeTaxInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployeeTaxInfos.
     */
    cursor?: EmployeeTaxInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployeeTaxInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployeeTaxInfos.
     */
    skip?: number
    distinct?: EmployeeTaxInfoScalarFieldEnum | EmployeeTaxInfoScalarFieldEnum[]
  }

  /**
   * EmployeeTaxInfo create
   */
  export type EmployeeTaxInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * The data needed to create a EmployeeTaxInfo.
     */
    data: XOR<EmployeeTaxInfoCreateInput, EmployeeTaxInfoUncheckedCreateInput>
  }

  /**
   * EmployeeTaxInfo createMany
   */
  export type EmployeeTaxInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployeeTaxInfos.
     */
    data: EmployeeTaxInfoCreateManyInput | EmployeeTaxInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeTaxInfo createManyAndReturn
   */
  export type EmployeeTaxInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EmployeeTaxInfos.
     */
    data: EmployeeTaxInfoCreateManyInput | EmployeeTaxInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployeeTaxInfo update
   */
  export type EmployeeTaxInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * The data needed to update a EmployeeTaxInfo.
     */
    data: XOR<EmployeeTaxInfoUpdateInput, EmployeeTaxInfoUncheckedUpdateInput>
    /**
     * Choose, which EmployeeTaxInfo to update.
     */
    where: EmployeeTaxInfoWhereUniqueInput
  }

  /**
   * EmployeeTaxInfo updateMany
   */
  export type EmployeeTaxInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployeeTaxInfos.
     */
    data: XOR<EmployeeTaxInfoUpdateManyMutationInput, EmployeeTaxInfoUncheckedUpdateManyInput>
    /**
     * Filter which EmployeeTaxInfos to update
     */
    where?: EmployeeTaxInfoWhereInput
  }

  /**
   * EmployeeTaxInfo upsert
   */
  export type EmployeeTaxInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * The filter to search for the EmployeeTaxInfo to update in case it exists.
     */
    where: EmployeeTaxInfoWhereUniqueInput
    /**
     * In case the EmployeeTaxInfo found by the `where` argument doesn't exist, create a new EmployeeTaxInfo with this data.
     */
    create: XOR<EmployeeTaxInfoCreateInput, EmployeeTaxInfoUncheckedCreateInput>
    /**
     * In case the EmployeeTaxInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeTaxInfoUpdateInput, EmployeeTaxInfoUncheckedUpdateInput>
  }

  /**
   * EmployeeTaxInfo delete
   */
  export type EmployeeTaxInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
    /**
     * Filter which EmployeeTaxInfo to delete.
     */
    where: EmployeeTaxInfoWhereUniqueInput
  }

  /**
   * EmployeeTaxInfo deleteMany
   */
  export type EmployeeTaxInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployeeTaxInfos to delete
     */
    where?: EmployeeTaxInfoWhereInput
  }

  /**
   * EmployeeTaxInfo without action
   */
  export type EmployeeTaxInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeTaxInfo
     */
    select?: EmployeeTaxInfoSelect<ExtArgs> | null
  }


  /**
   * Model PayrollProcessingLog
   */

  export type AggregatePayrollProcessingLog = {
    _count: PayrollProcessingLogCountAggregateOutputType | null
    _avg: PayrollProcessingLogAvgAggregateOutputType | null
    _sum: PayrollProcessingLogSumAggregateOutputType | null
    _min: PayrollProcessingLogMinAggregateOutputType | null
    _max: PayrollProcessingLogMaxAggregateOutputType | null
  }

  export type PayrollProcessingLogAvgAggregateOutputType = {
    duration: number | null
    employeesProcessed: number | null
    successCount: number | null
    errorCount: number | null
    warningCount: number | null
  }

  export type PayrollProcessingLogSumAggregateOutputType = {
    duration: number | null
    employeesProcessed: number | null
    successCount: number | null
    errorCount: number | null
    warningCount: number | null
  }

  export type PayrollProcessingLogMinAggregateOutputType = {
    id: string | null
    payrollPeriodId: string | null
    processType: $Enums.ProcessType | null
    status: $Enums.ProcessingStatus | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    employeesProcessed: number | null
    successCount: number | null
    errorCount: number | null
    warningCount: number | null
    processedBy: string | null
    createdAt: Date | null
  }

  export type PayrollProcessingLogMaxAggregateOutputType = {
    id: string | null
    payrollPeriodId: string | null
    processType: $Enums.ProcessType | null
    status: $Enums.ProcessingStatus | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    employeesProcessed: number | null
    successCount: number | null
    errorCount: number | null
    warningCount: number | null
    processedBy: string | null
    createdAt: Date | null
  }

  export type PayrollProcessingLogCountAggregateOutputType = {
    id: number
    payrollPeriodId: number
    processType: number
    status: number
    startTime: number
    endTime: number
    duration: number
    employeesProcessed: number
    successCount: number
    errorCount: number
    warningCount: number
    processedBy: number
    processingDetails: number
    errors: number
    warnings: number
    createdAt: number
    _all: number
  }


  export type PayrollProcessingLogAvgAggregateInputType = {
    duration?: true
    employeesProcessed?: true
    successCount?: true
    errorCount?: true
    warningCount?: true
  }

  export type PayrollProcessingLogSumAggregateInputType = {
    duration?: true
    employeesProcessed?: true
    successCount?: true
    errorCount?: true
    warningCount?: true
  }

  export type PayrollProcessingLogMinAggregateInputType = {
    id?: true
    payrollPeriodId?: true
    processType?: true
    status?: true
    startTime?: true
    endTime?: true
    duration?: true
    employeesProcessed?: true
    successCount?: true
    errorCount?: true
    warningCount?: true
    processedBy?: true
    createdAt?: true
  }

  export type PayrollProcessingLogMaxAggregateInputType = {
    id?: true
    payrollPeriodId?: true
    processType?: true
    status?: true
    startTime?: true
    endTime?: true
    duration?: true
    employeesProcessed?: true
    successCount?: true
    errorCount?: true
    warningCount?: true
    processedBy?: true
    createdAt?: true
  }

  export type PayrollProcessingLogCountAggregateInputType = {
    id?: true
    payrollPeriodId?: true
    processType?: true
    status?: true
    startTime?: true
    endTime?: true
    duration?: true
    employeesProcessed?: true
    successCount?: true
    errorCount?: true
    warningCount?: true
    processedBy?: true
    processingDetails?: true
    errors?: true
    warnings?: true
    createdAt?: true
    _all?: true
  }

  export type PayrollProcessingLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollProcessingLog to aggregate.
     */
    where?: PayrollProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollProcessingLogs to fetch.
     */
    orderBy?: PayrollProcessingLogOrderByWithRelationInput | PayrollProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayrollProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayrollProcessingLogs
    **/
    _count?: true | PayrollProcessingLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollProcessingLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollProcessingLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollProcessingLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollProcessingLogMaxAggregateInputType
  }

  export type GetPayrollProcessingLogAggregateType<T extends PayrollProcessingLogAggregateArgs> = {
        [P in keyof T & keyof AggregatePayrollProcessingLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayrollProcessingLog[P]>
      : GetScalarType<T[P], AggregatePayrollProcessingLog[P]>
  }




  export type PayrollProcessingLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayrollProcessingLogWhereInput
    orderBy?: PayrollProcessingLogOrderByWithAggregationInput | PayrollProcessingLogOrderByWithAggregationInput[]
    by: PayrollProcessingLogScalarFieldEnum[] | PayrollProcessingLogScalarFieldEnum
    having?: PayrollProcessingLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollProcessingLogCountAggregateInputType | true
    _avg?: PayrollProcessingLogAvgAggregateInputType
    _sum?: PayrollProcessingLogSumAggregateInputType
    _min?: PayrollProcessingLogMinAggregateInputType
    _max?: PayrollProcessingLogMaxAggregateInputType
  }

  export type PayrollProcessingLogGroupByOutputType = {
    id: string
    payrollPeriodId: string | null
    processType: $Enums.ProcessType
    status: $Enums.ProcessingStatus
    startTime: Date
    endTime: Date | null
    duration: number | null
    employeesProcessed: number
    successCount: number
    errorCount: number
    warningCount: number
    processedBy: string | null
    processingDetails: JsonValue | null
    errors: JsonValue | null
    warnings: JsonValue | null
    createdAt: Date
    _count: PayrollProcessingLogCountAggregateOutputType | null
    _avg: PayrollProcessingLogAvgAggregateOutputType | null
    _sum: PayrollProcessingLogSumAggregateOutputType | null
    _min: PayrollProcessingLogMinAggregateOutputType | null
    _max: PayrollProcessingLogMaxAggregateOutputType | null
  }

  type GetPayrollProcessingLogGroupByPayload<T extends PayrollProcessingLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollProcessingLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollProcessingLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollProcessingLogGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollProcessingLogGroupByOutputType[P]>
        }
      >
    >


  export type PayrollProcessingLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payrollPeriodId?: boolean
    processType?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    employeesProcessed?: boolean
    successCount?: boolean
    errorCount?: boolean
    warningCount?: boolean
    processedBy?: boolean
    processingDetails?: boolean
    errors?: boolean
    warnings?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["payrollProcessingLog"]>

  export type PayrollProcessingLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payrollPeriodId?: boolean
    processType?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    employeesProcessed?: boolean
    successCount?: boolean
    errorCount?: boolean
    warningCount?: boolean
    processedBy?: boolean
    processingDetails?: boolean
    errors?: boolean
    warnings?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["payrollProcessingLog"]>

  export type PayrollProcessingLogSelectScalar = {
    id?: boolean
    payrollPeriodId?: boolean
    processType?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    employeesProcessed?: boolean
    successCount?: boolean
    errorCount?: boolean
    warningCount?: boolean
    processedBy?: boolean
    processingDetails?: boolean
    errors?: boolean
    warnings?: boolean
    createdAt?: boolean
  }


  export type $PayrollProcessingLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayrollProcessingLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      payrollPeriodId: string | null
      processType: $Enums.ProcessType
      status: $Enums.ProcessingStatus
      startTime: Date
      endTime: Date | null
      duration: number | null
      employeesProcessed: number
      successCount: number
      errorCount: number
      warningCount: number
      processedBy: string | null
      processingDetails: Prisma.JsonValue | null
      errors: Prisma.JsonValue | null
      warnings: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["payrollProcessingLog"]>
    composites: {}
  }

  type PayrollProcessingLogGetPayload<S extends boolean | null | undefined | PayrollProcessingLogDefaultArgs> = $Result.GetResult<Prisma.$PayrollProcessingLogPayload, S>

  type PayrollProcessingLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PayrollProcessingLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollProcessingLogCountAggregateInputType | true
    }

  export interface PayrollProcessingLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayrollProcessingLog'], meta: { name: 'PayrollProcessingLog' } }
    /**
     * Find zero or one PayrollProcessingLog that matches the filter.
     * @param {PayrollProcessingLogFindUniqueArgs} args - Arguments to find a PayrollProcessingLog
     * @example
     * // Get one PayrollProcessingLog
     * const payrollProcessingLog = await prisma.payrollProcessingLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayrollProcessingLogFindUniqueArgs>(args: SelectSubset<T, PayrollProcessingLogFindUniqueArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PayrollProcessingLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PayrollProcessingLogFindUniqueOrThrowArgs} args - Arguments to find a PayrollProcessingLog
     * @example
     * // Get one PayrollProcessingLog
     * const payrollProcessingLog = await prisma.payrollProcessingLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayrollProcessingLogFindUniqueOrThrowArgs>(args: SelectSubset<T, PayrollProcessingLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PayrollProcessingLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollProcessingLogFindFirstArgs} args - Arguments to find a PayrollProcessingLog
     * @example
     * // Get one PayrollProcessingLog
     * const payrollProcessingLog = await prisma.payrollProcessingLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayrollProcessingLogFindFirstArgs>(args?: SelectSubset<T, PayrollProcessingLogFindFirstArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PayrollProcessingLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollProcessingLogFindFirstOrThrowArgs} args - Arguments to find a PayrollProcessingLog
     * @example
     * // Get one PayrollProcessingLog
     * const payrollProcessingLog = await prisma.payrollProcessingLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayrollProcessingLogFindFirstOrThrowArgs>(args?: SelectSubset<T, PayrollProcessingLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PayrollProcessingLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollProcessingLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayrollProcessingLogs
     * const payrollProcessingLogs = await prisma.payrollProcessingLog.findMany()
     * 
     * // Get first 10 PayrollProcessingLogs
     * const payrollProcessingLogs = await prisma.payrollProcessingLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollProcessingLogWithIdOnly = await prisma.payrollProcessingLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayrollProcessingLogFindManyArgs>(args?: SelectSubset<T, PayrollProcessingLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PayrollProcessingLog.
     * @param {PayrollProcessingLogCreateArgs} args - Arguments to create a PayrollProcessingLog.
     * @example
     * // Create one PayrollProcessingLog
     * const PayrollProcessingLog = await prisma.payrollProcessingLog.create({
     *   data: {
     *     // ... data to create a PayrollProcessingLog
     *   }
     * })
     * 
     */
    create<T extends PayrollProcessingLogCreateArgs>(args: SelectSubset<T, PayrollProcessingLogCreateArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PayrollProcessingLogs.
     * @param {PayrollProcessingLogCreateManyArgs} args - Arguments to create many PayrollProcessingLogs.
     * @example
     * // Create many PayrollProcessingLogs
     * const payrollProcessingLog = await prisma.payrollProcessingLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayrollProcessingLogCreateManyArgs>(args?: SelectSubset<T, PayrollProcessingLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayrollProcessingLogs and returns the data saved in the database.
     * @param {PayrollProcessingLogCreateManyAndReturnArgs} args - Arguments to create many PayrollProcessingLogs.
     * @example
     * // Create many PayrollProcessingLogs
     * const payrollProcessingLog = await prisma.payrollProcessingLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayrollProcessingLogs and only return the `id`
     * const payrollProcessingLogWithIdOnly = await prisma.payrollProcessingLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayrollProcessingLogCreateManyAndReturnArgs>(args?: SelectSubset<T, PayrollProcessingLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PayrollProcessingLog.
     * @param {PayrollProcessingLogDeleteArgs} args - Arguments to delete one PayrollProcessingLog.
     * @example
     * // Delete one PayrollProcessingLog
     * const PayrollProcessingLog = await prisma.payrollProcessingLog.delete({
     *   where: {
     *     // ... filter to delete one PayrollProcessingLog
     *   }
     * })
     * 
     */
    delete<T extends PayrollProcessingLogDeleteArgs>(args: SelectSubset<T, PayrollProcessingLogDeleteArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PayrollProcessingLog.
     * @param {PayrollProcessingLogUpdateArgs} args - Arguments to update one PayrollProcessingLog.
     * @example
     * // Update one PayrollProcessingLog
     * const payrollProcessingLog = await prisma.payrollProcessingLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayrollProcessingLogUpdateArgs>(args: SelectSubset<T, PayrollProcessingLogUpdateArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PayrollProcessingLogs.
     * @param {PayrollProcessingLogDeleteManyArgs} args - Arguments to filter PayrollProcessingLogs to delete.
     * @example
     * // Delete a few PayrollProcessingLogs
     * const { count } = await prisma.payrollProcessingLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayrollProcessingLogDeleteManyArgs>(args?: SelectSubset<T, PayrollProcessingLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayrollProcessingLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollProcessingLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayrollProcessingLogs
     * const payrollProcessingLog = await prisma.payrollProcessingLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayrollProcessingLogUpdateManyArgs>(args: SelectSubset<T, PayrollProcessingLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PayrollProcessingLog.
     * @param {PayrollProcessingLogUpsertArgs} args - Arguments to update or create a PayrollProcessingLog.
     * @example
     * // Update or create a PayrollProcessingLog
     * const payrollProcessingLog = await prisma.payrollProcessingLog.upsert({
     *   create: {
     *     // ... data to create a PayrollProcessingLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayrollProcessingLog we want to update
     *   }
     * })
     */
    upsert<T extends PayrollProcessingLogUpsertArgs>(args: SelectSubset<T, PayrollProcessingLogUpsertArgs<ExtArgs>>): Prisma__PayrollProcessingLogClient<$Result.GetResult<Prisma.$PayrollProcessingLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PayrollProcessingLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollProcessingLogCountArgs} args - Arguments to filter PayrollProcessingLogs to count.
     * @example
     * // Count the number of PayrollProcessingLogs
     * const count = await prisma.payrollProcessingLog.count({
     *   where: {
     *     // ... the filter for the PayrollProcessingLogs we want to count
     *   }
     * })
    **/
    count<T extends PayrollProcessingLogCountArgs>(
      args?: Subset<T, PayrollProcessingLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollProcessingLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayrollProcessingLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollProcessingLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollProcessingLogAggregateArgs>(args: Subset<T, PayrollProcessingLogAggregateArgs>): Prisma.PrismaPromise<GetPayrollProcessingLogAggregateType<T>>

    /**
     * Group by PayrollProcessingLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollProcessingLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayrollProcessingLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayrollProcessingLogGroupByArgs['orderBy'] }
        : { orderBy?: PayrollProcessingLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayrollProcessingLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollProcessingLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayrollProcessingLog model
   */
  readonly fields: PayrollProcessingLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayrollProcessingLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayrollProcessingLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayrollProcessingLog model
   */ 
  interface PayrollProcessingLogFieldRefs {
    readonly id: FieldRef<"PayrollProcessingLog", 'String'>
    readonly payrollPeriodId: FieldRef<"PayrollProcessingLog", 'String'>
    readonly processType: FieldRef<"PayrollProcessingLog", 'ProcessType'>
    readonly status: FieldRef<"PayrollProcessingLog", 'ProcessingStatus'>
    readonly startTime: FieldRef<"PayrollProcessingLog", 'DateTime'>
    readonly endTime: FieldRef<"PayrollProcessingLog", 'DateTime'>
    readonly duration: FieldRef<"PayrollProcessingLog", 'Int'>
    readonly employeesProcessed: FieldRef<"PayrollProcessingLog", 'Int'>
    readonly successCount: FieldRef<"PayrollProcessingLog", 'Int'>
    readonly errorCount: FieldRef<"PayrollProcessingLog", 'Int'>
    readonly warningCount: FieldRef<"PayrollProcessingLog", 'Int'>
    readonly processedBy: FieldRef<"PayrollProcessingLog", 'String'>
    readonly processingDetails: FieldRef<"PayrollProcessingLog", 'Json'>
    readonly errors: FieldRef<"PayrollProcessingLog", 'Json'>
    readonly warnings: FieldRef<"PayrollProcessingLog", 'Json'>
    readonly createdAt: FieldRef<"PayrollProcessingLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PayrollProcessingLog findUnique
   */
  export type PayrollProcessingLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * Filter, which PayrollProcessingLog to fetch.
     */
    where: PayrollProcessingLogWhereUniqueInput
  }

  /**
   * PayrollProcessingLog findUniqueOrThrow
   */
  export type PayrollProcessingLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * Filter, which PayrollProcessingLog to fetch.
     */
    where: PayrollProcessingLogWhereUniqueInput
  }

  /**
   * PayrollProcessingLog findFirst
   */
  export type PayrollProcessingLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * Filter, which PayrollProcessingLog to fetch.
     */
    where?: PayrollProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollProcessingLogs to fetch.
     */
    orderBy?: PayrollProcessingLogOrderByWithRelationInput | PayrollProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollProcessingLogs.
     */
    cursor?: PayrollProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollProcessingLogs.
     */
    distinct?: PayrollProcessingLogScalarFieldEnum | PayrollProcessingLogScalarFieldEnum[]
  }

  /**
   * PayrollProcessingLog findFirstOrThrow
   */
  export type PayrollProcessingLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * Filter, which PayrollProcessingLog to fetch.
     */
    where?: PayrollProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollProcessingLogs to fetch.
     */
    orderBy?: PayrollProcessingLogOrderByWithRelationInput | PayrollProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayrollProcessingLogs.
     */
    cursor?: PayrollProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollProcessingLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayrollProcessingLogs.
     */
    distinct?: PayrollProcessingLogScalarFieldEnum | PayrollProcessingLogScalarFieldEnum[]
  }

  /**
   * PayrollProcessingLog findMany
   */
  export type PayrollProcessingLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * Filter, which PayrollProcessingLogs to fetch.
     */
    where?: PayrollProcessingLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayrollProcessingLogs to fetch.
     */
    orderBy?: PayrollProcessingLogOrderByWithRelationInput | PayrollProcessingLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayrollProcessingLogs.
     */
    cursor?: PayrollProcessingLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayrollProcessingLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayrollProcessingLogs.
     */
    skip?: number
    distinct?: PayrollProcessingLogScalarFieldEnum | PayrollProcessingLogScalarFieldEnum[]
  }

  /**
   * PayrollProcessingLog create
   */
  export type PayrollProcessingLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * The data needed to create a PayrollProcessingLog.
     */
    data: XOR<PayrollProcessingLogCreateInput, PayrollProcessingLogUncheckedCreateInput>
  }

  /**
   * PayrollProcessingLog createMany
   */
  export type PayrollProcessingLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayrollProcessingLogs.
     */
    data: PayrollProcessingLogCreateManyInput | PayrollProcessingLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollProcessingLog createManyAndReturn
   */
  export type PayrollProcessingLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PayrollProcessingLogs.
     */
    data: PayrollProcessingLogCreateManyInput | PayrollProcessingLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayrollProcessingLog update
   */
  export type PayrollProcessingLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * The data needed to update a PayrollProcessingLog.
     */
    data: XOR<PayrollProcessingLogUpdateInput, PayrollProcessingLogUncheckedUpdateInput>
    /**
     * Choose, which PayrollProcessingLog to update.
     */
    where: PayrollProcessingLogWhereUniqueInput
  }

  /**
   * PayrollProcessingLog updateMany
   */
  export type PayrollProcessingLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayrollProcessingLogs.
     */
    data: XOR<PayrollProcessingLogUpdateManyMutationInput, PayrollProcessingLogUncheckedUpdateManyInput>
    /**
     * Filter which PayrollProcessingLogs to update
     */
    where?: PayrollProcessingLogWhereInput
  }

  /**
   * PayrollProcessingLog upsert
   */
  export type PayrollProcessingLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * The filter to search for the PayrollProcessingLog to update in case it exists.
     */
    where: PayrollProcessingLogWhereUniqueInput
    /**
     * In case the PayrollProcessingLog found by the `where` argument doesn't exist, create a new PayrollProcessingLog with this data.
     */
    create: XOR<PayrollProcessingLogCreateInput, PayrollProcessingLogUncheckedCreateInput>
    /**
     * In case the PayrollProcessingLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayrollProcessingLogUpdateInput, PayrollProcessingLogUncheckedUpdateInput>
  }

  /**
   * PayrollProcessingLog delete
   */
  export type PayrollProcessingLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
    /**
     * Filter which PayrollProcessingLog to delete.
     */
    where: PayrollProcessingLogWhereUniqueInput
  }

  /**
   * PayrollProcessingLog deleteMany
   */
  export type PayrollProcessingLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayrollProcessingLogs to delete
     */
    where?: PayrollProcessingLogWhereInput
  }

  /**
   * PayrollProcessingLog without action
   */
  export type PayrollProcessingLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayrollProcessingLog
     */
    select?: PayrollProcessingLogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PayrollPeriodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    payDate: 'payDate',
    status: 'status',
    totalEmployees: 'totalEmployees',
    totalGrossPay: 'totalGrossPay',
    totalDeductions: 'totalDeductions',
    totalNetPay: 'totalNetPay',
    currency: 'currency',
    processingNotes: 'processingNotes',
    approvedBy: 'approvedBy',
    approvedDate: 'approvedDate',
    closedBy: 'closedBy',
    closedDate: 'closedDate',
    isRecurring: 'isRecurring',
    frequency: 'frequency',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PayrollPeriodScalarFieldEnum = (typeof PayrollPeriodScalarFieldEnum)[keyof typeof PayrollPeriodScalarFieldEnum]


  export const PaySlipScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    payrollPeriodId: 'payrollPeriodId',
    employeeIdNumber: 'employeeIdNumber',
    fullName: 'fullName',
    designation: 'designation',
    department: 'department',
    bankAccount: 'bankAccount',
    payPeriodStart: 'payPeriodStart',
    payPeriodEnd: 'payPeriodEnd',
    payDate: 'payDate',
    workingDays: 'workingDays',
    actualWorkingDays: 'actualWorkingDays',
    baseSalary: 'baseSalary',
    hourlyRate: 'hourlyRate',
    hoursWorked: 'hoursWorked',
    overtimeHours: 'overtimeHours',
    overtimeRate: 'overtimeRate',
    overtimePay: 'overtimePay',
    earnings: 'earnings',
    totalEarnings: 'totalEarnings',
    deductions: 'deductions',
    totalDeductions: 'totalDeductions',
    taxableIncome: 'taxableIncome',
    incomeTax: 'incomeTax',
    socialSecurityTax: 'socialSecurityTax',
    medicareTax: 'medicareTax',
    stateTax: 'stateTax',
    localTax: 'localTax',
    totalTaxes: 'totalTaxes',
    grossPay: 'grossPay',
    netPay: 'netPay',
    currency: 'currency',
    status: 'status',
    paymentMethod: 'paymentMethod',
    paymentReference: 'paymentReference',
    paymentDate: 'paymentDate',
    isVoid: 'isVoid',
    voidReason: 'voidReason',
    voidedBy: 'voidedBy',
    voidedDate: 'voidedDate',
    generatedBy: 'generatedBy',
    approvedBy: 'approvedBy',
    approvedDate: 'approvedDate',
    notes: 'notes',
    attachments: 'attachments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PaySlipScalarFieldEnum = (typeof PaySlipScalarFieldEnum)[keyof typeof PaySlipScalarFieldEnum]


  export const SalaryHistoryScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    effectiveDate: 'effectiveDate',
    endDate: 'endDate',
    baseSalary: 'baseSalary',
    currency: 'currency',
    salaryGrade: 'salaryGrade',
    payFrequency: 'payFrequency',
    allowances: 'allowances',
    benefits: 'benefits',
    changeReason: 'changeReason',
    changeType: 'changeType',
    previousSalary: 'previousSalary',
    salaryIncrease: 'salaryIncrease',
    percentageIncrease: 'percentageIncrease',
    approvedBy: 'approvedBy',
    approvedDate: 'approvedDate',
    status: 'status',
    comments: 'comments',
    supportingDocs: 'supportingDocs',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type SalaryHistoryScalarFieldEnum = (typeof SalaryHistoryScalarFieldEnum)[keyof typeof SalaryHistoryScalarFieldEnum]


  export const PayrollStatsScalarFieldEnum: {
    id: 'id',
    period: 'period',
    periodType: 'periodType',
    year: 'year',
    month: 'month',
    quarter: 'quarter',
    totalEmployees: 'totalEmployees',
    activeEmployees: 'activeEmployees',
    newHires: 'newHires',
    terminations: 'terminations',
    totalGrossPay: 'totalGrossPay',
    totalNetPay: 'totalNetPay',
    totalDeductions: 'totalDeductions',
    totalTaxes: 'totalTaxes',
    totalBenefits: 'totalBenefits',
    averageSalary: 'averageSalary',
    medianSalary: 'medianSalary',
    currency: 'currency',
    departmentBreakdown: 'departmentBreakdown',
    payrollPeriods: 'payrollPeriods',
    processingTime: 'processingTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PayrollStatsScalarFieldEnum = (typeof PayrollStatsScalarFieldEnum)[keyof typeof PayrollStatsScalarFieldEnum]


  export const PayrollConfigScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    configType: 'configType',
    configValue: 'configValue',
    isActive: 'isActive',
    effectiveFrom: 'effectiveFrom',
    effectiveTo: 'effectiveTo',
    applicableCountries: 'applicableCountries',
    applicableStates: 'applicableStates',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PayrollConfigScalarFieldEnum = (typeof PayrollConfigScalarFieldEnum)[keyof typeof PayrollConfigScalarFieldEnum]


  export const EmployeeTaxInfoScalarFieldEnum: {
    id: 'id',
    employeeId: 'employeeId',
    taxYear: 'taxYear',
    filingStatus: 'filingStatus',
    dependents: 'dependents',
    exemptions: 'exemptions',
    federalExemptions: 'federalExemptions',
    stateExemptions: 'stateExemptions',
    additionalWithholding: 'additionalWithholding',
    ssn: 'ssn',
    taxId: 'taxId',
    ytdGrossPay: 'ytdGrossPay',
    ytdFederalTax: 'ytdFederalTax',
    ytdStateTax: 'ytdStateTax',
    ytdSocialSecurity: 'ytdSocialSecurity',
    ytdMedicare: 'ytdMedicare',
    ytdNetPay: 'ytdNetPay',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type EmployeeTaxInfoScalarFieldEnum = (typeof EmployeeTaxInfoScalarFieldEnum)[keyof typeof EmployeeTaxInfoScalarFieldEnum]


  export const PayrollProcessingLogScalarFieldEnum: {
    id: 'id',
    payrollPeriodId: 'payrollPeriodId',
    processType: 'processType',
    status: 'status',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    employeesProcessed: 'employeesProcessed',
    successCount: 'successCount',
    errorCount: 'errorCount',
    warningCount: 'warningCount',
    processedBy: 'processedBy',
    processingDetails: 'processingDetails',
    errors: 'errors',
    warnings: 'warnings',
    createdAt: 'createdAt'
  };

  export type PayrollProcessingLogScalarFieldEnum = (typeof PayrollProcessingLogScalarFieldEnum)[keyof typeof PayrollProcessingLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PayrollStatus'
   */
  export type EnumPayrollStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PayrollStatus'>
    


  /**
   * Reference to a field of type 'PayrollStatus[]'
   */
  export type ListEnumPayrollStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PayrollStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'PayrollFrequency'
   */
  export type EnumPayrollFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PayrollFrequency'>
    


  /**
   * Reference to a field of type 'PayrollFrequency[]'
   */
  export type ListEnumPayrollFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PayrollFrequency[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'PayslipStatus'
   */
  export type EnumPayslipStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PayslipStatus'>
    


  /**
   * Reference to a field of type 'PayslipStatus[]'
   */
  export type ListEnumPayslipStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PayslipStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'SalaryChangeType'
   */
  export type EnumSalaryChangeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SalaryChangeType'>
    


  /**
   * Reference to a field of type 'SalaryChangeType[]'
   */
  export type ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SalaryChangeType[]'>
    


  /**
   * Reference to a field of type 'SalaryStatus'
   */
  export type EnumSalaryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SalaryStatus'>
    


  /**
   * Reference to a field of type 'SalaryStatus[]'
   */
  export type ListEnumSalaryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SalaryStatus[]'>
    


  /**
   * Reference to a field of type 'PeriodType'
   */
  export type EnumPeriodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PeriodType'>
    


  /**
   * Reference to a field of type 'PeriodType[]'
   */
  export type ListEnumPeriodTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PeriodType[]'>
    


  /**
   * Reference to a field of type 'ProcessType'
   */
  export type EnumProcessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessType'>
    


  /**
   * Reference to a field of type 'ProcessType[]'
   */
  export type ListEnumProcessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessType[]'>
    


  /**
   * Reference to a field of type 'ProcessingStatus'
   */
  export type EnumProcessingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessingStatus'>
    


  /**
   * Reference to a field of type 'ProcessingStatus[]'
   */
  export type ListEnumProcessingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProcessingStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type PayrollPeriodWhereInput = {
    AND?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    OR?: PayrollPeriodWhereInput[]
    NOT?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    id?: StringFilter<"PayrollPeriod"> | string
    name?: StringFilter<"PayrollPeriod"> | string
    description?: StringNullableFilter<"PayrollPeriod"> | string | null
    startDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    endDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    payDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    status?: EnumPayrollStatusFilter<"PayrollPeriod"> | $Enums.PayrollStatus
    totalEmployees?: IntFilter<"PayrollPeriod"> | number
    totalGrossPay?: FloatFilter<"PayrollPeriod"> | number
    totalDeductions?: FloatFilter<"PayrollPeriod"> | number
    totalNetPay?: FloatFilter<"PayrollPeriod"> | number
    currency?: StringFilter<"PayrollPeriod"> | string
    processingNotes?: StringNullableFilter<"PayrollPeriod"> | string | null
    approvedBy?: StringNullableFilter<"PayrollPeriod"> | string | null
    approvedDate?: DateTimeNullableFilter<"PayrollPeriod"> | Date | string | null
    closedBy?: StringNullableFilter<"PayrollPeriod"> | string | null
    closedDate?: DateTimeNullableFilter<"PayrollPeriod"> | Date | string | null
    isRecurring?: BoolFilter<"PayrollPeriod"> | boolean
    frequency?: EnumPayrollFrequencyFilter<"PayrollPeriod"> | $Enums.PayrollFrequency
    createdAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    createdById?: StringNullableFilter<"PayrollPeriod"> | string | null
    updatedById?: StringNullableFilter<"PayrollPeriod"> | string | null
    payslips?: PaySlipListRelationFilter
  }

  export type PayrollPeriodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    totalEmployees?: SortOrder
    totalGrossPay?: SortOrder
    totalDeductions?: SortOrder
    totalNetPay?: SortOrder
    currency?: SortOrder
    processingNotes?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedDate?: SortOrderInput | SortOrder
    closedBy?: SortOrderInput | SortOrder
    closedDate?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    frequency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    payslips?: PaySlipOrderByRelationAggregateInput
  }

  export type PayrollPeriodWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    startDate_endDate?: PayrollPeriodStartDateEndDateCompoundUniqueInput
    AND?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    OR?: PayrollPeriodWhereInput[]
    NOT?: PayrollPeriodWhereInput | PayrollPeriodWhereInput[]
    name?: StringFilter<"PayrollPeriod"> | string
    description?: StringNullableFilter<"PayrollPeriod"> | string | null
    startDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    endDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    payDate?: DateTimeFilter<"PayrollPeriod"> | Date | string
    status?: EnumPayrollStatusFilter<"PayrollPeriod"> | $Enums.PayrollStatus
    totalEmployees?: IntFilter<"PayrollPeriod"> | number
    totalGrossPay?: FloatFilter<"PayrollPeriod"> | number
    totalDeductions?: FloatFilter<"PayrollPeriod"> | number
    totalNetPay?: FloatFilter<"PayrollPeriod"> | number
    currency?: StringFilter<"PayrollPeriod"> | string
    processingNotes?: StringNullableFilter<"PayrollPeriod"> | string | null
    approvedBy?: StringNullableFilter<"PayrollPeriod"> | string | null
    approvedDate?: DateTimeNullableFilter<"PayrollPeriod"> | Date | string | null
    closedBy?: StringNullableFilter<"PayrollPeriod"> | string | null
    closedDate?: DateTimeNullableFilter<"PayrollPeriod"> | Date | string | null
    isRecurring?: BoolFilter<"PayrollPeriod"> | boolean
    frequency?: EnumPayrollFrequencyFilter<"PayrollPeriod"> | $Enums.PayrollFrequency
    createdAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollPeriod"> | Date | string
    createdById?: StringNullableFilter<"PayrollPeriod"> | string | null
    updatedById?: StringNullableFilter<"PayrollPeriod"> | string | null
    payslips?: PaySlipListRelationFilter
  }, "id" | "startDate_endDate">

  export type PayrollPeriodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    totalEmployees?: SortOrder
    totalGrossPay?: SortOrder
    totalDeductions?: SortOrder
    totalNetPay?: SortOrder
    currency?: SortOrder
    processingNotes?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedDate?: SortOrderInput | SortOrder
    closedBy?: SortOrderInput | SortOrder
    closedDate?: SortOrderInput | SortOrder
    isRecurring?: SortOrder
    frequency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: PayrollPeriodCountOrderByAggregateInput
    _avg?: PayrollPeriodAvgOrderByAggregateInput
    _max?: PayrollPeriodMaxOrderByAggregateInput
    _min?: PayrollPeriodMinOrderByAggregateInput
    _sum?: PayrollPeriodSumOrderByAggregateInput
  }

  export type PayrollPeriodScalarWhereWithAggregatesInput = {
    AND?: PayrollPeriodScalarWhereWithAggregatesInput | PayrollPeriodScalarWhereWithAggregatesInput[]
    OR?: PayrollPeriodScalarWhereWithAggregatesInput[]
    NOT?: PayrollPeriodScalarWhereWithAggregatesInput | PayrollPeriodScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollPeriod"> | string
    name?: StringWithAggregatesFilter<"PayrollPeriod"> | string
    description?: StringNullableWithAggregatesFilter<"PayrollPeriod"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    payDate?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    status?: EnumPayrollStatusWithAggregatesFilter<"PayrollPeriod"> | $Enums.PayrollStatus
    totalEmployees?: IntWithAggregatesFilter<"PayrollPeriod"> | number
    totalGrossPay?: FloatWithAggregatesFilter<"PayrollPeriod"> | number
    totalDeductions?: FloatWithAggregatesFilter<"PayrollPeriod"> | number
    totalNetPay?: FloatWithAggregatesFilter<"PayrollPeriod"> | number
    currency?: StringWithAggregatesFilter<"PayrollPeriod"> | string
    processingNotes?: StringNullableWithAggregatesFilter<"PayrollPeriod"> | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"PayrollPeriod"> | string | null
    approvedDate?: DateTimeNullableWithAggregatesFilter<"PayrollPeriod"> | Date | string | null
    closedBy?: StringNullableWithAggregatesFilter<"PayrollPeriod"> | string | null
    closedDate?: DateTimeNullableWithAggregatesFilter<"PayrollPeriod"> | Date | string | null
    isRecurring?: BoolWithAggregatesFilter<"PayrollPeriod"> | boolean
    frequency?: EnumPayrollFrequencyWithAggregatesFilter<"PayrollPeriod"> | $Enums.PayrollFrequency
    createdAt?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayrollPeriod"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"PayrollPeriod"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"PayrollPeriod"> | string | null
  }

  export type PaySlipWhereInput = {
    AND?: PaySlipWhereInput | PaySlipWhereInput[]
    OR?: PaySlipWhereInput[]
    NOT?: PaySlipWhereInput | PaySlipWhereInput[]
    id?: StringFilter<"PaySlip"> | string
    employeeId?: StringFilter<"PaySlip"> | string
    payrollPeriodId?: StringFilter<"PaySlip"> | string
    employeeIdNumber?: StringFilter<"PaySlip"> | string
    fullName?: StringFilter<"PaySlip"> | string
    designation?: StringFilter<"PaySlip"> | string
    department?: StringFilter<"PaySlip"> | string
    bankAccount?: StringNullableFilter<"PaySlip"> | string | null
    payPeriodStart?: DateTimeFilter<"PaySlip"> | Date | string
    payPeriodEnd?: DateTimeFilter<"PaySlip"> | Date | string
    payDate?: DateTimeFilter<"PaySlip"> | Date | string
    workingDays?: IntFilter<"PaySlip"> | number
    actualWorkingDays?: FloatFilter<"PaySlip"> | number
    baseSalary?: FloatFilter<"PaySlip"> | number
    hourlyRate?: FloatNullableFilter<"PaySlip"> | number | null
    hoursWorked?: FloatNullableFilter<"PaySlip"> | number | null
    overtimeHours?: FloatFilter<"PaySlip"> | number
    overtimeRate?: FloatNullableFilter<"PaySlip"> | number | null
    overtimePay?: FloatFilter<"PaySlip"> | number
    earnings?: JsonFilter<"PaySlip">
    totalEarnings?: FloatFilter<"PaySlip"> | number
    deductions?: JsonFilter<"PaySlip">
    totalDeductions?: FloatFilter<"PaySlip"> | number
    taxableIncome?: FloatFilter<"PaySlip"> | number
    incomeTax?: FloatFilter<"PaySlip"> | number
    socialSecurityTax?: FloatFilter<"PaySlip"> | number
    medicareTax?: FloatFilter<"PaySlip"> | number
    stateTax?: FloatFilter<"PaySlip"> | number
    localTax?: FloatFilter<"PaySlip"> | number
    totalTaxes?: FloatFilter<"PaySlip"> | number
    grossPay?: FloatFilter<"PaySlip"> | number
    netPay?: FloatFilter<"PaySlip"> | number
    currency?: StringFilter<"PaySlip"> | string
    status?: EnumPayslipStatusFilter<"PaySlip"> | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFilter<"PaySlip"> | $Enums.PaymentMethod
    paymentReference?: StringNullableFilter<"PaySlip"> | string | null
    paymentDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    isVoid?: BoolFilter<"PaySlip"> | boolean
    voidReason?: StringNullableFilter<"PaySlip"> | string | null
    voidedBy?: StringNullableFilter<"PaySlip"> | string | null
    voidedDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    generatedBy?: StringNullableFilter<"PaySlip"> | string | null
    approvedBy?: StringNullableFilter<"PaySlip"> | string | null
    approvedDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    notes?: StringNullableFilter<"PaySlip"> | string | null
    attachments?: StringNullableListFilter<"PaySlip">
    createdAt?: DateTimeFilter<"PaySlip"> | Date | string
    updatedAt?: DateTimeFilter<"PaySlip"> | Date | string
    createdById?: StringNullableFilter<"PaySlip"> | string | null
    updatedById?: StringNullableFilter<"PaySlip"> | string | null
    payrollPeriod?: XOR<PayrollPeriodRelationFilter, PayrollPeriodWhereInput>
  }

  export type PaySlipOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    employeeIdNumber?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    bankAccount?: SortOrderInput | SortOrder
    payPeriodStart?: SortOrder
    payPeriodEnd?: SortOrder
    payDate?: SortOrder
    workingDays?: SortOrder
    actualWorkingDays?: SortOrder
    baseSalary?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    hoursWorked?: SortOrderInput | SortOrder
    overtimeHours?: SortOrder
    overtimeRate?: SortOrderInput | SortOrder
    overtimePay?: SortOrder
    earnings?: SortOrder
    totalEarnings?: SortOrder
    deductions?: SortOrder
    totalDeductions?: SortOrder
    taxableIncome?: SortOrder
    incomeTax?: SortOrder
    socialSecurityTax?: SortOrder
    medicareTax?: SortOrder
    stateTax?: SortOrder
    localTax?: SortOrder
    totalTaxes?: SortOrder
    grossPay?: SortOrder
    netPay?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentReference?: SortOrderInput | SortOrder
    paymentDate?: SortOrderInput | SortOrder
    isVoid?: SortOrder
    voidReason?: SortOrderInput | SortOrder
    voidedBy?: SortOrderInput | SortOrder
    voidedDate?: SortOrderInput | SortOrder
    generatedBy?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    payrollPeriod?: PayrollPeriodOrderByWithRelationInput
  }

  export type PaySlipWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeId_payrollPeriodId?: PaySlipEmployeeIdPayrollPeriodIdCompoundUniqueInput
    AND?: PaySlipWhereInput | PaySlipWhereInput[]
    OR?: PaySlipWhereInput[]
    NOT?: PaySlipWhereInput | PaySlipWhereInput[]
    employeeId?: StringFilter<"PaySlip"> | string
    payrollPeriodId?: StringFilter<"PaySlip"> | string
    employeeIdNumber?: StringFilter<"PaySlip"> | string
    fullName?: StringFilter<"PaySlip"> | string
    designation?: StringFilter<"PaySlip"> | string
    department?: StringFilter<"PaySlip"> | string
    bankAccount?: StringNullableFilter<"PaySlip"> | string | null
    payPeriodStart?: DateTimeFilter<"PaySlip"> | Date | string
    payPeriodEnd?: DateTimeFilter<"PaySlip"> | Date | string
    payDate?: DateTimeFilter<"PaySlip"> | Date | string
    workingDays?: IntFilter<"PaySlip"> | number
    actualWorkingDays?: FloatFilter<"PaySlip"> | number
    baseSalary?: FloatFilter<"PaySlip"> | number
    hourlyRate?: FloatNullableFilter<"PaySlip"> | number | null
    hoursWorked?: FloatNullableFilter<"PaySlip"> | number | null
    overtimeHours?: FloatFilter<"PaySlip"> | number
    overtimeRate?: FloatNullableFilter<"PaySlip"> | number | null
    overtimePay?: FloatFilter<"PaySlip"> | number
    earnings?: JsonFilter<"PaySlip">
    totalEarnings?: FloatFilter<"PaySlip"> | number
    deductions?: JsonFilter<"PaySlip">
    totalDeductions?: FloatFilter<"PaySlip"> | number
    taxableIncome?: FloatFilter<"PaySlip"> | number
    incomeTax?: FloatFilter<"PaySlip"> | number
    socialSecurityTax?: FloatFilter<"PaySlip"> | number
    medicareTax?: FloatFilter<"PaySlip"> | number
    stateTax?: FloatFilter<"PaySlip"> | number
    localTax?: FloatFilter<"PaySlip"> | number
    totalTaxes?: FloatFilter<"PaySlip"> | number
    grossPay?: FloatFilter<"PaySlip"> | number
    netPay?: FloatFilter<"PaySlip"> | number
    currency?: StringFilter<"PaySlip"> | string
    status?: EnumPayslipStatusFilter<"PaySlip"> | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFilter<"PaySlip"> | $Enums.PaymentMethod
    paymentReference?: StringNullableFilter<"PaySlip"> | string | null
    paymentDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    isVoid?: BoolFilter<"PaySlip"> | boolean
    voidReason?: StringNullableFilter<"PaySlip"> | string | null
    voidedBy?: StringNullableFilter<"PaySlip"> | string | null
    voidedDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    generatedBy?: StringNullableFilter<"PaySlip"> | string | null
    approvedBy?: StringNullableFilter<"PaySlip"> | string | null
    approvedDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    notes?: StringNullableFilter<"PaySlip"> | string | null
    attachments?: StringNullableListFilter<"PaySlip">
    createdAt?: DateTimeFilter<"PaySlip"> | Date | string
    updatedAt?: DateTimeFilter<"PaySlip"> | Date | string
    createdById?: StringNullableFilter<"PaySlip"> | string | null
    updatedById?: StringNullableFilter<"PaySlip"> | string | null
    payrollPeriod?: XOR<PayrollPeriodRelationFilter, PayrollPeriodWhereInput>
  }, "id" | "employeeId_payrollPeriodId">

  export type PaySlipOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    employeeIdNumber?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    bankAccount?: SortOrderInput | SortOrder
    payPeriodStart?: SortOrder
    payPeriodEnd?: SortOrder
    payDate?: SortOrder
    workingDays?: SortOrder
    actualWorkingDays?: SortOrder
    baseSalary?: SortOrder
    hourlyRate?: SortOrderInput | SortOrder
    hoursWorked?: SortOrderInput | SortOrder
    overtimeHours?: SortOrder
    overtimeRate?: SortOrderInput | SortOrder
    overtimePay?: SortOrder
    earnings?: SortOrder
    totalEarnings?: SortOrder
    deductions?: SortOrder
    totalDeductions?: SortOrder
    taxableIncome?: SortOrder
    incomeTax?: SortOrder
    socialSecurityTax?: SortOrder
    medicareTax?: SortOrder
    stateTax?: SortOrder
    localTax?: SortOrder
    totalTaxes?: SortOrder
    grossPay?: SortOrder
    netPay?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentReference?: SortOrderInput | SortOrder
    paymentDate?: SortOrderInput | SortOrder
    isVoid?: SortOrder
    voidReason?: SortOrderInput | SortOrder
    voidedBy?: SortOrderInput | SortOrder
    voidedDate?: SortOrderInput | SortOrder
    generatedBy?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: PaySlipCountOrderByAggregateInput
    _avg?: PaySlipAvgOrderByAggregateInput
    _max?: PaySlipMaxOrderByAggregateInput
    _min?: PaySlipMinOrderByAggregateInput
    _sum?: PaySlipSumOrderByAggregateInput
  }

  export type PaySlipScalarWhereWithAggregatesInput = {
    AND?: PaySlipScalarWhereWithAggregatesInput | PaySlipScalarWhereWithAggregatesInput[]
    OR?: PaySlipScalarWhereWithAggregatesInput[]
    NOT?: PaySlipScalarWhereWithAggregatesInput | PaySlipScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaySlip"> | string
    employeeId?: StringWithAggregatesFilter<"PaySlip"> | string
    payrollPeriodId?: StringWithAggregatesFilter<"PaySlip"> | string
    employeeIdNumber?: StringWithAggregatesFilter<"PaySlip"> | string
    fullName?: StringWithAggregatesFilter<"PaySlip"> | string
    designation?: StringWithAggregatesFilter<"PaySlip"> | string
    department?: StringWithAggregatesFilter<"PaySlip"> | string
    bankAccount?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    payPeriodStart?: DateTimeWithAggregatesFilter<"PaySlip"> | Date | string
    payPeriodEnd?: DateTimeWithAggregatesFilter<"PaySlip"> | Date | string
    payDate?: DateTimeWithAggregatesFilter<"PaySlip"> | Date | string
    workingDays?: IntWithAggregatesFilter<"PaySlip"> | number
    actualWorkingDays?: FloatWithAggregatesFilter<"PaySlip"> | number
    baseSalary?: FloatWithAggregatesFilter<"PaySlip"> | number
    hourlyRate?: FloatNullableWithAggregatesFilter<"PaySlip"> | number | null
    hoursWorked?: FloatNullableWithAggregatesFilter<"PaySlip"> | number | null
    overtimeHours?: FloatWithAggregatesFilter<"PaySlip"> | number
    overtimeRate?: FloatNullableWithAggregatesFilter<"PaySlip"> | number | null
    overtimePay?: FloatWithAggregatesFilter<"PaySlip"> | number
    earnings?: JsonWithAggregatesFilter<"PaySlip">
    totalEarnings?: FloatWithAggregatesFilter<"PaySlip"> | number
    deductions?: JsonWithAggregatesFilter<"PaySlip">
    totalDeductions?: FloatWithAggregatesFilter<"PaySlip"> | number
    taxableIncome?: FloatWithAggregatesFilter<"PaySlip"> | number
    incomeTax?: FloatWithAggregatesFilter<"PaySlip"> | number
    socialSecurityTax?: FloatWithAggregatesFilter<"PaySlip"> | number
    medicareTax?: FloatWithAggregatesFilter<"PaySlip"> | number
    stateTax?: FloatWithAggregatesFilter<"PaySlip"> | number
    localTax?: FloatWithAggregatesFilter<"PaySlip"> | number
    totalTaxes?: FloatWithAggregatesFilter<"PaySlip"> | number
    grossPay?: FloatWithAggregatesFilter<"PaySlip"> | number
    netPay?: FloatWithAggregatesFilter<"PaySlip"> | number
    currency?: StringWithAggregatesFilter<"PaySlip"> | string
    status?: EnumPayslipStatusWithAggregatesFilter<"PaySlip"> | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"PaySlip"> | $Enums.PaymentMethod
    paymentReference?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    paymentDate?: DateTimeNullableWithAggregatesFilter<"PaySlip"> | Date | string | null
    isVoid?: BoolWithAggregatesFilter<"PaySlip"> | boolean
    voidReason?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    voidedBy?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    voidedDate?: DateTimeNullableWithAggregatesFilter<"PaySlip"> | Date | string | null
    generatedBy?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    approvedBy?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    approvedDate?: DateTimeNullableWithAggregatesFilter<"PaySlip"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    attachments?: StringNullableListFilter<"PaySlip">
    createdAt?: DateTimeWithAggregatesFilter<"PaySlip"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaySlip"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"PaySlip"> | string | null
  }

  export type SalaryHistoryWhereInput = {
    AND?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    OR?: SalaryHistoryWhereInput[]
    NOT?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    id?: StringFilter<"SalaryHistory"> | string
    employeeId?: StringFilter<"SalaryHistory"> | string
    effectiveDate?: DateTimeFilter<"SalaryHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"SalaryHistory"> | Date | string | null
    baseSalary?: FloatFilter<"SalaryHistory"> | number
    currency?: StringFilter<"SalaryHistory"> | string
    salaryGrade?: StringNullableFilter<"SalaryHistory"> | string | null
    payFrequency?: EnumPayrollFrequencyFilter<"SalaryHistory"> | $Enums.PayrollFrequency
    allowances?: JsonNullableFilter<"SalaryHistory">
    benefits?: JsonNullableFilter<"SalaryHistory">
    changeReason?: StringFilter<"SalaryHistory"> | string
    changeType?: EnumSalaryChangeTypeFilter<"SalaryHistory"> | $Enums.SalaryChangeType
    previousSalary?: FloatNullableFilter<"SalaryHistory"> | number | null
    salaryIncrease?: FloatNullableFilter<"SalaryHistory"> | number | null
    percentageIncrease?: FloatNullableFilter<"SalaryHistory"> | number | null
    approvedBy?: StringNullableFilter<"SalaryHistory"> | string | null
    approvedDate?: DateTimeNullableFilter<"SalaryHistory"> | Date | string | null
    status?: EnumSalaryStatusFilter<"SalaryHistory"> | $Enums.SalaryStatus
    comments?: StringNullableFilter<"SalaryHistory"> | string | null
    supportingDocs?: StringNullableListFilter<"SalaryHistory">
    createdAt?: DateTimeFilter<"SalaryHistory"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryHistory"> | Date | string
    createdById?: StringNullableFilter<"SalaryHistory"> | string | null
    updatedById?: StringNullableFilter<"SalaryHistory"> | string | null
  }

  export type SalaryHistoryOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    effectiveDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    baseSalary?: SortOrder
    currency?: SortOrder
    salaryGrade?: SortOrderInput | SortOrder
    payFrequency?: SortOrder
    allowances?: SortOrderInput | SortOrder
    benefits?: SortOrderInput | SortOrder
    changeReason?: SortOrder
    changeType?: SortOrder
    previousSalary?: SortOrderInput | SortOrder
    salaryIncrease?: SortOrderInput | SortOrder
    percentageIncrease?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedDate?: SortOrderInput | SortOrder
    status?: SortOrder
    comments?: SortOrderInput | SortOrder
    supportingDocs?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
  }

  export type SalaryHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    OR?: SalaryHistoryWhereInput[]
    NOT?: SalaryHistoryWhereInput | SalaryHistoryWhereInput[]
    employeeId?: StringFilter<"SalaryHistory"> | string
    effectiveDate?: DateTimeFilter<"SalaryHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"SalaryHistory"> | Date | string | null
    baseSalary?: FloatFilter<"SalaryHistory"> | number
    currency?: StringFilter<"SalaryHistory"> | string
    salaryGrade?: StringNullableFilter<"SalaryHistory"> | string | null
    payFrequency?: EnumPayrollFrequencyFilter<"SalaryHistory"> | $Enums.PayrollFrequency
    allowances?: JsonNullableFilter<"SalaryHistory">
    benefits?: JsonNullableFilter<"SalaryHistory">
    changeReason?: StringFilter<"SalaryHistory"> | string
    changeType?: EnumSalaryChangeTypeFilter<"SalaryHistory"> | $Enums.SalaryChangeType
    previousSalary?: FloatNullableFilter<"SalaryHistory"> | number | null
    salaryIncrease?: FloatNullableFilter<"SalaryHistory"> | number | null
    percentageIncrease?: FloatNullableFilter<"SalaryHistory"> | number | null
    approvedBy?: StringNullableFilter<"SalaryHistory"> | string | null
    approvedDate?: DateTimeNullableFilter<"SalaryHistory"> | Date | string | null
    status?: EnumSalaryStatusFilter<"SalaryHistory"> | $Enums.SalaryStatus
    comments?: StringNullableFilter<"SalaryHistory"> | string | null
    supportingDocs?: StringNullableListFilter<"SalaryHistory">
    createdAt?: DateTimeFilter<"SalaryHistory"> | Date | string
    updatedAt?: DateTimeFilter<"SalaryHistory"> | Date | string
    createdById?: StringNullableFilter<"SalaryHistory"> | string | null
    updatedById?: StringNullableFilter<"SalaryHistory"> | string | null
  }, "id">

  export type SalaryHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    effectiveDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    baseSalary?: SortOrder
    currency?: SortOrder
    salaryGrade?: SortOrderInput | SortOrder
    payFrequency?: SortOrder
    allowances?: SortOrderInput | SortOrder
    benefits?: SortOrderInput | SortOrder
    changeReason?: SortOrder
    changeType?: SortOrder
    previousSalary?: SortOrderInput | SortOrder
    salaryIncrease?: SortOrderInput | SortOrder
    percentageIncrease?: SortOrderInput | SortOrder
    approvedBy?: SortOrderInput | SortOrder
    approvedDate?: SortOrderInput | SortOrder
    status?: SortOrder
    comments?: SortOrderInput | SortOrder
    supportingDocs?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: SalaryHistoryCountOrderByAggregateInput
    _avg?: SalaryHistoryAvgOrderByAggregateInput
    _max?: SalaryHistoryMaxOrderByAggregateInput
    _min?: SalaryHistoryMinOrderByAggregateInput
    _sum?: SalaryHistorySumOrderByAggregateInput
  }

  export type SalaryHistoryScalarWhereWithAggregatesInput = {
    AND?: SalaryHistoryScalarWhereWithAggregatesInput | SalaryHistoryScalarWhereWithAggregatesInput[]
    OR?: SalaryHistoryScalarWhereWithAggregatesInput[]
    NOT?: SalaryHistoryScalarWhereWithAggregatesInput | SalaryHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SalaryHistory"> | string
    employeeId?: StringWithAggregatesFilter<"SalaryHistory"> | string
    effectiveDate?: DateTimeWithAggregatesFilter<"SalaryHistory"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"SalaryHistory"> | Date | string | null
    baseSalary?: FloatWithAggregatesFilter<"SalaryHistory"> | number
    currency?: StringWithAggregatesFilter<"SalaryHistory"> | string
    salaryGrade?: StringNullableWithAggregatesFilter<"SalaryHistory"> | string | null
    payFrequency?: EnumPayrollFrequencyWithAggregatesFilter<"SalaryHistory"> | $Enums.PayrollFrequency
    allowances?: JsonNullableWithAggregatesFilter<"SalaryHistory">
    benefits?: JsonNullableWithAggregatesFilter<"SalaryHistory">
    changeReason?: StringWithAggregatesFilter<"SalaryHistory"> | string
    changeType?: EnumSalaryChangeTypeWithAggregatesFilter<"SalaryHistory"> | $Enums.SalaryChangeType
    previousSalary?: FloatNullableWithAggregatesFilter<"SalaryHistory"> | number | null
    salaryIncrease?: FloatNullableWithAggregatesFilter<"SalaryHistory"> | number | null
    percentageIncrease?: FloatNullableWithAggregatesFilter<"SalaryHistory"> | number | null
    approvedBy?: StringNullableWithAggregatesFilter<"SalaryHistory"> | string | null
    approvedDate?: DateTimeNullableWithAggregatesFilter<"SalaryHistory"> | Date | string | null
    status?: EnumSalaryStatusWithAggregatesFilter<"SalaryHistory"> | $Enums.SalaryStatus
    comments?: StringNullableWithAggregatesFilter<"SalaryHistory"> | string | null
    supportingDocs?: StringNullableListFilter<"SalaryHistory">
    createdAt?: DateTimeWithAggregatesFilter<"SalaryHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SalaryHistory"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"SalaryHistory"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"SalaryHistory"> | string | null
  }

  export type PayrollStatsWhereInput = {
    AND?: PayrollStatsWhereInput | PayrollStatsWhereInput[]
    OR?: PayrollStatsWhereInput[]
    NOT?: PayrollStatsWhereInput | PayrollStatsWhereInput[]
    id?: StringFilter<"PayrollStats"> | string
    period?: StringFilter<"PayrollStats"> | string
    periodType?: EnumPeriodTypeFilter<"PayrollStats"> | $Enums.PeriodType
    year?: IntFilter<"PayrollStats"> | number
    month?: IntNullableFilter<"PayrollStats"> | number | null
    quarter?: IntNullableFilter<"PayrollStats"> | number | null
    totalEmployees?: IntFilter<"PayrollStats"> | number
    activeEmployees?: IntFilter<"PayrollStats"> | number
    newHires?: IntFilter<"PayrollStats"> | number
    terminations?: IntFilter<"PayrollStats"> | number
    totalGrossPay?: FloatFilter<"PayrollStats"> | number
    totalNetPay?: FloatFilter<"PayrollStats"> | number
    totalDeductions?: FloatFilter<"PayrollStats"> | number
    totalTaxes?: FloatFilter<"PayrollStats"> | number
    totalBenefits?: FloatFilter<"PayrollStats"> | number
    averageSalary?: FloatFilter<"PayrollStats"> | number
    medianSalary?: FloatFilter<"PayrollStats"> | number
    currency?: StringFilter<"PayrollStats"> | string
    departmentBreakdown?: JsonNullableFilter<"PayrollStats">
    payrollPeriods?: IntFilter<"PayrollStats"> | number
    processingTime?: IntNullableFilter<"PayrollStats"> | number | null
    createdAt?: DateTimeFilter<"PayrollStats"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollStats"> | Date | string
    createdById?: StringNullableFilter<"PayrollStats"> | string | null
    updatedById?: StringNullableFilter<"PayrollStats"> | string | null
  }

  export type PayrollStatsOrderByWithRelationInput = {
    id?: SortOrder
    period?: SortOrder
    periodType?: SortOrder
    year?: SortOrder
    month?: SortOrderInput | SortOrder
    quarter?: SortOrderInput | SortOrder
    totalEmployees?: SortOrder
    activeEmployees?: SortOrder
    newHires?: SortOrder
    terminations?: SortOrder
    totalGrossPay?: SortOrder
    totalNetPay?: SortOrder
    totalDeductions?: SortOrder
    totalTaxes?: SortOrder
    totalBenefits?: SortOrder
    averageSalary?: SortOrder
    medianSalary?: SortOrder
    currency?: SortOrder
    departmentBreakdown?: SortOrderInput | SortOrder
    payrollPeriods?: SortOrder
    processingTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
  }

  export type PayrollStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    period_periodType?: PayrollStatsPeriodPeriodTypeCompoundUniqueInput
    AND?: PayrollStatsWhereInput | PayrollStatsWhereInput[]
    OR?: PayrollStatsWhereInput[]
    NOT?: PayrollStatsWhereInput | PayrollStatsWhereInput[]
    period?: StringFilter<"PayrollStats"> | string
    periodType?: EnumPeriodTypeFilter<"PayrollStats"> | $Enums.PeriodType
    year?: IntFilter<"PayrollStats"> | number
    month?: IntNullableFilter<"PayrollStats"> | number | null
    quarter?: IntNullableFilter<"PayrollStats"> | number | null
    totalEmployees?: IntFilter<"PayrollStats"> | number
    activeEmployees?: IntFilter<"PayrollStats"> | number
    newHires?: IntFilter<"PayrollStats"> | number
    terminations?: IntFilter<"PayrollStats"> | number
    totalGrossPay?: FloatFilter<"PayrollStats"> | number
    totalNetPay?: FloatFilter<"PayrollStats"> | number
    totalDeductions?: FloatFilter<"PayrollStats"> | number
    totalTaxes?: FloatFilter<"PayrollStats"> | number
    totalBenefits?: FloatFilter<"PayrollStats"> | number
    averageSalary?: FloatFilter<"PayrollStats"> | number
    medianSalary?: FloatFilter<"PayrollStats"> | number
    currency?: StringFilter<"PayrollStats"> | string
    departmentBreakdown?: JsonNullableFilter<"PayrollStats">
    payrollPeriods?: IntFilter<"PayrollStats"> | number
    processingTime?: IntNullableFilter<"PayrollStats"> | number | null
    createdAt?: DateTimeFilter<"PayrollStats"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollStats"> | Date | string
    createdById?: StringNullableFilter<"PayrollStats"> | string | null
    updatedById?: StringNullableFilter<"PayrollStats"> | string | null
  }, "id" | "period_periodType">

  export type PayrollStatsOrderByWithAggregationInput = {
    id?: SortOrder
    period?: SortOrder
    periodType?: SortOrder
    year?: SortOrder
    month?: SortOrderInput | SortOrder
    quarter?: SortOrderInput | SortOrder
    totalEmployees?: SortOrder
    activeEmployees?: SortOrder
    newHires?: SortOrder
    terminations?: SortOrder
    totalGrossPay?: SortOrder
    totalNetPay?: SortOrder
    totalDeductions?: SortOrder
    totalTaxes?: SortOrder
    totalBenefits?: SortOrder
    averageSalary?: SortOrder
    medianSalary?: SortOrder
    currency?: SortOrder
    departmentBreakdown?: SortOrderInput | SortOrder
    payrollPeriods?: SortOrder
    processingTime?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: PayrollStatsCountOrderByAggregateInput
    _avg?: PayrollStatsAvgOrderByAggregateInput
    _max?: PayrollStatsMaxOrderByAggregateInput
    _min?: PayrollStatsMinOrderByAggregateInput
    _sum?: PayrollStatsSumOrderByAggregateInput
  }

  export type PayrollStatsScalarWhereWithAggregatesInput = {
    AND?: PayrollStatsScalarWhereWithAggregatesInput | PayrollStatsScalarWhereWithAggregatesInput[]
    OR?: PayrollStatsScalarWhereWithAggregatesInput[]
    NOT?: PayrollStatsScalarWhereWithAggregatesInput | PayrollStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollStats"> | string
    period?: StringWithAggregatesFilter<"PayrollStats"> | string
    periodType?: EnumPeriodTypeWithAggregatesFilter<"PayrollStats"> | $Enums.PeriodType
    year?: IntWithAggregatesFilter<"PayrollStats"> | number
    month?: IntNullableWithAggregatesFilter<"PayrollStats"> | number | null
    quarter?: IntNullableWithAggregatesFilter<"PayrollStats"> | number | null
    totalEmployees?: IntWithAggregatesFilter<"PayrollStats"> | number
    activeEmployees?: IntWithAggregatesFilter<"PayrollStats"> | number
    newHires?: IntWithAggregatesFilter<"PayrollStats"> | number
    terminations?: IntWithAggregatesFilter<"PayrollStats"> | number
    totalGrossPay?: FloatWithAggregatesFilter<"PayrollStats"> | number
    totalNetPay?: FloatWithAggregatesFilter<"PayrollStats"> | number
    totalDeductions?: FloatWithAggregatesFilter<"PayrollStats"> | number
    totalTaxes?: FloatWithAggregatesFilter<"PayrollStats"> | number
    totalBenefits?: FloatWithAggregatesFilter<"PayrollStats"> | number
    averageSalary?: FloatWithAggregatesFilter<"PayrollStats"> | number
    medianSalary?: FloatWithAggregatesFilter<"PayrollStats"> | number
    currency?: StringWithAggregatesFilter<"PayrollStats"> | string
    departmentBreakdown?: JsonNullableWithAggregatesFilter<"PayrollStats">
    payrollPeriods?: IntWithAggregatesFilter<"PayrollStats"> | number
    processingTime?: IntNullableWithAggregatesFilter<"PayrollStats"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PayrollStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayrollStats"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"PayrollStats"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"PayrollStats"> | string | null
  }

  export type PayrollConfigWhereInput = {
    AND?: PayrollConfigWhereInput | PayrollConfigWhereInput[]
    OR?: PayrollConfigWhereInput[]
    NOT?: PayrollConfigWhereInput | PayrollConfigWhereInput[]
    id?: StringFilter<"PayrollConfig"> | string
    name?: StringFilter<"PayrollConfig"> | string
    description?: StringNullableFilter<"PayrollConfig"> | string | null
    configType?: StringFilter<"PayrollConfig"> | string
    configValue?: JsonFilter<"PayrollConfig">
    isActive?: BoolFilter<"PayrollConfig"> | boolean
    effectiveFrom?: DateTimeFilter<"PayrollConfig"> | Date | string
    effectiveTo?: DateTimeNullableFilter<"PayrollConfig"> | Date | string | null
    applicableCountries?: StringNullableListFilter<"PayrollConfig">
    applicableStates?: StringNullableListFilter<"PayrollConfig">
    createdAt?: DateTimeFilter<"PayrollConfig"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollConfig"> | Date | string
    createdById?: StringNullableFilter<"PayrollConfig"> | string | null
    updatedById?: StringNullableFilter<"PayrollConfig"> | string | null
  }

  export type PayrollConfigOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    configType?: SortOrder
    configValue?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrderInput | SortOrder
    applicableCountries?: SortOrder
    applicableStates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
  }

  export type PayrollConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: PayrollConfigWhereInput | PayrollConfigWhereInput[]
    OR?: PayrollConfigWhereInput[]
    NOT?: PayrollConfigWhereInput | PayrollConfigWhereInput[]
    description?: StringNullableFilter<"PayrollConfig"> | string | null
    configType?: StringFilter<"PayrollConfig"> | string
    configValue?: JsonFilter<"PayrollConfig">
    isActive?: BoolFilter<"PayrollConfig"> | boolean
    effectiveFrom?: DateTimeFilter<"PayrollConfig"> | Date | string
    effectiveTo?: DateTimeNullableFilter<"PayrollConfig"> | Date | string | null
    applicableCountries?: StringNullableListFilter<"PayrollConfig">
    applicableStates?: StringNullableListFilter<"PayrollConfig">
    createdAt?: DateTimeFilter<"PayrollConfig"> | Date | string
    updatedAt?: DateTimeFilter<"PayrollConfig"> | Date | string
    createdById?: StringNullableFilter<"PayrollConfig"> | string | null
    updatedById?: StringNullableFilter<"PayrollConfig"> | string | null
  }, "id" | "name">

  export type PayrollConfigOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    configType?: SortOrder
    configValue?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrderInput | SortOrder
    applicableCountries?: SortOrder
    applicableStates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: PayrollConfigCountOrderByAggregateInput
    _max?: PayrollConfigMaxOrderByAggregateInput
    _min?: PayrollConfigMinOrderByAggregateInput
  }

  export type PayrollConfigScalarWhereWithAggregatesInput = {
    AND?: PayrollConfigScalarWhereWithAggregatesInput | PayrollConfigScalarWhereWithAggregatesInput[]
    OR?: PayrollConfigScalarWhereWithAggregatesInput[]
    NOT?: PayrollConfigScalarWhereWithAggregatesInput | PayrollConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollConfig"> | string
    name?: StringWithAggregatesFilter<"PayrollConfig"> | string
    description?: StringNullableWithAggregatesFilter<"PayrollConfig"> | string | null
    configType?: StringWithAggregatesFilter<"PayrollConfig"> | string
    configValue?: JsonWithAggregatesFilter<"PayrollConfig">
    isActive?: BoolWithAggregatesFilter<"PayrollConfig"> | boolean
    effectiveFrom?: DateTimeWithAggregatesFilter<"PayrollConfig"> | Date | string
    effectiveTo?: DateTimeNullableWithAggregatesFilter<"PayrollConfig"> | Date | string | null
    applicableCountries?: StringNullableListFilter<"PayrollConfig">
    applicableStates?: StringNullableListFilter<"PayrollConfig">
    createdAt?: DateTimeWithAggregatesFilter<"PayrollConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayrollConfig"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"PayrollConfig"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"PayrollConfig"> | string | null
  }

  export type EmployeeTaxInfoWhereInput = {
    AND?: EmployeeTaxInfoWhereInput | EmployeeTaxInfoWhereInput[]
    OR?: EmployeeTaxInfoWhereInput[]
    NOT?: EmployeeTaxInfoWhereInput | EmployeeTaxInfoWhereInput[]
    id?: StringFilter<"EmployeeTaxInfo"> | string
    employeeId?: StringFilter<"EmployeeTaxInfo"> | string
    taxYear?: IntFilter<"EmployeeTaxInfo"> | number
    filingStatus?: StringFilter<"EmployeeTaxInfo"> | string
    dependents?: IntFilter<"EmployeeTaxInfo"> | number
    exemptions?: IntFilter<"EmployeeTaxInfo"> | number
    federalExemptions?: IntFilter<"EmployeeTaxInfo"> | number
    stateExemptions?: IntFilter<"EmployeeTaxInfo"> | number
    additionalWithholding?: FloatFilter<"EmployeeTaxInfo"> | number
    ssn?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
    taxId?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
    ytdGrossPay?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdFederalTax?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdStateTax?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdSocialSecurity?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdMedicare?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdNetPay?: FloatFilter<"EmployeeTaxInfo"> | number
    createdAt?: DateTimeFilter<"EmployeeTaxInfo"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeTaxInfo"> | Date | string
    createdById?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
    updatedById?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
  }

  export type EmployeeTaxInfoOrderByWithRelationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    taxYear?: SortOrder
    filingStatus?: SortOrder
    dependents?: SortOrder
    exemptions?: SortOrder
    federalExemptions?: SortOrder
    stateExemptions?: SortOrder
    additionalWithholding?: SortOrder
    ssn?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    ytdGrossPay?: SortOrder
    ytdFederalTax?: SortOrder
    ytdStateTax?: SortOrder
    ytdSocialSecurity?: SortOrder
    ytdMedicare?: SortOrder
    ytdNetPay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
  }

  export type EmployeeTaxInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    employeeId?: string
    AND?: EmployeeTaxInfoWhereInput | EmployeeTaxInfoWhereInput[]
    OR?: EmployeeTaxInfoWhereInput[]
    NOT?: EmployeeTaxInfoWhereInput | EmployeeTaxInfoWhereInput[]
    taxYear?: IntFilter<"EmployeeTaxInfo"> | number
    filingStatus?: StringFilter<"EmployeeTaxInfo"> | string
    dependents?: IntFilter<"EmployeeTaxInfo"> | number
    exemptions?: IntFilter<"EmployeeTaxInfo"> | number
    federalExemptions?: IntFilter<"EmployeeTaxInfo"> | number
    stateExemptions?: IntFilter<"EmployeeTaxInfo"> | number
    additionalWithholding?: FloatFilter<"EmployeeTaxInfo"> | number
    ssn?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
    taxId?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
    ytdGrossPay?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdFederalTax?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdStateTax?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdSocialSecurity?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdMedicare?: FloatFilter<"EmployeeTaxInfo"> | number
    ytdNetPay?: FloatFilter<"EmployeeTaxInfo"> | number
    createdAt?: DateTimeFilter<"EmployeeTaxInfo"> | Date | string
    updatedAt?: DateTimeFilter<"EmployeeTaxInfo"> | Date | string
    createdById?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
    updatedById?: StringNullableFilter<"EmployeeTaxInfo"> | string | null
  }, "id" | "employeeId">

  export type EmployeeTaxInfoOrderByWithAggregationInput = {
    id?: SortOrder
    employeeId?: SortOrder
    taxYear?: SortOrder
    filingStatus?: SortOrder
    dependents?: SortOrder
    exemptions?: SortOrder
    federalExemptions?: SortOrder
    stateExemptions?: SortOrder
    additionalWithholding?: SortOrder
    ssn?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    ytdGrossPay?: SortOrder
    ytdFederalTax?: SortOrder
    ytdStateTax?: SortOrder
    ytdSocialSecurity?: SortOrder
    ytdMedicare?: SortOrder
    ytdNetPay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: EmployeeTaxInfoCountOrderByAggregateInput
    _avg?: EmployeeTaxInfoAvgOrderByAggregateInput
    _max?: EmployeeTaxInfoMaxOrderByAggregateInput
    _min?: EmployeeTaxInfoMinOrderByAggregateInput
    _sum?: EmployeeTaxInfoSumOrderByAggregateInput
  }

  export type EmployeeTaxInfoScalarWhereWithAggregatesInput = {
    AND?: EmployeeTaxInfoScalarWhereWithAggregatesInput | EmployeeTaxInfoScalarWhereWithAggregatesInput[]
    OR?: EmployeeTaxInfoScalarWhereWithAggregatesInput[]
    NOT?: EmployeeTaxInfoScalarWhereWithAggregatesInput | EmployeeTaxInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmployeeTaxInfo"> | string
    employeeId?: StringWithAggregatesFilter<"EmployeeTaxInfo"> | string
    taxYear?: IntWithAggregatesFilter<"EmployeeTaxInfo"> | number
    filingStatus?: StringWithAggregatesFilter<"EmployeeTaxInfo"> | string
    dependents?: IntWithAggregatesFilter<"EmployeeTaxInfo"> | number
    exemptions?: IntWithAggregatesFilter<"EmployeeTaxInfo"> | number
    federalExemptions?: IntWithAggregatesFilter<"EmployeeTaxInfo"> | number
    stateExemptions?: IntWithAggregatesFilter<"EmployeeTaxInfo"> | number
    additionalWithholding?: FloatWithAggregatesFilter<"EmployeeTaxInfo"> | number
    ssn?: StringNullableWithAggregatesFilter<"EmployeeTaxInfo"> | string | null
    taxId?: StringNullableWithAggregatesFilter<"EmployeeTaxInfo"> | string | null
    ytdGrossPay?: FloatWithAggregatesFilter<"EmployeeTaxInfo"> | number
    ytdFederalTax?: FloatWithAggregatesFilter<"EmployeeTaxInfo"> | number
    ytdStateTax?: FloatWithAggregatesFilter<"EmployeeTaxInfo"> | number
    ytdSocialSecurity?: FloatWithAggregatesFilter<"EmployeeTaxInfo"> | number
    ytdMedicare?: FloatWithAggregatesFilter<"EmployeeTaxInfo"> | number
    ytdNetPay?: FloatWithAggregatesFilter<"EmployeeTaxInfo"> | number
    createdAt?: DateTimeWithAggregatesFilter<"EmployeeTaxInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmployeeTaxInfo"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"EmployeeTaxInfo"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"EmployeeTaxInfo"> | string | null
  }

  export type PayrollProcessingLogWhereInput = {
    AND?: PayrollProcessingLogWhereInput | PayrollProcessingLogWhereInput[]
    OR?: PayrollProcessingLogWhereInput[]
    NOT?: PayrollProcessingLogWhereInput | PayrollProcessingLogWhereInput[]
    id?: StringFilter<"PayrollProcessingLog"> | string
    payrollPeriodId?: StringNullableFilter<"PayrollProcessingLog"> | string | null
    processType?: EnumProcessTypeFilter<"PayrollProcessingLog"> | $Enums.ProcessType
    status?: EnumProcessingStatusFilter<"PayrollProcessingLog"> | $Enums.ProcessingStatus
    startTime?: DateTimeFilter<"PayrollProcessingLog"> | Date | string
    endTime?: DateTimeNullableFilter<"PayrollProcessingLog"> | Date | string | null
    duration?: IntNullableFilter<"PayrollProcessingLog"> | number | null
    employeesProcessed?: IntFilter<"PayrollProcessingLog"> | number
    successCount?: IntFilter<"PayrollProcessingLog"> | number
    errorCount?: IntFilter<"PayrollProcessingLog"> | number
    warningCount?: IntFilter<"PayrollProcessingLog"> | number
    processedBy?: StringNullableFilter<"PayrollProcessingLog"> | string | null
    processingDetails?: JsonNullableFilter<"PayrollProcessingLog">
    errors?: JsonNullableFilter<"PayrollProcessingLog">
    warnings?: JsonNullableFilter<"PayrollProcessingLog">
    createdAt?: DateTimeFilter<"PayrollProcessingLog"> | Date | string
  }

  export type PayrollProcessingLogOrderByWithRelationInput = {
    id?: SortOrder
    payrollPeriodId?: SortOrderInput | SortOrder
    processType?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    employeesProcessed?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    warningCount?: SortOrder
    processedBy?: SortOrderInput | SortOrder
    processingDetails?: SortOrderInput | SortOrder
    errors?: SortOrderInput | SortOrder
    warnings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
  }

  export type PayrollProcessingLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PayrollProcessingLogWhereInput | PayrollProcessingLogWhereInput[]
    OR?: PayrollProcessingLogWhereInput[]
    NOT?: PayrollProcessingLogWhereInput | PayrollProcessingLogWhereInput[]
    payrollPeriodId?: StringNullableFilter<"PayrollProcessingLog"> | string | null
    processType?: EnumProcessTypeFilter<"PayrollProcessingLog"> | $Enums.ProcessType
    status?: EnumProcessingStatusFilter<"PayrollProcessingLog"> | $Enums.ProcessingStatus
    startTime?: DateTimeFilter<"PayrollProcessingLog"> | Date | string
    endTime?: DateTimeNullableFilter<"PayrollProcessingLog"> | Date | string | null
    duration?: IntNullableFilter<"PayrollProcessingLog"> | number | null
    employeesProcessed?: IntFilter<"PayrollProcessingLog"> | number
    successCount?: IntFilter<"PayrollProcessingLog"> | number
    errorCount?: IntFilter<"PayrollProcessingLog"> | number
    warningCount?: IntFilter<"PayrollProcessingLog"> | number
    processedBy?: StringNullableFilter<"PayrollProcessingLog"> | string | null
    processingDetails?: JsonNullableFilter<"PayrollProcessingLog">
    errors?: JsonNullableFilter<"PayrollProcessingLog">
    warnings?: JsonNullableFilter<"PayrollProcessingLog">
    createdAt?: DateTimeFilter<"PayrollProcessingLog"> | Date | string
  }, "id">

  export type PayrollProcessingLogOrderByWithAggregationInput = {
    id?: SortOrder
    payrollPeriodId?: SortOrderInput | SortOrder
    processType?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    employeesProcessed?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    warningCount?: SortOrder
    processedBy?: SortOrderInput | SortOrder
    processingDetails?: SortOrderInput | SortOrder
    errors?: SortOrderInput | SortOrder
    warnings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PayrollProcessingLogCountOrderByAggregateInput
    _avg?: PayrollProcessingLogAvgOrderByAggregateInput
    _max?: PayrollProcessingLogMaxOrderByAggregateInput
    _min?: PayrollProcessingLogMinOrderByAggregateInput
    _sum?: PayrollProcessingLogSumOrderByAggregateInput
  }

  export type PayrollProcessingLogScalarWhereWithAggregatesInput = {
    AND?: PayrollProcessingLogScalarWhereWithAggregatesInput | PayrollProcessingLogScalarWhereWithAggregatesInput[]
    OR?: PayrollProcessingLogScalarWhereWithAggregatesInput[]
    NOT?: PayrollProcessingLogScalarWhereWithAggregatesInput | PayrollProcessingLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayrollProcessingLog"> | string
    payrollPeriodId?: StringNullableWithAggregatesFilter<"PayrollProcessingLog"> | string | null
    processType?: EnumProcessTypeWithAggregatesFilter<"PayrollProcessingLog"> | $Enums.ProcessType
    status?: EnumProcessingStatusWithAggregatesFilter<"PayrollProcessingLog"> | $Enums.ProcessingStatus
    startTime?: DateTimeWithAggregatesFilter<"PayrollProcessingLog"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"PayrollProcessingLog"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"PayrollProcessingLog"> | number | null
    employeesProcessed?: IntWithAggregatesFilter<"PayrollProcessingLog"> | number
    successCount?: IntWithAggregatesFilter<"PayrollProcessingLog"> | number
    errorCount?: IntWithAggregatesFilter<"PayrollProcessingLog"> | number
    warningCount?: IntWithAggregatesFilter<"PayrollProcessingLog"> | number
    processedBy?: StringNullableWithAggregatesFilter<"PayrollProcessingLog"> | string | null
    processingDetails?: JsonNullableWithAggregatesFilter<"PayrollProcessingLog">
    errors?: JsonNullableWithAggregatesFilter<"PayrollProcessingLog">
    warnings?: JsonNullableWithAggregatesFilter<"PayrollProcessingLog">
    createdAt?: DateTimeWithAggregatesFilter<"PayrollProcessingLog"> | Date | string
  }

  export type PayrollPeriodCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: $Enums.PayrollStatus
    totalEmployees?: number
    totalGrossPay?: number
    totalDeductions?: number
    totalNetPay?: number
    currency?: string
    processingNotes?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    closedBy?: string | null
    closedDate?: Date | string | null
    isRecurring?: boolean
    frequency?: $Enums.PayrollFrequency
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    payslips?: PaySlipCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: $Enums.PayrollStatus
    totalEmployees?: number
    totalGrossPay?: number
    totalDeductions?: number
    totalNetPay?: number
    currency?: string
    processingNotes?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    closedBy?: string | null
    closedDate?: Date | string | null
    isRecurring?: boolean
    frequency?: $Enums.PayrollFrequency
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    payslips?: PaySlipUncheckedCreateNestedManyWithoutPayrollPeriodInput
  }

  export type PayrollPeriodUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayrollStatusFieldUpdateOperationsInput | $Enums.PayrollStatus
    totalEmployees?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    processingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    frequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    payslips?: PaySlipUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayrollStatusFieldUpdateOperationsInput | $Enums.PayrollStatus
    totalEmployees?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    processingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    frequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    payslips?: PaySlipUncheckedUpdateManyWithoutPayrollPeriodNestedInput
  }

  export type PayrollPeriodCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: $Enums.PayrollStatus
    totalEmployees?: number
    totalGrossPay?: number
    totalDeductions?: number
    totalNetPay?: number
    currency?: string
    processingNotes?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    closedBy?: string | null
    closedDate?: Date | string | null
    isRecurring?: boolean
    frequency?: $Enums.PayrollFrequency
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollPeriodUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayrollStatusFieldUpdateOperationsInput | $Enums.PayrollStatus
    totalEmployees?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    processingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    frequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollPeriodUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayrollStatusFieldUpdateOperationsInput | $Enums.PayrollStatus
    totalEmployees?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    processingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    frequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipCreateInput = {
    id?: string
    employeeId: string
    employeeIdNumber: string
    fullName: string
    designation: string
    department: string
    bankAccount?: string | null
    payPeriodStart: Date | string
    payPeriodEnd: Date | string
    payDate: Date | string
    workingDays?: number
    actualWorkingDays?: number
    baseSalary?: number
    hourlyRate?: number | null
    hoursWorked?: number | null
    overtimeHours?: number
    overtimeRate?: number | null
    overtimePay?: number
    earnings: JsonNullValueInput | InputJsonValue
    totalEarnings?: number
    deductions: JsonNullValueInput | InputJsonValue
    totalDeductions?: number
    taxableIncome?: number
    incomeTax?: number
    socialSecurityTax?: number
    medicareTax?: number
    stateTax?: number
    localTax?: number
    totalTaxes?: number
    grossPay?: number
    netPay?: number
    currency?: string
    status?: $Enums.PayslipStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentReference?: string | null
    paymentDate?: Date | string | null
    isVoid?: boolean
    voidReason?: string | null
    voidedBy?: string | null
    voidedDate?: Date | string | null
    generatedBy?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    notes?: string | null
    attachments?: PaySlipCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    payrollPeriod: PayrollPeriodCreateNestedOneWithoutPayslipsInput
  }

  export type PaySlipUncheckedCreateInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    employeeIdNumber: string
    fullName: string
    designation: string
    department: string
    bankAccount?: string | null
    payPeriodStart: Date | string
    payPeriodEnd: Date | string
    payDate: Date | string
    workingDays?: number
    actualWorkingDays?: number
    baseSalary?: number
    hourlyRate?: number | null
    hoursWorked?: number | null
    overtimeHours?: number
    overtimeRate?: number | null
    overtimePay?: number
    earnings: JsonNullValueInput | InputJsonValue
    totalEarnings?: number
    deductions: JsonNullValueInput | InputJsonValue
    totalDeductions?: number
    taxableIncome?: number
    incomeTax?: number
    socialSecurityTax?: number
    medicareTax?: number
    stateTax?: number
    localTax?: number
    totalTaxes?: number
    grossPay?: number
    netPay?: number
    currency?: string
    status?: $Enums.PayslipStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentReference?: string | null
    paymentDate?: Date | string | null
    isVoid?: boolean
    voidReason?: string | null
    voidedBy?: string | null
    voidedDate?: Date | string | null
    generatedBy?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    notes?: string | null
    attachments?: PaySlipCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PaySlipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    employeeIdNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    payPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: IntFieldUpdateOperationsInput | number
    actualWorkingDays?: FloatFieldUpdateOperationsInput | number
    baseSalary?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    hoursWorked?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimeHours?: FloatFieldUpdateOperationsInput | number
    overtimeRate?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimePay?: FloatFieldUpdateOperationsInput | number
    earnings?: JsonNullValueInput | InputJsonValue
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    deductions?: JsonNullValueInput | InputJsonValue
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    taxableIncome?: FloatFieldUpdateOperationsInput | number
    incomeTax?: FloatFieldUpdateOperationsInput | number
    socialSecurityTax?: FloatFieldUpdateOperationsInput | number
    medicareTax?: FloatFieldUpdateOperationsInput | number
    stateTax?: FloatFieldUpdateOperationsInput | number
    localTax?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    grossPay?: FloatFieldUpdateOperationsInput | number
    netPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPayslipStatusFieldUpdateOperationsInput | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentReference?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVoid?: BoolFieldUpdateOperationsInput | boolean
    voidReason?: NullableStringFieldUpdateOperationsInput | string | null
    voidedBy?: NullableStringFieldUpdateOperationsInput | string | null
    voidedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PaySlipUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    payrollPeriod?: PayrollPeriodUpdateOneRequiredWithoutPayslipsNestedInput
  }

  export type PaySlipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    employeeIdNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    payPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: IntFieldUpdateOperationsInput | number
    actualWorkingDays?: FloatFieldUpdateOperationsInput | number
    baseSalary?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    hoursWorked?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimeHours?: FloatFieldUpdateOperationsInput | number
    overtimeRate?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimePay?: FloatFieldUpdateOperationsInput | number
    earnings?: JsonNullValueInput | InputJsonValue
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    deductions?: JsonNullValueInput | InputJsonValue
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    taxableIncome?: FloatFieldUpdateOperationsInput | number
    incomeTax?: FloatFieldUpdateOperationsInput | number
    socialSecurityTax?: FloatFieldUpdateOperationsInput | number
    medicareTax?: FloatFieldUpdateOperationsInput | number
    stateTax?: FloatFieldUpdateOperationsInput | number
    localTax?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    grossPay?: FloatFieldUpdateOperationsInput | number
    netPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPayslipStatusFieldUpdateOperationsInput | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentReference?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVoid?: BoolFieldUpdateOperationsInput | boolean
    voidReason?: NullableStringFieldUpdateOperationsInput | string | null
    voidedBy?: NullableStringFieldUpdateOperationsInput | string | null
    voidedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PaySlipUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipCreateManyInput = {
    id?: string
    employeeId: string
    payrollPeriodId: string
    employeeIdNumber: string
    fullName: string
    designation: string
    department: string
    bankAccount?: string | null
    payPeriodStart: Date | string
    payPeriodEnd: Date | string
    payDate: Date | string
    workingDays?: number
    actualWorkingDays?: number
    baseSalary?: number
    hourlyRate?: number | null
    hoursWorked?: number | null
    overtimeHours?: number
    overtimeRate?: number | null
    overtimePay?: number
    earnings: JsonNullValueInput | InputJsonValue
    totalEarnings?: number
    deductions: JsonNullValueInput | InputJsonValue
    totalDeductions?: number
    taxableIncome?: number
    incomeTax?: number
    socialSecurityTax?: number
    medicareTax?: number
    stateTax?: number
    localTax?: number
    totalTaxes?: number
    grossPay?: number
    netPay?: number
    currency?: string
    status?: $Enums.PayslipStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentReference?: string | null
    paymentDate?: Date | string | null
    isVoid?: boolean
    voidReason?: string | null
    voidedBy?: string | null
    voidedDate?: Date | string | null
    generatedBy?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    notes?: string | null
    attachments?: PaySlipCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PaySlipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    employeeIdNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    payPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: IntFieldUpdateOperationsInput | number
    actualWorkingDays?: FloatFieldUpdateOperationsInput | number
    baseSalary?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    hoursWorked?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimeHours?: FloatFieldUpdateOperationsInput | number
    overtimeRate?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimePay?: FloatFieldUpdateOperationsInput | number
    earnings?: JsonNullValueInput | InputJsonValue
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    deductions?: JsonNullValueInput | InputJsonValue
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    taxableIncome?: FloatFieldUpdateOperationsInput | number
    incomeTax?: FloatFieldUpdateOperationsInput | number
    socialSecurityTax?: FloatFieldUpdateOperationsInput | number
    medicareTax?: FloatFieldUpdateOperationsInput | number
    stateTax?: FloatFieldUpdateOperationsInput | number
    localTax?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    grossPay?: FloatFieldUpdateOperationsInput | number
    netPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPayslipStatusFieldUpdateOperationsInput | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentReference?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVoid?: BoolFieldUpdateOperationsInput | boolean
    voidReason?: NullableStringFieldUpdateOperationsInput | string | null
    voidedBy?: NullableStringFieldUpdateOperationsInput | string | null
    voidedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PaySlipUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: StringFieldUpdateOperationsInput | string
    employeeIdNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    payPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: IntFieldUpdateOperationsInput | number
    actualWorkingDays?: FloatFieldUpdateOperationsInput | number
    baseSalary?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    hoursWorked?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimeHours?: FloatFieldUpdateOperationsInput | number
    overtimeRate?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimePay?: FloatFieldUpdateOperationsInput | number
    earnings?: JsonNullValueInput | InputJsonValue
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    deductions?: JsonNullValueInput | InputJsonValue
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    taxableIncome?: FloatFieldUpdateOperationsInput | number
    incomeTax?: FloatFieldUpdateOperationsInput | number
    socialSecurityTax?: FloatFieldUpdateOperationsInput | number
    medicareTax?: FloatFieldUpdateOperationsInput | number
    stateTax?: FloatFieldUpdateOperationsInput | number
    localTax?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    grossPay?: FloatFieldUpdateOperationsInput | number
    netPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPayslipStatusFieldUpdateOperationsInput | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentReference?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVoid?: BoolFieldUpdateOperationsInput | boolean
    voidReason?: NullableStringFieldUpdateOperationsInput | string | null
    voidedBy?: NullableStringFieldUpdateOperationsInput | string | null
    voidedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PaySlipUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SalaryHistoryCreateInput = {
    id?: string
    employeeId: string
    effectiveDate: Date | string
    endDate?: Date | string | null
    baseSalary: number
    currency?: string
    salaryGrade?: string | null
    payFrequency?: $Enums.PayrollFrequency
    allowances?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    changeReason: string
    changeType: $Enums.SalaryChangeType
    previousSalary?: number | null
    salaryIncrease?: number | null
    percentageIncrease?: number | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    status?: $Enums.SalaryStatus
    comments?: string | null
    supportingDocs?: SalaryHistoryCreatesupportingDocsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type SalaryHistoryUncheckedCreateInput = {
    id?: string
    employeeId: string
    effectiveDate: Date | string
    endDate?: Date | string | null
    baseSalary: number
    currency?: string
    salaryGrade?: string | null
    payFrequency?: $Enums.PayrollFrequency
    allowances?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    changeReason: string
    changeType: $Enums.SalaryChangeType
    previousSalary?: number | null
    salaryIncrease?: number | null
    percentageIncrease?: number | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    status?: $Enums.SalaryStatus
    comments?: string | null
    supportingDocs?: SalaryHistoryCreatesupportingDocsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type SalaryHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    baseSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    salaryGrade?: NullableStringFieldUpdateOperationsInput | string | null
    payFrequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    allowances?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    changeReason?: StringFieldUpdateOperationsInput | string
    changeType?: EnumSalaryChangeTypeFieldUpdateOperationsInput | $Enums.SalaryChangeType
    previousSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    percentageIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    supportingDocs?: SalaryHistoryUpdatesupportingDocsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SalaryHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    baseSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    salaryGrade?: NullableStringFieldUpdateOperationsInput | string | null
    payFrequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    allowances?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    changeReason?: StringFieldUpdateOperationsInput | string
    changeType?: EnumSalaryChangeTypeFieldUpdateOperationsInput | $Enums.SalaryChangeType
    previousSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    percentageIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    supportingDocs?: SalaryHistoryUpdatesupportingDocsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SalaryHistoryCreateManyInput = {
    id?: string
    employeeId: string
    effectiveDate: Date | string
    endDate?: Date | string | null
    baseSalary: number
    currency?: string
    salaryGrade?: string | null
    payFrequency?: $Enums.PayrollFrequency
    allowances?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    changeReason: string
    changeType: $Enums.SalaryChangeType
    previousSalary?: number | null
    salaryIncrease?: number | null
    percentageIncrease?: number | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    status?: $Enums.SalaryStatus
    comments?: string | null
    supportingDocs?: SalaryHistoryCreatesupportingDocsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type SalaryHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    baseSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    salaryGrade?: NullableStringFieldUpdateOperationsInput | string | null
    payFrequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    allowances?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    changeReason?: StringFieldUpdateOperationsInput | string
    changeType?: EnumSalaryChangeTypeFieldUpdateOperationsInput | $Enums.SalaryChangeType
    previousSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    percentageIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    supportingDocs?: SalaryHistoryUpdatesupportingDocsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SalaryHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    effectiveDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    baseSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    salaryGrade?: NullableStringFieldUpdateOperationsInput | string | null
    payFrequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    allowances?: NullableJsonNullValueInput | InputJsonValue
    benefits?: NullableJsonNullValueInput | InputJsonValue
    changeReason?: StringFieldUpdateOperationsInput | string
    changeType?: EnumSalaryChangeTypeFieldUpdateOperationsInput | $Enums.SalaryChangeType
    previousSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    percentageIncrease?: NullableFloatFieldUpdateOperationsInput | number | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSalaryStatusFieldUpdateOperationsInput | $Enums.SalaryStatus
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    supportingDocs?: SalaryHistoryUpdatesupportingDocsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollStatsCreateInput = {
    id?: string
    period: string
    periodType: $Enums.PeriodType
    year: number
    month?: number | null
    quarter?: number | null
    totalEmployees?: number
    activeEmployees?: number
    newHires?: number
    terminations?: number
    totalGrossPay?: number
    totalNetPay?: number
    totalDeductions?: number
    totalTaxes?: number
    totalBenefits?: number
    averageSalary?: number
    medianSalary?: number
    currency?: string
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    payrollPeriods?: number
    processingTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollStatsUncheckedCreateInput = {
    id?: string
    period: string
    periodType: $Enums.PeriodType
    year: number
    month?: number | null
    quarter?: number | null
    totalEmployees?: number
    activeEmployees?: number
    newHires?: number
    terminations?: number
    totalGrossPay?: number
    totalNetPay?: number
    totalDeductions?: number
    totalTaxes?: number
    totalBenefits?: number
    averageSalary?: number
    medianSalary?: number
    currency?: string
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    payrollPeriods?: number
    processingTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | $Enums.PeriodType
    year?: IntFieldUpdateOperationsInput | number
    month?: NullableIntFieldUpdateOperationsInput | number | null
    quarter?: NullableIntFieldUpdateOperationsInput | number | null
    totalEmployees?: IntFieldUpdateOperationsInput | number
    activeEmployees?: IntFieldUpdateOperationsInput | number
    newHires?: IntFieldUpdateOperationsInput | number
    terminations?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    totalBenefits?: FloatFieldUpdateOperationsInput | number
    averageSalary?: FloatFieldUpdateOperationsInput | number
    medianSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    payrollPeriods?: IntFieldUpdateOperationsInput | number
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | $Enums.PeriodType
    year?: IntFieldUpdateOperationsInput | number
    month?: NullableIntFieldUpdateOperationsInput | number | null
    quarter?: NullableIntFieldUpdateOperationsInput | number | null
    totalEmployees?: IntFieldUpdateOperationsInput | number
    activeEmployees?: IntFieldUpdateOperationsInput | number
    newHires?: IntFieldUpdateOperationsInput | number
    terminations?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    totalBenefits?: FloatFieldUpdateOperationsInput | number
    averageSalary?: FloatFieldUpdateOperationsInput | number
    medianSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    payrollPeriods?: IntFieldUpdateOperationsInput | number
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollStatsCreateManyInput = {
    id?: string
    period: string
    periodType: $Enums.PeriodType
    year: number
    month?: number | null
    quarter?: number | null
    totalEmployees?: number
    activeEmployees?: number
    newHires?: number
    terminations?: number
    totalGrossPay?: number
    totalNetPay?: number
    totalDeductions?: number
    totalTaxes?: number
    totalBenefits?: number
    averageSalary?: number
    medianSalary?: number
    currency?: string
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    payrollPeriods?: number
    processingTime?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | $Enums.PeriodType
    year?: IntFieldUpdateOperationsInput | number
    month?: NullableIntFieldUpdateOperationsInput | number | null
    quarter?: NullableIntFieldUpdateOperationsInput | number | null
    totalEmployees?: IntFieldUpdateOperationsInput | number
    activeEmployees?: IntFieldUpdateOperationsInput | number
    newHires?: IntFieldUpdateOperationsInput | number
    terminations?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    totalBenefits?: FloatFieldUpdateOperationsInput | number
    averageSalary?: FloatFieldUpdateOperationsInput | number
    medianSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    payrollPeriods?: IntFieldUpdateOperationsInput | number
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    period?: StringFieldUpdateOperationsInput | string
    periodType?: EnumPeriodTypeFieldUpdateOperationsInput | $Enums.PeriodType
    year?: IntFieldUpdateOperationsInput | number
    month?: NullableIntFieldUpdateOperationsInput | number | null
    quarter?: NullableIntFieldUpdateOperationsInput | number | null
    totalEmployees?: IntFieldUpdateOperationsInput | number
    activeEmployees?: IntFieldUpdateOperationsInput | number
    newHires?: IntFieldUpdateOperationsInput | number
    terminations?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    totalBenefits?: FloatFieldUpdateOperationsInput | number
    averageSalary?: FloatFieldUpdateOperationsInput | number
    medianSalary?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    departmentBreakdown?: NullableJsonNullValueInput | InputJsonValue
    payrollPeriods?: IntFieldUpdateOperationsInput | number
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollConfigCreateInput = {
    id?: string
    name: string
    description?: string | null
    configType: string
    configValue: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    effectiveFrom: Date | string
    effectiveTo?: Date | string | null
    applicableCountries?: PayrollConfigCreateapplicableCountriesInput | string[]
    applicableStates?: PayrollConfigCreateapplicableStatesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollConfigUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    configType: string
    configValue: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    effectiveFrom: Date | string
    effectiveTo?: Date | string | null
    applicableCountries?: PayrollConfigCreateapplicableCountriesInput | string[]
    applicableStates?: PayrollConfigCreateapplicableStatesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    configType?: StringFieldUpdateOperationsInput | string
    configValue?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicableCountries?: PayrollConfigUpdateapplicableCountriesInput | string[]
    applicableStates?: PayrollConfigUpdateapplicableStatesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    configType?: StringFieldUpdateOperationsInput | string
    configValue?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicableCountries?: PayrollConfigUpdateapplicableCountriesInput | string[]
    applicableStates?: PayrollConfigUpdateapplicableStatesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollConfigCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    configType: string
    configValue: JsonNullValueInput | InputJsonValue
    isActive?: boolean
    effectiveFrom: Date | string
    effectiveTo?: Date | string | null
    applicableCountries?: PayrollConfigCreateapplicableCountriesInput | string[]
    applicableStates?: PayrollConfigCreateapplicableStatesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    configType?: StringFieldUpdateOperationsInput | string
    configValue?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicableCountries?: PayrollConfigUpdateapplicableCountriesInput | string[]
    applicableStates?: PayrollConfigUpdateapplicableStatesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    configType?: StringFieldUpdateOperationsInput | string
    configValue?: JsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    effectiveFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    effectiveTo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicableCountries?: PayrollConfigUpdateapplicableCountriesInput | string[]
    applicableStates?: PayrollConfigUpdateapplicableStatesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeTaxInfoCreateInput = {
    id?: string
    employeeId: string
    taxYear: number
    filingStatus: string
    dependents?: number
    exemptions?: number
    federalExemptions?: number
    stateExemptions?: number
    additionalWithholding?: number
    ssn?: string | null
    taxId?: string | null
    ytdGrossPay?: number
    ytdFederalTax?: number
    ytdStateTax?: number
    ytdSocialSecurity?: number
    ytdMedicare?: number
    ytdNetPay?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type EmployeeTaxInfoUncheckedCreateInput = {
    id?: string
    employeeId: string
    taxYear: number
    filingStatus: string
    dependents?: number
    exemptions?: number
    federalExemptions?: number
    stateExemptions?: number
    additionalWithholding?: number
    ssn?: string | null
    taxId?: string | null
    ytdGrossPay?: number
    ytdFederalTax?: number
    ytdStateTax?: number
    ytdSocialSecurity?: number
    ytdMedicare?: number
    ytdNetPay?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type EmployeeTaxInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taxYear?: IntFieldUpdateOperationsInput | number
    filingStatus?: StringFieldUpdateOperationsInput | string
    dependents?: IntFieldUpdateOperationsInput | number
    exemptions?: IntFieldUpdateOperationsInput | number
    federalExemptions?: IntFieldUpdateOperationsInput | number
    stateExemptions?: IntFieldUpdateOperationsInput | number
    additionalWithholding?: FloatFieldUpdateOperationsInput | number
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    ytdGrossPay?: FloatFieldUpdateOperationsInput | number
    ytdFederalTax?: FloatFieldUpdateOperationsInput | number
    ytdStateTax?: FloatFieldUpdateOperationsInput | number
    ytdSocialSecurity?: FloatFieldUpdateOperationsInput | number
    ytdMedicare?: FloatFieldUpdateOperationsInput | number
    ytdNetPay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeTaxInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taxYear?: IntFieldUpdateOperationsInput | number
    filingStatus?: StringFieldUpdateOperationsInput | string
    dependents?: IntFieldUpdateOperationsInput | number
    exemptions?: IntFieldUpdateOperationsInput | number
    federalExemptions?: IntFieldUpdateOperationsInput | number
    stateExemptions?: IntFieldUpdateOperationsInput | number
    additionalWithholding?: FloatFieldUpdateOperationsInput | number
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    ytdGrossPay?: FloatFieldUpdateOperationsInput | number
    ytdFederalTax?: FloatFieldUpdateOperationsInput | number
    ytdStateTax?: FloatFieldUpdateOperationsInput | number
    ytdSocialSecurity?: FloatFieldUpdateOperationsInput | number
    ytdMedicare?: FloatFieldUpdateOperationsInput | number
    ytdNetPay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeTaxInfoCreateManyInput = {
    id?: string
    employeeId: string
    taxYear: number
    filingStatus: string
    dependents?: number
    exemptions?: number
    federalExemptions?: number
    stateExemptions?: number
    additionalWithholding?: number
    ssn?: string | null
    taxId?: string | null
    ytdGrossPay?: number
    ytdFederalTax?: number
    ytdStateTax?: number
    ytdSocialSecurity?: number
    ytdMedicare?: number
    ytdNetPay?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type EmployeeTaxInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taxYear?: IntFieldUpdateOperationsInput | number
    filingStatus?: StringFieldUpdateOperationsInput | string
    dependents?: IntFieldUpdateOperationsInput | number
    exemptions?: IntFieldUpdateOperationsInput | number
    federalExemptions?: IntFieldUpdateOperationsInput | number
    stateExemptions?: IntFieldUpdateOperationsInput | number
    additionalWithholding?: FloatFieldUpdateOperationsInput | number
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    ytdGrossPay?: FloatFieldUpdateOperationsInput | number
    ytdFederalTax?: FloatFieldUpdateOperationsInput | number
    ytdStateTax?: FloatFieldUpdateOperationsInput | number
    ytdSocialSecurity?: FloatFieldUpdateOperationsInput | number
    ytdMedicare?: FloatFieldUpdateOperationsInput | number
    ytdNetPay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmployeeTaxInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    taxYear?: IntFieldUpdateOperationsInput | number
    filingStatus?: StringFieldUpdateOperationsInput | string
    dependents?: IntFieldUpdateOperationsInput | number
    exemptions?: IntFieldUpdateOperationsInput | number
    federalExemptions?: IntFieldUpdateOperationsInput | number
    stateExemptions?: IntFieldUpdateOperationsInput | number
    additionalWithholding?: FloatFieldUpdateOperationsInput | number
    ssn?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    ytdGrossPay?: FloatFieldUpdateOperationsInput | number
    ytdFederalTax?: FloatFieldUpdateOperationsInput | number
    ytdStateTax?: FloatFieldUpdateOperationsInput | number
    ytdSocialSecurity?: FloatFieldUpdateOperationsInput | number
    ytdMedicare?: FloatFieldUpdateOperationsInput | number
    ytdNetPay?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollProcessingLogCreateInput = {
    id?: string
    payrollPeriodId?: string | null
    processType: $Enums.ProcessType
    status: $Enums.ProcessingStatus
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    employeesProcessed?: number
    successCount?: number
    errorCount?: number
    warningCount?: number
    processedBy?: string | null
    processingDetails?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PayrollProcessingLogUncheckedCreateInput = {
    id?: string
    payrollPeriodId?: string | null
    processType: $Enums.ProcessType
    status: $Enums.ProcessingStatus
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    employeesProcessed?: number
    successCount?: number
    errorCount?: number
    warningCount?: number
    processedBy?: string | null
    processingDetails?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PayrollProcessingLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    processType?: EnumProcessTypeFieldUpdateOperationsInput | $Enums.ProcessType
    status?: EnumProcessingStatusFieldUpdateOperationsInput | $Enums.ProcessingStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    employeesProcessed?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    warningCount?: IntFieldUpdateOperationsInput | number
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processingDetails?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollProcessingLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    processType?: EnumProcessTypeFieldUpdateOperationsInput | $Enums.ProcessType
    status?: EnumProcessingStatusFieldUpdateOperationsInput | $Enums.ProcessingStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    employeesProcessed?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    warningCount?: IntFieldUpdateOperationsInput | number
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processingDetails?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollProcessingLogCreateManyInput = {
    id?: string
    payrollPeriodId?: string | null
    processType: $Enums.ProcessType
    status: $Enums.ProcessingStatus
    startTime?: Date | string
    endTime?: Date | string | null
    duration?: number | null
    employeesProcessed?: number
    successCount?: number
    errorCount?: number
    warningCount?: number
    processedBy?: string | null
    processingDetails?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PayrollProcessingLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    processType?: EnumProcessTypeFieldUpdateOperationsInput | $Enums.ProcessType
    status?: EnumProcessingStatusFieldUpdateOperationsInput | $Enums.ProcessingStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    employeesProcessed?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    warningCount?: IntFieldUpdateOperationsInput | number
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processingDetails?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayrollProcessingLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    payrollPeriodId?: NullableStringFieldUpdateOperationsInput | string | null
    processType?: EnumProcessTypeFieldUpdateOperationsInput | $Enums.ProcessType
    status?: EnumProcessingStatusFieldUpdateOperationsInput | $Enums.ProcessingStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    employeesProcessed?: IntFieldUpdateOperationsInput | number
    successCount?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    warningCount?: IntFieldUpdateOperationsInput | number
    processedBy?: NullableStringFieldUpdateOperationsInput | string | null
    processingDetails?: NullableJsonNullValueInput | InputJsonValue
    errors?: NullableJsonNullValueInput | InputJsonValue
    warnings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumPayrollStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollStatus | EnumPayrollStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollStatusFilter<$PrismaModel> | $Enums.PayrollStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumPayrollFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollFrequency | EnumPayrollFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollFrequencyFilter<$PrismaModel> | $Enums.PayrollFrequency
  }

  export type PaySlipListRelationFilter = {
    every?: PaySlipWhereInput
    some?: PaySlipWhereInput
    none?: PaySlipWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PaySlipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayrollPeriodStartDateEndDateCompoundUniqueInput = {
    startDate: Date | string
    endDate: Date | string
  }

  export type PayrollPeriodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    totalEmployees?: SortOrder
    totalGrossPay?: SortOrder
    totalDeductions?: SortOrder
    totalNetPay?: SortOrder
    currency?: SortOrder
    processingNotes?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    closedBy?: SortOrder
    closedDate?: SortOrder
    isRecurring?: SortOrder
    frequency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollPeriodAvgOrderByAggregateInput = {
    totalEmployees?: SortOrder
    totalGrossPay?: SortOrder
    totalDeductions?: SortOrder
    totalNetPay?: SortOrder
  }

  export type PayrollPeriodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    totalEmployees?: SortOrder
    totalGrossPay?: SortOrder
    totalDeductions?: SortOrder
    totalNetPay?: SortOrder
    currency?: SortOrder
    processingNotes?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    closedBy?: SortOrder
    closedDate?: SortOrder
    isRecurring?: SortOrder
    frequency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollPeriodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    payDate?: SortOrder
    status?: SortOrder
    totalEmployees?: SortOrder
    totalGrossPay?: SortOrder
    totalDeductions?: SortOrder
    totalNetPay?: SortOrder
    currency?: SortOrder
    processingNotes?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    closedBy?: SortOrder
    closedDate?: SortOrder
    isRecurring?: SortOrder
    frequency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollPeriodSumOrderByAggregateInput = {
    totalEmployees?: SortOrder
    totalGrossPay?: SortOrder
    totalDeductions?: SortOrder
    totalNetPay?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumPayrollStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollStatus | EnumPayrollStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollStatusWithAggregatesFilter<$PrismaModel> | $Enums.PayrollStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPayrollStatusFilter<$PrismaModel>
    _max?: NestedEnumPayrollStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumPayrollFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollFrequency | EnumPayrollFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.PayrollFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPayrollFrequencyFilter<$PrismaModel>
    _max?: NestedEnumPayrollFrequencyFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumPayslipStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PayslipStatus | EnumPayslipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayslipStatusFilter<$PrismaModel> | $Enums.PayslipStatus
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type PayrollPeriodRelationFilter = {
    is?: PayrollPeriodWhereInput
    isNot?: PayrollPeriodWhereInput
  }

  export type PaySlipEmployeeIdPayrollPeriodIdCompoundUniqueInput = {
    employeeId: string
    payrollPeriodId: string
  }

  export type PaySlipCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    employeeIdNumber?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    bankAccount?: SortOrder
    payPeriodStart?: SortOrder
    payPeriodEnd?: SortOrder
    payDate?: SortOrder
    workingDays?: SortOrder
    actualWorkingDays?: SortOrder
    baseSalary?: SortOrder
    hourlyRate?: SortOrder
    hoursWorked?: SortOrder
    overtimeHours?: SortOrder
    overtimeRate?: SortOrder
    overtimePay?: SortOrder
    earnings?: SortOrder
    totalEarnings?: SortOrder
    deductions?: SortOrder
    totalDeductions?: SortOrder
    taxableIncome?: SortOrder
    incomeTax?: SortOrder
    socialSecurityTax?: SortOrder
    medicareTax?: SortOrder
    stateTax?: SortOrder
    localTax?: SortOrder
    totalTaxes?: SortOrder
    grossPay?: SortOrder
    netPay?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentReference?: SortOrder
    paymentDate?: SortOrder
    isVoid?: SortOrder
    voidReason?: SortOrder
    voidedBy?: SortOrder
    voidedDate?: SortOrder
    generatedBy?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    notes?: SortOrder
    attachments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PaySlipAvgOrderByAggregateInput = {
    workingDays?: SortOrder
    actualWorkingDays?: SortOrder
    baseSalary?: SortOrder
    hourlyRate?: SortOrder
    hoursWorked?: SortOrder
    overtimeHours?: SortOrder
    overtimeRate?: SortOrder
    overtimePay?: SortOrder
    totalEarnings?: SortOrder
    totalDeductions?: SortOrder
    taxableIncome?: SortOrder
    incomeTax?: SortOrder
    socialSecurityTax?: SortOrder
    medicareTax?: SortOrder
    stateTax?: SortOrder
    localTax?: SortOrder
    totalTaxes?: SortOrder
    grossPay?: SortOrder
    netPay?: SortOrder
  }

  export type PaySlipMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    employeeIdNumber?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    bankAccount?: SortOrder
    payPeriodStart?: SortOrder
    payPeriodEnd?: SortOrder
    payDate?: SortOrder
    workingDays?: SortOrder
    actualWorkingDays?: SortOrder
    baseSalary?: SortOrder
    hourlyRate?: SortOrder
    hoursWorked?: SortOrder
    overtimeHours?: SortOrder
    overtimeRate?: SortOrder
    overtimePay?: SortOrder
    totalEarnings?: SortOrder
    totalDeductions?: SortOrder
    taxableIncome?: SortOrder
    incomeTax?: SortOrder
    socialSecurityTax?: SortOrder
    medicareTax?: SortOrder
    stateTax?: SortOrder
    localTax?: SortOrder
    totalTaxes?: SortOrder
    grossPay?: SortOrder
    netPay?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentReference?: SortOrder
    paymentDate?: SortOrder
    isVoid?: SortOrder
    voidReason?: SortOrder
    voidedBy?: SortOrder
    voidedDate?: SortOrder
    generatedBy?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PaySlipMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    payrollPeriodId?: SortOrder
    employeeIdNumber?: SortOrder
    fullName?: SortOrder
    designation?: SortOrder
    department?: SortOrder
    bankAccount?: SortOrder
    payPeriodStart?: SortOrder
    payPeriodEnd?: SortOrder
    payDate?: SortOrder
    workingDays?: SortOrder
    actualWorkingDays?: SortOrder
    baseSalary?: SortOrder
    hourlyRate?: SortOrder
    hoursWorked?: SortOrder
    overtimeHours?: SortOrder
    overtimeRate?: SortOrder
    overtimePay?: SortOrder
    totalEarnings?: SortOrder
    totalDeductions?: SortOrder
    taxableIncome?: SortOrder
    incomeTax?: SortOrder
    socialSecurityTax?: SortOrder
    medicareTax?: SortOrder
    stateTax?: SortOrder
    localTax?: SortOrder
    totalTaxes?: SortOrder
    grossPay?: SortOrder
    netPay?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentReference?: SortOrder
    paymentDate?: SortOrder
    isVoid?: SortOrder
    voidReason?: SortOrder
    voidedBy?: SortOrder
    voidedDate?: SortOrder
    generatedBy?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PaySlipSumOrderByAggregateInput = {
    workingDays?: SortOrder
    actualWorkingDays?: SortOrder
    baseSalary?: SortOrder
    hourlyRate?: SortOrder
    hoursWorked?: SortOrder
    overtimeHours?: SortOrder
    overtimeRate?: SortOrder
    overtimePay?: SortOrder
    totalEarnings?: SortOrder
    totalDeductions?: SortOrder
    taxableIncome?: SortOrder
    incomeTax?: SortOrder
    socialSecurityTax?: SortOrder
    medicareTax?: SortOrder
    stateTax?: SortOrder
    localTax?: SortOrder
    totalTaxes?: SortOrder
    grossPay?: SortOrder
    netPay?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumPayslipStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PayslipStatus | EnumPayslipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayslipStatusWithAggregatesFilter<$PrismaModel> | $Enums.PayslipStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPayslipStatusFilter<$PrismaModel>
    _max?: NestedEnumPayslipStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumSalaryChangeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryChangeType | EnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryChangeTypeFilter<$PrismaModel> | $Enums.SalaryChangeType
  }

  export type EnumSalaryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryStatusFilter<$PrismaModel> | $Enums.SalaryStatus
  }

  export type SalaryHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    effectiveDate?: SortOrder
    endDate?: SortOrder
    baseSalary?: SortOrder
    currency?: SortOrder
    salaryGrade?: SortOrder
    payFrequency?: SortOrder
    allowances?: SortOrder
    benefits?: SortOrder
    changeReason?: SortOrder
    changeType?: SortOrder
    previousSalary?: SortOrder
    salaryIncrease?: SortOrder
    percentageIncrease?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    supportingDocs?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SalaryHistoryAvgOrderByAggregateInput = {
    baseSalary?: SortOrder
    previousSalary?: SortOrder
    salaryIncrease?: SortOrder
    percentageIncrease?: SortOrder
  }

  export type SalaryHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    effectiveDate?: SortOrder
    endDate?: SortOrder
    baseSalary?: SortOrder
    currency?: SortOrder
    salaryGrade?: SortOrder
    payFrequency?: SortOrder
    changeReason?: SortOrder
    changeType?: SortOrder
    previousSalary?: SortOrder
    salaryIncrease?: SortOrder
    percentageIncrease?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SalaryHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    effectiveDate?: SortOrder
    endDate?: SortOrder
    baseSalary?: SortOrder
    currency?: SortOrder
    salaryGrade?: SortOrder
    payFrequency?: SortOrder
    changeReason?: SortOrder
    changeType?: SortOrder
    previousSalary?: SortOrder
    salaryIncrease?: SortOrder
    percentageIncrease?: SortOrder
    approvedBy?: SortOrder
    approvedDate?: SortOrder
    status?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type SalaryHistorySumOrderByAggregateInput = {
    baseSalary?: SortOrder
    previousSalary?: SortOrder
    salaryIncrease?: SortOrder
    percentageIncrease?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumSalaryChangeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryChangeType | EnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryChangeTypeWithAggregatesFilter<$PrismaModel> | $Enums.SalaryChangeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSalaryChangeTypeFilter<$PrismaModel>
    _max?: NestedEnumSalaryChangeTypeFilter<$PrismaModel>
  }

  export type EnumSalaryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryStatusWithAggregatesFilter<$PrismaModel> | $Enums.SalaryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSalaryStatusFilter<$PrismaModel>
    _max?: NestedEnumSalaryStatusFilter<$PrismaModel>
  }

  export type EnumPeriodTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PeriodType | EnumPeriodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodTypeFilter<$PrismaModel> | $Enums.PeriodType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PayrollStatsPeriodPeriodTypeCompoundUniqueInput = {
    period: string
    periodType: $Enums.PeriodType
  }

  export type PayrollStatsCountOrderByAggregateInput = {
    id?: SortOrder
    period?: SortOrder
    periodType?: SortOrder
    year?: SortOrder
    month?: SortOrder
    quarter?: SortOrder
    totalEmployees?: SortOrder
    activeEmployees?: SortOrder
    newHires?: SortOrder
    terminations?: SortOrder
    totalGrossPay?: SortOrder
    totalNetPay?: SortOrder
    totalDeductions?: SortOrder
    totalTaxes?: SortOrder
    totalBenefits?: SortOrder
    averageSalary?: SortOrder
    medianSalary?: SortOrder
    currency?: SortOrder
    departmentBreakdown?: SortOrder
    payrollPeriods?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollStatsAvgOrderByAggregateInput = {
    year?: SortOrder
    month?: SortOrder
    quarter?: SortOrder
    totalEmployees?: SortOrder
    activeEmployees?: SortOrder
    newHires?: SortOrder
    terminations?: SortOrder
    totalGrossPay?: SortOrder
    totalNetPay?: SortOrder
    totalDeductions?: SortOrder
    totalTaxes?: SortOrder
    totalBenefits?: SortOrder
    averageSalary?: SortOrder
    medianSalary?: SortOrder
    payrollPeriods?: SortOrder
    processingTime?: SortOrder
  }

  export type PayrollStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    period?: SortOrder
    periodType?: SortOrder
    year?: SortOrder
    month?: SortOrder
    quarter?: SortOrder
    totalEmployees?: SortOrder
    activeEmployees?: SortOrder
    newHires?: SortOrder
    terminations?: SortOrder
    totalGrossPay?: SortOrder
    totalNetPay?: SortOrder
    totalDeductions?: SortOrder
    totalTaxes?: SortOrder
    totalBenefits?: SortOrder
    averageSalary?: SortOrder
    medianSalary?: SortOrder
    currency?: SortOrder
    payrollPeriods?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollStatsMinOrderByAggregateInput = {
    id?: SortOrder
    period?: SortOrder
    periodType?: SortOrder
    year?: SortOrder
    month?: SortOrder
    quarter?: SortOrder
    totalEmployees?: SortOrder
    activeEmployees?: SortOrder
    newHires?: SortOrder
    terminations?: SortOrder
    totalGrossPay?: SortOrder
    totalNetPay?: SortOrder
    totalDeductions?: SortOrder
    totalTaxes?: SortOrder
    totalBenefits?: SortOrder
    averageSalary?: SortOrder
    medianSalary?: SortOrder
    currency?: SortOrder
    payrollPeriods?: SortOrder
    processingTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollStatsSumOrderByAggregateInput = {
    year?: SortOrder
    month?: SortOrder
    quarter?: SortOrder
    totalEmployees?: SortOrder
    activeEmployees?: SortOrder
    newHires?: SortOrder
    terminations?: SortOrder
    totalGrossPay?: SortOrder
    totalNetPay?: SortOrder
    totalDeductions?: SortOrder
    totalTaxes?: SortOrder
    totalBenefits?: SortOrder
    averageSalary?: SortOrder
    medianSalary?: SortOrder
    payrollPeriods?: SortOrder
    processingTime?: SortOrder
  }

  export type EnumPeriodTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PeriodType | EnumPeriodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodTypeWithAggregatesFilter<$PrismaModel> | $Enums.PeriodType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPeriodTypeFilter<$PrismaModel>
    _max?: NestedEnumPeriodTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type PayrollConfigCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    configType?: SortOrder
    configValue?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    applicableCountries?: SortOrder
    applicableStates?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    configType?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PayrollConfigMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    configType?: SortOrder
    isActive?: SortOrder
    effectiveFrom?: SortOrder
    effectiveTo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EmployeeTaxInfoCountOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    taxYear?: SortOrder
    filingStatus?: SortOrder
    dependents?: SortOrder
    exemptions?: SortOrder
    federalExemptions?: SortOrder
    stateExemptions?: SortOrder
    additionalWithholding?: SortOrder
    ssn?: SortOrder
    taxId?: SortOrder
    ytdGrossPay?: SortOrder
    ytdFederalTax?: SortOrder
    ytdStateTax?: SortOrder
    ytdSocialSecurity?: SortOrder
    ytdMedicare?: SortOrder
    ytdNetPay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EmployeeTaxInfoAvgOrderByAggregateInput = {
    taxYear?: SortOrder
    dependents?: SortOrder
    exemptions?: SortOrder
    federalExemptions?: SortOrder
    stateExemptions?: SortOrder
    additionalWithholding?: SortOrder
    ytdGrossPay?: SortOrder
    ytdFederalTax?: SortOrder
    ytdStateTax?: SortOrder
    ytdSocialSecurity?: SortOrder
    ytdMedicare?: SortOrder
    ytdNetPay?: SortOrder
  }

  export type EmployeeTaxInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    taxYear?: SortOrder
    filingStatus?: SortOrder
    dependents?: SortOrder
    exemptions?: SortOrder
    federalExemptions?: SortOrder
    stateExemptions?: SortOrder
    additionalWithholding?: SortOrder
    ssn?: SortOrder
    taxId?: SortOrder
    ytdGrossPay?: SortOrder
    ytdFederalTax?: SortOrder
    ytdStateTax?: SortOrder
    ytdSocialSecurity?: SortOrder
    ytdMedicare?: SortOrder
    ytdNetPay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EmployeeTaxInfoMinOrderByAggregateInput = {
    id?: SortOrder
    employeeId?: SortOrder
    taxYear?: SortOrder
    filingStatus?: SortOrder
    dependents?: SortOrder
    exemptions?: SortOrder
    federalExemptions?: SortOrder
    stateExemptions?: SortOrder
    additionalWithholding?: SortOrder
    ssn?: SortOrder
    taxId?: SortOrder
    ytdGrossPay?: SortOrder
    ytdFederalTax?: SortOrder
    ytdStateTax?: SortOrder
    ytdSocialSecurity?: SortOrder
    ytdMedicare?: SortOrder
    ytdNetPay?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type EmployeeTaxInfoSumOrderByAggregateInput = {
    taxYear?: SortOrder
    dependents?: SortOrder
    exemptions?: SortOrder
    federalExemptions?: SortOrder
    stateExemptions?: SortOrder
    additionalWithholding?: SortOrder
    ytdGrossPay?: SortOrder
    ytdFederalTax?: SortOrder
    ytdStateTax?: SortOrder
    ytdSocialSecurity?: SortOrder
    ytdMedicare?: SortOrder
    ytdNetPay?: SortOrder
  }

  export type EnumProcessTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessType | EnumProcessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessTypeFilter<$PrismaModel> | $Enums.ProcessType
  }

  export type EnumProcessingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingStatus | EnumProcessingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessingStatusFilter<$PrismaModel> | $Enums.ProcessingStatus
  }

  export type PayrollProcessingLogCountOrderByAggregateInput = {
    id?: SortOrder
    payrollPeriodId?: SortOrder
    processType?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    employeesProcessed?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    warningCount?: SortOrder
    processedBy?: SortOrder
    processingDetails?: SortOrder
    errors?: SortOrder
    warnings?: SortOrder
    createdAt?: SortOrder
  }

  export type PayrollProcessingLogAvgOrderByAggregateInput = {
    duration?: SortOrder
    employeesProcessed?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    warningCount?: SortOrder
  }

  export type PayrollProcessingLogMaxOrderByAggregateInput = {
    id?: SortOrder
    payrollPeriodId?: SortOrder
    processType?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    employeesProcessed?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    warningCount?: SortOrder
    processedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type PayrollProcessingLogMinOrderByAggregateInput = {
    id?: SortOrder
    payrollPeriodId?: SortOrder
    processType?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    employeesProcessed?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    warningCount?: SortOrder
    processedBy?: SortOrder
    createdAt?: SortOrder
  }

  export type PayrollProcessingLogSumOrderByAggregateInput = {
    duration?: SortOrder
    employeesProcessed?: SortOrder
    successCount?: SortOrder
    errorCount?: SortOrder
    warningCount?: SortOrder
  }

  export type EnumProcessTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessType | EnumProcessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProcessType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcessTypeFilter<$PrismaModel>
    _max?: NestedEnumProcessTypeFilter<$PrismaModel>
  }

  export type EnumProcessingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingStatus | EnumProcessingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessingStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProcessingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcessingStatusFilter<$PrismaModel>
    _max?: NestedEnumProcessingStatusFilter<$PrismaModel>
  }

  export type PaySlipCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<PaySlipCreateWithoutPayrollPeriodInput, PaySlipUncheckedCreateWithoutPayrollPeriodInput> | PaySlipCreateWithoutPayrollPeriodInput[] | PaySlipUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutPayrollPeriodInput | PaySlipCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: PaySlipCreateManyPayrollPeriodInputEnvelope
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
  }

  export type PaySlipUncheckedCreateNestedManyWithoutPayrollPeriodInput = {
    create?: XOR<PaySlipCreateWithoutPayrollPeriodInput, PaySlipUncheckedCreateWithoutPayrollPeriodInput> | PaySlipCreateWithoutPayrollPeriodInput[] | PaySlipUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutPayrollPeriodInput | PaySlipCreateOrConnectWithoutPayrollPeriodInput[]
    createMany?: PaySlipCreateManyPayrollPeriodInputEnvelope
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumPayrollStatusFieldUpdateOperationsInput = {
    set?: $Enums.PayrollStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumPayrollFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.PayrollFrequency
  }

  export type PaySlipUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<PaySlipCreateWithoutPayrollPeriodInput, PaySlipUncheckedCreateWithoutPayrollPeriodInput> | PaySlipCreateWithoutPayrollPeriodInput[] | PaySlipUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutPayrollPeriodInput | PaySlipCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: PaySlipUpsertWithWhereUniqueWithoutPayrollPeriodInput | PaySlipUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: PaySlipCreateManyPayrollPeriodInputEnvelope
    set?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    disconnect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    delete?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    update?: PaySlipUpdateWithWhereUniqueWithoutPayrollPeriodInput | PaySlipUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: PaySlipUpdateManyWithWhereWithoutPayrollPeriodInput | PaySlipUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
  }

  export type PaySlipUncheckedUpdateManyWithoutPayrollPeriodNestedInput = {
    create?: XOR<PaySlipCreateWithoutPayrollPeriodInput, PaySlipUncheckedCreateWithoutPayrollPeriodInput> | PaySlipCreateWithoutPayrollPeriodInput[] | PaySlipUncheckedCreateWithoutPayrollPeriodInput[]
    connectOrCreate?: PaySlipCreateOrConnectWithoutPayrollPeriodInput | PaySlipCreateOrConnectWithoutPayrollPeriodInput[]
    upsert?: PaySlipUpsertWithWhereUniqueWithoutPayrollPeriodInput | PaySlipUpsertWithWhereUniqueWithoutPayrollPeriodInput[]
    createMany?: PaySlipCreateManyPayrollPeriodInputEnvelope
    set?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    disconnect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    delete?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    connect?: PaySlipWhereUniqueInput | PaySlipWhereUniqueInput[]
    update?: PaySlipUpdateWithWhereUniqueWithoutPayrollPeriodInput | PaySlipUpdateWithWhereUniqueWithoutPayrollPeriodInput[]
    updateMany?: PaySlipUpdateManyWithWhereWithoutPayrollPeriodInput | PaySlipUpdateManyWithWhereWithoutPayrollPeriodInput[]
    deleteMany?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
  }

  export type PaySlipCreateattachmentsInput = {
    set: string[]
  }

  export type PayrollPeriodCreateNestedOneWithoutPayslipsInput = {
    create?: XOR<PayrollPeriodCreateWithoutPayslipsInput, PayrollPeriodUncheckedCreateWithoutPayslipsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutPayslipsInput
    connect?: PayrollPeriodWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPayslipStatusFieldUpdateOperationsInput = {
    set?: $Enums.PayslipStatus
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type PaySlipUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PayrollPeriodUpdateOneRequiredWithoutPayslipsNestedInput = {
    create?: XOR<PayrollPeriodCreateWithoutPayslipsInput, PayrollPeriodUncheckedCreateWithoutPayslipsInput>
    connectOrCreate?: PayrollPeriodCreateOrConnectWithoutPayslipsInput
    upsert?: PayrollPeriodUpsertWithoutPayslipsInput
    connect?: PayrollPeriodWhereUniqueInput
    update?: XOR<XOR<PayrollPeriodUpdateToOneWithWhereWithoutPayslipsInput, PayrollPeriodUpdateWithoutPayslipsInput>, PayrollPeriodUncheckedUpdateWithoutPayslipsInput>
  }

  export type SalaryHistoryCreatesupportingDocsInput = {
    set: string[]
  }

  export type EnumSalaryChangeTypeFieldUpdateOperationsInput = {
    set?: $Enums.SalaryChangeType
  }

  export type EnumSalaryStatusFieldUpdateOperationsInput = {
    set?: $Enums.SalaryStatus
  }

  export type SalaryHistoryUpdatesupportingDocsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumPeriodTypeFieldUpdateOperationsInput = {
    set?: $Enums.PeriodType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PayrollConfigCreateapplicableCountriesInput = {
    set: string[]
  }

  export type PayrollConfigCreateapplicableStatesInput = {
    set: string[]
  }

  export type PayrollConfigUpdateapplicableCountriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PayrollConfigUpdateapplicableStatesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumProcessTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProcessType
  }

  export type EnumProcessingStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProcessingStatus
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumPayrollStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollStatus | EnumPayrollStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollStatusFilter<$PrismaModel> | $Enums.PayrollStatus
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumPayrollFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollFrequency | EnumPayrollFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollFrequencyFilter<$PrismaModel> | $Enums.PayrollFrequency
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumPayrollStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollStatus | EnumPayrollStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollStatus[] | ListEnumPayrollStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollStatusWithAggregatesFilter<$PrismaModel> | $Enums.PayrollStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPayrollStatusFilter<$PrismaModel>
    _max?: NestedEnumPayrollStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumPayrollFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PayrollFrequency | EnumPayrollFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayrollFrequency[] | ListEnumPayrollFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumPayrollFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.PayrollFrequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPayrollFrequencyFilter<$PrismaModel>
    _max?: NestedEnumPayrollFrequencyFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPayslipStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PayslipStatus | EnumPayslipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayslipStatusFilter<$PrismaModel> | $Enums.PayslipStatus
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumPayslipStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PayslipStatus | EnumPayslipStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PayslipStatus[] | ListEnumPayslipStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPayslipStatusWithAggregatesFilter<$PrismaModel> | $Enums.PayslipStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPayslipStatusFilter<$PrismaModel>
    _max?: NestedEnumPayslipStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumSalaryChangeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryChangeType | EnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryChangeTypeFilter<$PrismaModel> | $Enums.SalaryChangeType
  }

  export type NestedEnumSalaryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryStatusFilter<$PrismaModel> | $Enums.SalaryStatus
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumSalaryChangeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryChangeType | EnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryChangeType[] | ListEnumSalaryChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryChangeTypeWithAggregatesFilter<$PrismaModel> | $Enums.SalaryChangeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSalaryChangeTypeFilter<$PrismaModel>
    _max?: NestedEnumSalaryChangeTypeFilter<$PrismaModel>
  }

  export type NestedEnumSalaryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SalaryStatus | EnumSalaryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SalaryStatus[] | ListEnumSalaryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSalaryStatusWithAggregatesFilter<$PrismaModel> | $Enums.SalaryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSalaryStatusFilter<$PrismaModel>
    _max?: NestedEnumSalaryStatusFilter<$PrismaModel>
  }

  export type NestedEnumPeriodTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PeriodType | EnumPeriodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodTypeFilter<$PrismaModel> | $Enums.PeriodType
  }

  export type NestedEnumPeriodTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PeriodType | EnumPeriodTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PeriodType[] | ListEnumPeriodTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPeriodTypeWithAggregatesFilter<$PrismaModel> | $Enums.PeriodType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPeriodTypeFilter<$PrismaModel>
    _max?: NestedEnumPeriodTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumProcessTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessType | EnumProcessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessTypeFilter<$PrismaModel> | $Enums.ProcessType
  }

  export type NestedEnumProcessingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingStatus | EnumProcessingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessingStatusFilter<$PrismaModel> | $Enums.ProcessingStatus
  }

  export type NestedEnumProcessTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessType | EnumProcessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessType[] | ListEnumProcessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProcessType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcessTypeFilter<$PrismaModel>
    _max?: NestedEnumProcessTypeFilter<$PrismaModel>
  }

  export type NestedEnumProcessingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProcessingStatus | EnumProcessingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProcessingStatus[] | ListEnumProcessingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProcessingStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProcessingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProcessingStatusFilter<$PrismaModel>
    _max?: NestedEnumProcessingStatusFilter<$PrismaModel>
  }

  export type PaySlipCreateWithoutPayrollPeriodInput = {
    id?: string
    employeeId: string
    employeeIdNumber: string
    fullName: string
    designation: string
    department: string
    bankAccount?: string | null
    payPeriodStart: Date | string
    payPeriodEnd: Date | string
    payDate: Date | string
    workingDays?: number
    actualWorkingDays?: number
    baseSalary?: number
    hourlyRate?: number | null
    hoursWorked?: number | null
    overtimeHours?: number
    overtimeRate?: number | null
    overtimePay?: number
    earnings: JsonNullValueInput | InputJsonValue
    totalEarnings?: number
    deductions: JsonNullValueInput | InputJsonValue
    totalDeductions?: number
    taxableIncome?: number
    incomeTax?: number
    socialSecurityTax?: number
    medicareTax?: number
    stateTax?: number
    localTax?: number
    totalTaxes?: number
    grossPay?: number
    netPay?: number
    currency?: string
    status?: $Enums.PayslipStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentReference?: string | null
    paymentDate?: Date | string | null
    isVoid?: boolean
    voidReason?: string | null
    voidedBy?: string | null
    voidedDate?: Date | string | null
    generatedBy?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    notes?: string | null
    attachments?: PaySlipCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PaySlipUncheckedCreateWithoutPayrollPeriodInput = {
    id?: string
    employeeId: string
    employeeIdNumber: string
    fullName: string
    designation: string
    department: string
    bankAccount?: string | null
    payPeriodStart: Date | string
    payPeriodEnd: Date | string
    payDate: Date | string
    workingDays?: number
    actualWorkingDays?: number
    baseSalary?: number
    hourlyRate?: number | null
    hoursWorked?: number | null
    overtimeHours?: number
    overtimeRate?: number | null
    overtimePay?: number
    earnings: JsonNullValueInput | InputJsonValue
    totalEarnings?: number
    deductions: JsonNullValueInput | InputJsonValue
    totalDeductions?: number
    taxableIncome?: number
    incomeTax?: number
    socialSecurityTax?: number
    medicareTax?: number
    stateTax?: number
    localTax?: number
    totalTaxes?: number
    grossPay?: number
    netPay?: number
    currency?: string
    status?: $Enums.PayslipStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentReference?: string | null
    paymentDate?: Date | string | null
    isVoid?: boolean
    voidReason?: string | null
    voidedBy?: string | null
    voidedDate?: Date | string | null
    generatedBy?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    notes?: string | null
    attachments?: PaySlipCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PaySlipCreateOrConnectWithoutPayrollPeriodInput = {
    where: PaySlipWhereUniqueInput
    create: XOR<PaySlipCreateWithoutPayrollPeriodInput, PaySlipUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type PaySlipCreateManyPayrollPeriodInputEnvelope = {
    data: PaySlipCreateManyPayrollPeriodInput | PaySlipCreateManyPayrollPeriodInput[]
    skipDuplicates?: boolean
  }

  export type PaySlipUpsertWithWhereUniqueWithoutPayrollPeriodInput = {
    where: PaySlipWhereUniqueInput
    update: XOR<PaySlipUpdateWithoutPayrollPeriodInput, PaySlipUncheckedUpdateWithoutPayrollPeriodInput>
    create: XOR<PaySlipCreateWithoutPayrollPeriodInput, PaySlipUncheckedCreateWithoutPayrollPeriodInput>
  }

  export type PaySlipUpdateWithWhereUniqueWithoutPayrollPeriodInput = {
    where: PaySlipWhereUniqueInput
    data: XOR<PaySlipUpdateWithoutPayrollPeriodInput, PaySlipUncheckedUpdateWithoutPayrollPeriodInput>
  }

  export type PaySlipUpdateManyWithWhereWithoutPayrollPeriodInput = {
    where: PaySlipScalarWhereInput
    data: XOR<PaySlipUpdateManyMutationInput, PaySlipUncheckedUpdateManyWithoutPayrollPeriodInput>
  }

  export type PaySlipScalarWhereInput = {
    AND?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
    OR?: PaySlipScalarWhereInput[]
    NOT?: PaySlipScalarWhereInput | PaySlipScalarWhereInput[]
    id?: StringFilter<"PaySlip"> | string
    employeeId?: StringFilter<"PaySlip"> | string
    payrollPeriodId?: StringFilter<"PaySlip"> | string
    employeeIdNumber?: StringFilter<"PaySlip"> | string
    fullName?: StringFilter<"PaySlip"> | string
    designation?: StringFilter<"PaySlip"> | string
    department?: StringFilter<"PaySlip"> | string
    bankAccount?: StringNullableFilter<"PaySlip"> | string | null
    payPeriodStart?: DateTimeFilter<"PaySlip"> | Date | string
    payPeriodEnd?: DateTimeFilter<"PaySlip"> | Date | string
    payDate?: DateTimeFilter<"PaySlip"> | Date | string
    workingDays?: IntFilter<"PaySlip"> | number
    actualWorkingDays?: FloatFilter<"PaySlip"> | number
    baseSalary?: FloatFilter<"PaySlip"> | number
    hourlyRate?: FloatNullableFilter<"PaySlip"> | number | null
    hoursWorked?: FloatNullableFilter<"PaySlip"> | number | null
    overtimeHours?: FloatFilter<"PaySlip"> | number
    overtimeRate?: FloatNullableFilter<"PaySlip"> | number | null
    overtimePay?: FloatFilter<"PaySlip"> | number
    earnings?: JsonFilter<"PaySlip">
    totalEarnings?: FloatFilter<"PaySlip"> | number
    deductions?: JsonFilter<"PaySlip">
    totalDeductions?: FloatFilter<"PaySlip"> | number
    taxableIncome?: FloatFilter<"PaySlip"> | number
    incomeTax?: FloatFilter<"PaySlip"> | number
    socialSecurityTax?: FloatFilter<"PaySlip"> | number
    medicareTax?: FloatFilter<"PaySlip"> | number
    stateTax?: FloatFilter<"PaySlip"> | number
    localTax?: FloatFilter<"PaySlip"> | number
    totalTaxes?: FloatFilter<"PaySlip"> | number
    grossPay?: FloatFilter<"PaySlip"> | number
    netPay?: FloatFilter<"PaySlip"> | number
    currency?: StringFilter<"PaySlip"> | string
    status?: EnumPayslipStatusFilter<"PaySlip"> | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFilter<"PaySlip"> | $Enums.PaymentMethod
    paymentReference?: StringNullableFilter<"PaySlip"> | string | null
    paymentDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    isVoid?: BoolFilter<"PaySlip"> | boolean
    voidReason?: StringNullableFilter<"PaySlip"> | string | null
    voidedBy?: StringNullableFilter<"PaySlip"> | string | null
    voidedDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    generatedBy?: StringNullableFilter<"PaySlip"> | string | null
    approvedBy?: StringNullableFilter<"PaySlip"> | string | null
    approvedDate?: DateTimeNullableFilter<"PaySlip"> | Date | string | null
    notes?: StringNullableFilter<"PaySlip"> | string | null
    attachments?: StringNullableListFilter<"PaySlip">
    createdAt?: DateTimeFilter<"PaySlip"> | Date | string
    updatedAt?: DateTimeFilter<"PaySlip"> | Date | string
    createdById?: StringNullableFilter<"PaySlip"> | string | null
    updatedById?: StringNullableFilter<"PaySlip"> | string | null
  }

  export type PayrollPeriodCreateWithoutPayslipsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: $Enums.PayrollStatus
    totalEmployees?: number
    totalGrossPay?: number
    totalDeductions?: number
    totalNetPay?: number
    currency?: string
    processingNotes?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    closedBy?: string | null
    closedDate?: Date | string | null
    isRecurring?: boolean
    frequency?: $Enums.PayrollFrequency
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollPeriodUncheckedCreateWithoutPayslipsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    payDate: Date | string
    status?: $Enums.PayrollStatus
    totalEmployees?: number
    totalGrossPay?: number
    totalDeductions?: number
    totalNetPay?: number
    currency?: string
    processingNotes?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    closedBy?: string | null
    closedDate?: Date | string | null
    isRecurring?: boolean
    frequency?: $Enums.PayrollFrequency
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PayrollPeriodCreateOrConnectWithoutPayslipsInput = {
    where: PayrollPeriodWhereUniqueInput
    create: XOR<PayrollPeriodCreateWithoutPayslipsInput, PayrollPeriodUncheckedCreateWithoutPayslipsInput>
  }

  export type PayrollPeriodUpsertWithoutPayslipsInput = {
    update: XOR<PayrollPeriodUpdateWithoutPayslipsInput, PayrollPeriodUncheckedUpdateWithoutPayslipsInput>
    create: XOR<PayrollPeriodCreateWithoutPayslipsInput, PayrollPeriodUncheckedCreateWithoutPayslipsInput>
    where?: PayrollPeriodWhereInput
  }

  export type PayrollPeriodUpdateToOneWithWhereWithoutPayslipsInput = {
    where?: PayrollPeriodWhereInput
    data: XOR<PayrollPeriodUpdateWithoutPayslipsInput, PayrollPeriodUncheckedUpdateWithoutPayslipsInput>
  }

  export type PayrollPeriodUpdateWithoutPayslipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayrollStatusFieldUpdateOperationsInput | $Enums.PayrollStatus
    totalEmployees?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    processingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    frequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayrollPeriodUncheckedUpdateWithoutPayslipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPayrollStatusFieldUpdateOperationsInput | $Enums.PayrollStatus
    totalEmployees?: IntFieldUpdateOperationsInput | number
    totalGrossPay?: FloatFieldUpdateOperationsInput | number
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    totalNetPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    processingNotes?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedBy?: NullableStringFieldUpdateOperationsInput | string | null
    closedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
    frequency?: EnumPayrollFrequencyFieldUpdateOperationsInput | $Enums.PayrollFrequency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipCreateManyPayrollPeriodInput = {
    id?: string
    employeeId: string
    employeeIdNumber: string
    fullName: string
    designation: string
    department: string
    bankAccount?: string | null
    payPeriodStart: Date | string
    payPeriodEnd: Date | string
    payDate: Date | string
    workingDays?: number
    actualWorkingDays?: number
    baseSalary?: number
    hourlyRate?: number | null
    hoursWorked?: number | null
    overtimeHours?: number
    overtimeRate?: number | null
    overtimePay?: number
    earnings: JsonNullValueInput | InputJsonValue
    totalEarnings?: number
    deductions: JsonNullValueInput | InputJsonValue
    totalDeductions?: number
    taxableIncome?: number
    incomeTax?: number
    socialSecurityTax?: number
    medicareTax?: number
    stateTax?: number
    localTax?: number
    totalTaxes?: number
    grossPay?: number
    netPay?: number
    currency?: string
    status?: $Enums.PayslipStatus
    paymentMethod?: $Enums.PaymentMethod
    paymentReference?: string | null
    paymentDate?: Date | string | null
    isVoid?: boolean
    voidReason?: string | null
    voidedBy?: string | null
    voidedDate?: Date | string | null
    generatedBy?: string | null
    approvedBy?: string | null
    approvedDate?: Date | string | null
    notes?: string | null
    attachments?: PaySlipCreateattachmentsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PaySlipUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    employeeIdNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    payPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: IntFieldUpdateOperationsInput | number
    actualWorkingDays?: FloatFieldUpdateOperationsInput | number
    baseSalary?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    hoursWorked?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimeHours?: FloatFieldUpdateOperationsInput | number
    overtimeRate?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimePay?: FloatFieldUpdateOperationsInput | number
    earnings?: JsonNullValueInput | InputJsonValue
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    deductions?: JsonNullValueInput | InputJsonValue
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    taxableIncome?: FloatFieldUpdateOperationsInput | number
    incomeTax?: FloatFieldUpdateOperationsInput | number
    socialSecurityTax?: FloatFieldUpdateOperationsInput | number
    medicareTax?: FloatFieldUpdateOperationsInput | number
    stateTax?: FloatFieldUpdateOperationsInput | number
    localTax?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    grossPay?: FloatFieldUpdateOperationsInput | number
    netPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPayslipStatusFieldUpdateOperationsInput | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentReference?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVoid?: BoolFieldUpdateOperationsInput | boolean
    voidReason?: NullableStringFieldUpdateOperationsInput | string | null
    voidedBy?: NullableStringFieldUpdateOperationsInput | string | null
    voidedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PaySlipUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipUncheckedUpdateWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    employeeIdNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    payPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: IntFieldUpdateOperationsInput | number
    actualWorkingDays?: FloatFieldUpdateOperationsInput | number
    baseSalary?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    hoursWorked?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimeHours?: FloatFieldUpdateOperationsInput | number
    overtimeRate?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimePay?: FloatFieldUpdateOperationsInput | number
    earnings?: JsonNullValueInput | InputJsonValue
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    deductions?: JsonNullValueInput | InputJsonValue
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    taxableIncome?: FloatFieldUpdateOperationsInput | number
    incomeTax?: FloatFieldUpdateOperationsInput | number
    socialSecurityTax?: FloatFieldUpdateOperationsInput | number
    medicareTax?: FloatFieldUpdateOperationsInput | number
    stateTax?: FloatFieldUpdateOperationsInput | number
    localTax?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    grossPay?: FloatFieldUpdateOperationsInput | number
    netPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPayslipStatusFieldUpdateOperationsInput | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentReference?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVoid?: BoolFieldUpdateOperationsInput | boolean
    voidReason?: NullableStringFieldUpdateOperationsInput | string | null
    voidedBy?: NullableStringFieldUpdateOperationsInput | string | null
    voidedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PaySlipUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaySlipUncheckedUpdateManyWithoutPayrollPeriodInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: StringFieldUpdateOperationsInput | string
    employeeIdNumber?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    designation?: StringFieldUpdateOperationsInput | string
    department?: StringFieldUpdateOperationsInput | string
    bankAccount?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    payPeriodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    payDate?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: IntFieldUpdateOperationsInput | number
    actualWorkingDays?: FloatFieldUpdateOperationsInput | number
    baseSalary?: FloatFieldUpdateOperationsInput | number
    hourlyRate?: NullableFloatFieldUpdateOperationsInput | number | null
    hoursWorked?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimeHours?: FloatFieldUpdateOperationsInput | number
    overtimeRate?: NullableFloatFieldUpdateOperationsInput | number | null
    overtimePay?: FloatFieldUpdateOperationsInput | number
    earnings?: JsonNullValueInput | InputJsonValue
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    deductions?: JsonNullValueInput | InputJsonValue
    totalDeductions?: FloatFieldUpdateOperationsInput | number
    taxableIncome?: FloatFieldUpdateOperationsInput | number
    incomeTax?: FloatFieldUpdateOperationsInput | number
    socialSecurityTax?: FloatFieldUpdateOperationsInput | number
    medicareTax?: FloatFieldUpdateOperationsInput | number
    stateTax?: FloatFieldUpdateOperationsInput | number
    localTax?: FloatFieldUpdateOperationsInput | number
    totalTaxes?: FloatFieldUpdateOperationsInput | number
    grossPay?: FloatFieldUpdateOperationsInput | number
    netPay?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: EnumPayslipStatusFieldUpdateOperationsInput | $Enums.PayslipStatus
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paymentReference?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVoid?: BoolFieldUpdateOperationsInput | boolean
    voidReason?: NullableStringFieldUpdateOperationsInput | string | null
    voidedBy?: NullableStringFieldUpdateOperationsInput | string | null
    voidedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    generatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    approvedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: PaySlipUpdateattachmentsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PayrollPeriodCountOutputTypeDefaultArgs instead
     */
    export type PayrollPeriodCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollPeriodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollPeriodDefaultArgs instead
     */
    export type PayrollPeriodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollPeriodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaySlipDefaultArgs instead
     */
    export type PaySlipArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaySlipDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SalaryHistoryDefaultArgs instead
     */
    export type SalaryHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SalaryHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollStatsDefaultArgs instead
     */
    export type PayrollStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollStatsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollConfigDefaultArgs instead
     */
    export type PayrollConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployeeTaxInfoDefaultArgs instead
     */
    export type EmployeeTaxInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeeTaxInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PayrollProcessingLogDefaultArgs instead
     */
    export type PayrollProcessingLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PayrollProcessingLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}